diff --git a/node_modules/rescript-apollo-client/.merlin b/node_modules/rescript-apollo-client/.merlin
new file mode 100644
index 0000000..3bdb9b4
--- /dev/null
+++ b/node_modules/rescript-apollo-client/.merlin
@@ -0,0 +1,72 @@
+####{BSB GENERATED: NO EDIT
+FLG -ppx '/Volumes/SSD/Github/socializer/client/node_modules/bs-platform/darwin/bsc.exe -as-ppx -bs-jsx 3'
+S /Volumes/SSD/Github/socializer/client/node_modules/bs-platform/lib/ocaml
+B /Volumes/SSD/Github/socializer/client/node_modules/bs-platform/lib/ocaml
+FLG -w +a-4-9-20-40-41-42-50-61-102
+S /Volumes/SSD/Github/socializer/client/node_modules/@reasonml-community/graphql-ppx/lib/ocaml
+B /Volumes/SSD/Github/socializer/client/node_modules/@reasonml-community/graphql-ppx/lib/ocaml
+S /Volumes/SSD/Github/socializer/client/node_modules/@rescript/react/lib/ocaml
+B /Volumes/SSD/Github/socializer/client/node_modules/@rescript/react/lib/ocaml
+S src
+B lib/bs/src
+S src/zen-observable
+B lib/bs/src/zen-observable
+S src/subscriptions-transport-ws
+B lib/bs/src/subscriptions-transport-ws
+S src/graphql-tag
+B lib/bs/src/graphql-tag
+S src/graphql
+B lib/bs/src/graphql
+S src/graphql/location
+B lib/bs/src/graphql/location
+S src/graphql/language
+B lib/bs/src/graphql/language
+S src/graphql/execution
+B lib/bs/src/graphql/execution
+S src/graphql/error
+B lib/bs/src/graphql/error
+S src/@apollo/client
+B lib/bs/src/@apollo/client
+S src/@apollo/client/utilities
+B lib/bs/src/@apollo/client/utilities
+S src/@apollo/client/utilities/policies
+B lib/bs/src/@apollo/client/utilities/policies
+S src/@apollo/client/utilities/observables
+B lib/bs/src/@apollo/client/utilities/observables
+S src/@apollo/client/utilities/graphql
+B lib/bs/src/@apollo/client/utilities/graphql
+S src/@apollo/client/react
+B lib/bs/src/@apollo/client/react
+S src/@apollo/client/react/types
+B lib/bs/src/@apollo/client/react/types
+S src/@apollo/client/react/hooks
+B lib/bs/src/@apollo/client/react/hooks
+S src/@apollo/client/react/context
+B lib/bs/src/@apollo/client/react/context
+S src/@apollo/client/link
+B lib/bs/src/@apollo/client/link
+S src/@apollo/client/link/ws
+B lib/bs/src/@apollo/client/link/ws
+S src/@apollo/client/link/utils
+B lib/bs/src/@apollo/client/link/utils
+S src/@apollo/client/link/http
+B lib/bs/src/@apollo/client/link/http
+S src/@apollo/client/link/error
+B lib/bs/src/@apollo/client/link/error
+S src/@apollo/client/link/core
+B lib/bs/src/@apollo/client/link/core
+S src/@apollo/client/link/context
+B lib/bs/src/@apollo/client/link/context
+S src/@apollo/client/errors
+B lib/bs/src/@apollo/client/errors
+S src/@apollo/client/core
+B lib/bs/src/@apollo/client/core
+S src/@apollo/client/cache
+B lib/bs/src/@apollo/client/cache
+S src/@apollo/client/cache/inmemory
+B lib/bs/src/@apollo/client/cache/inmemory
+S src/@apollo/client/cache/core
+B lib/bs/src/@apollo/client/cache/core
+S src/@apollo/client/cache/core/types
+B lib/bs/src/@apollo/client/cache/core/types
+####BSB GENERATED: NO EDIT}
diff --git a/node_modules/rescript-apollo-client/bsconfig.json b/node_modules/rescript-apollo-client/bsconfig.json
index 950ea5e..24dcea6 100644
--- a/node_modules/rescript-apollo-client/bsconfig.json
+++ b/node_modules/rescript-apollo-client/bsconfig.json
@@ -17,5 +17,5 @@
     }
   ],
   "suffix": ".bs.js",
-  "bs-dependencies": ["@reasonml-community/graphql-ppx", "reason-react"]
+  "bs-dependencies": ["@reasonml-community/graphql-ppx", "@rescript/react"]
 }
diff --git a/node_modules/rescript-apollo-client/lib/bs/.bsbuild b/node_modules/rescript-apollo-client/lib/bs/.bsbuild
new file mode 100644
index 0000000..23423aa
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/.bsbuild
@@ -0,0 +1,74 @@
+70
+ApolloClient
+ApolloClient__Core
+ApolloClient__Link
+ApolloClient__Cache
+ApolloClient__React
+ApolloClient__Types
+ApolloClient__Utils
+ApolloClient__Client
+ApolloClient__Errors
+ApolloClient__Graphql
+ApolloClient__Link_Ws
+ApolloClient__Link_Core
+ApolloClient__Link_Http
+ApolloClient__Utilities
+ApolloClient__Cache_Core
+ApolloClient__Core_Types
+ApolloClient__GraphqlTag
+ApolloClient__Link_Error
+ApolloClient__Link_Utils
+ApolloClient__React_Hooks
+ApolloClient__React_Types
+ApolloClient__Link_Context
+ApolloClient__Graphql_Error
+ApolloClient__React_Context
+ApolloClient__ZenObservable
+ApolloClient__Cache_InMemory
+ApolloClient__Core_LocalState
+ApolloClient__Link_Core_Types
+ApolloClient__Cache_Core_Cache
+ApolloClient__Cache_Core_Types
+ApolloClient__Graphql_Language
+ApolloClient__Graphql_Location
+ApolloClient__Core_ApolloClient
+ApolloClient__Graphql_Execution
+ApolloClient__Utilities_Graphql
+ReasonMLCommunity__ApolloClient
+ApolloClient__Core_NetworkStatus
+ApolloClient__Errors_ApolloError
+ApolloClient__Link_Http_HttpLink
+ApolloClient__Utilities_Policies
+ApolloClient__Core_ObservableQuery
+ApolloClient__Graphql_Language_Ast
+ApolloClient__Link_Core_ApolloLink
+ApolloClient__React_Hooks_UseQuery
+ApolloClient__Utilities_Observables
+ApolloClient__Core_WatchQueryOptions
+ApolloClient__Cache_Core_Types_Common
+ApolloClient__Cache_InMemory_Policies
+ApolloClient__Graphql_Language_Source
+ApolloClient__React_Hooks_UseMutation
+ApolloClient__Link_Http_CreateHttpLink
+ApolloClient__React_Hooks_UseLazyQuery
+ApolloClient__SubscriptionsTransportWs
+ApolloClient__Graphql_Execution_Execute
+ApolloClient__Cache_Core_Types_DataProxy
+ApolloClient__Graphql_Error_GraphQLError
+ApolloClient__Cache_InMemory_ReactiveVars
+ApolloClient__Link_Utils_ThrowServerError
+ApolloClient__React_Hooks_UseApolloClient
+ApolloClient__React_Hooks_UseSubscription
+ApolloClient__Utilities_Graphql_Fragments
+ApolloClient__Cache_InMemory_InMemoryCache
+ApolloClient__React_Context_ApolloProvider
+ApolloClient__Utilities_Graphql_GetFromAst
+ApolloClient__Utilities_Graphql_StoreUtils
+ApolloClient__Utilities_Policies_Pagination
+ApolloClient__Utilities_Observables_Observable
+ApolloClient__Link_Http_SelectHttpOptionsAndBody
+ApolloClient__Cache_InMemory_Policies_FieldPolicy
+ApolloClient__Link_Http_ParseAndCheckHttpResponse
+src	src/@apollo/client/core	src/@apollo/client/link	src/@apollo/client/cache	src/@apollo/client/react	src/@apollo/client	src/@apollo/client/errors	src/graphql	src/@apollo/client/link/ws	src/@apollo/client/link/core	src/@apollo/client/link/http	src/@apollo/client/utilities	src/@apollo/client/cache/core	src/graphql-tag	src/@apollo/client/link/error	src/@apollo/client/link/utils	src/@apollo/client/react/hooks	src/@apollo/client/react/types	src/@apollo/client/link/context	src/graphql/error	src/@apollo/client/react/context	src/zen-observable	src/@apollo/client/cache/inmemory	src/@apollo/client/cache/core/types	src/graphql/language	src/graphql/location	src/graphql/execution	src/@apollo/client/utilities/graphql	src/@apollo/client/utilities/policies	src/@apollo/client/utilities/observables	src/subscriptions-transport-ws	
+1	!#%')+-/135791!;/-1!!=5/'-!!7-)779;-
+0
diff --git a/node_modules/rescript-apollo-client/lib/bs/.bsdeps b/node_modules/rescript-apollo-client/lib/bs/.bsdeps
new file mode 100644
index 0000000..9b83752
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/.bsdeps
@@ -0,0 +1,37 @@
+9.0.0
+/Volumes/SSD/Github/socializer/client/node_modules/rescript-apollo-client
+1
+bsconfig.json	0x1.809b221p+30
+src	0x1.809b1478p+30
+src/zen-observable	0x1.809b14ep+30
+src/subscriptions-transport-ws	0x1.809b14ep+30
+src/graphql-tag	0x1.809b14ep+30
+src/graphql	0x1.809b14ep+30
+src/graphql/location	0x1.809b15p+30
+src/graphql/language	0x1.809b15p+30
+src/graphql/execution	0x1.809b15p+30
+src/graphql/error	0x1.809b15p+30
+src/@apollo	0x1.809b0f74p+30
+src/@apollo/client	0x1.809b15p+30
+src/@apollo/client/utilities	0x1.809b1504p+30
+src/@apollo/client/utilities/policies	0x1.809b1504p+30
+src/@apollo/client/utilities/observables	0x1.809b1504p+30
+src/@apollo/client/utilities/graphql	0x1.809b1508p+30
+src/@apollo/client/react	0x1.809b1504p+30
+src/@apollo/client/react/types	0x1.809b1504p+30
+src/@apollo/client/react/hooks	0x1.809b1504p+30
+src/@apollo/client/react/context	0x1.809b1504p+30
+src/@apollo/client/link	0x1.809b1504p+30
+src/@apollo/client/link/ws	0x1.809b1504p+30
+src/@apollo/client/link/utils	0x1.809b1504p+30
+src/@apollo/client/link/http	0x1.809b1504p+30
+src/@apollo/client/link/error	0x1.809b1504p+30
+src/@apollo/client/link/core	0x1.809b1504p+30
+src/@apollo/client/link/context	0x1.809b1504p+30
+src/@apollo/client/errors	0x1.809b1504p+30
+src/@apollo/client/errors/__tests__	0x1.809b1504p+30
+src/@apollo/client/core	0x1.809b1504p+30
+src/@apollo/client/cache	0x1.809b1504p+30
+src/@apollo/client/cache/inmemory	0x1.809b1504p+30
+src/@apollo/client/cache/core	0x1.809b1504p+30
+src/@apollo/client/cache/core/types	0x1.809b1508p+30
diff --git a/node_modules/rescript-apollo-client/lib/bs/.compiler.log b/node_modules/rescript-apollo-client/lib/bs/.compiler.log
new file mode 100644
index 0000000..5431b2f
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/.compiler.log
@@ -0,0 +1,2 @@
+#Start(1613154579970)
+#Done(1613154581964)
diff --git a/node_modules/rescript-apollo-client/lib/bs/.ninja_log b/node_modules/rescript-apollo-client/lib/bs/.ninja_log
new file mode 100644
index 0000000..c6d5300
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/.ninja_log
@@ -0,0 +1,351 @@
+# ninja log v6
+2	35	1613154580000000000	src/ApolloClient.ast	d175a9000c7a1c06
+6	42	1613154580000000000	src/ApolloClient__Types.ast	d6513d8cf2fe4812
+9	47	1613154580000000000	src/ApolloClient__Utils.ast	6384ae0e581523d4
+13	57	1613154580000000000	src/subscriptions-transport-ws/ApolloClient__SubscriptionsTransportWs.ast	e4938867242559bd
+10	60	1613154580000000000	src/ReasonMLCommunity__ApolloClient.ast	c4b93f924ac465d3
+12	62	1613154580000000000	src/zen-observable/ApolloClient__ZenObservable.ast	9c8f278a9e0e99d9
+35	63	1613154580000000000	src/ApolloClient.d	ac97495937f030f5
+42	74	1613154580000000000	src/ApolloClient__Types.d	ebd937a4f996cba8
+47	76	1613154580000000000	src/ApolloClient__Utils.d	2a3b85f84a7a6bdc
+58	81	1613154580000000000	src/subscriptions-transport-ws/ApolloClient__SubscriptionsTransportWs.d	6c666d67a57ace5
+60	85	1613154580000000000	src/ReasonMLCommunity__ApolloClient.d	2e3ce2bac1a4bf98
+62	87	1613154580000000000	src/zen-observable/ApolloClient__ZenObservable.d	3c9008c92ecf3c0f
+64	103	1613154580000000000	src/graphql-tag/ApolloClient__GraphqlTag.ast	1218bb93203e0472
+74	113	1613154580000000000	src/graphql/ApolloClient__Graphql.ast	79c0c27c6b57208c
+76	120	1613154580000000000	src/graphql/location/ApolloClient__Graphql_Location.ast	8e7d6889777c055a
+103	135	1613154580000000000	src/graphql-tag/ApolloClient__GraphqlTag.d	b9695301b6866dc0
+85	141	1613154580000000000	src/graphql/language/ApolloClient__Graphql_Language.ast	f48f40cbd17d6c38
+81	145	1613154580000000000	src/subscriptions-transport-ws/ApolloClient__SubscriptionsTransportWs.cmj	e07a90a360bf80f2
+81	145	1613154580000000000	src/subscriptions-transport-ws/ApolloClient__SubscriptionsTransportWs.cmi	e07a90a360bf80f2
+81	145	1613154580000000000	../../src/subscriptions-transport-ws/ApolloClient__SubscriptionsTransportWs.bs.js	e07a90a360bf80f2
+115	149	1613154580000000000	src/graphql/ApolloClient__Graphql.d	42b95c54a06d2527
+121	151	1613154580000000000	src/graphql/location/ApolloClient__Graphql_Location.d	532ed1e39bed47d8
+142	163	1613154580000000000	src/graphql/language/ApolloClient__Graphql_Language.d	7f51cba60e94bffd
+135	173	1613154580000000000	src/graphql/language/ApolloClient__Graphql_Language_Ast.ast	e0d0f4f5db077ae1
+152	215	1613154580000000000	src/graphql/location/ApolloClient__Graphql_Location.cmj	d6307628341176cf
+152	215	1613154580000000000	src/graphql/location/ApolloClient__Graphql_Location.cmi	d6307628341176cf
+152	215	1613154580000000000	../../src/graphql/location/ApolloClient__Graphql_Location.bs.js	d6307628341176cf
+163	217	1613154580000000000	src/graphql/execution/ApolloClient__Graphql_Execution.ast	5d97cf1f99193644
+145	229	1613154580000000000	src/graphql/language/ApolloClient__Graphql_Language_Source.ast	b865117f4e77fcaa
+149	230	1613154580000000000	src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql.ast	df59ce927cc0375c
+174	247	1613154580000000000	src/graphql/language/ApolloClient__Graphql_Language_Ast.d	26512635e4cbc14
+87	250	1613154580000000000	src/zen-observable/ApolloClient__ZenObservable.cmj	4d3e134c00b1f5f3
+87	250	1613154580000000000	src/zen-observable/ApolloClient__ZenObservable.cmi	4d3e134c00b1f5f3
+87	250	1613154580000000000	../../src/zen-observable/ApolloClient__ZenObservable.bs.js	4d3e134c00b1f5f3
+216	253	1613154580000000000	src/graphql/execution/ApolloClient__Graphql_Execution_Execute.ast	e9918495bdc60da2
+220	256	1613154580000000000	src/graphql/execution/ApolloClient__Graphql_Execution.d	d85b8a8ef4c358c6
+229	279	1613154580000000000	src/graphql/language/ApolloClient__Graphql_Language_Source.d	f431e35ac360dc2b
+248	280	1613154580000000000	src/graphql/error/ApolloClient__Graphql_Error_GraphQLError.ast	c21bbcceb9b1dd25
+251	281	1613154580000000000	src/@apollo/client/ApolloClient__Client.ast	81974c790cd9c14b
+253	285	1613154580000000000	src/graphql/execution/ApolloClient__Graphql_Execution_Execute.d	db9eb6358bb3b1be
+231	301	1613154580000000000	src/graphql/error/ApolloClient__Graphql_Error.ast	3b065a3177c26ab7
+280	307	1613154580000000000	src/graphql/error/ApolloClient__Graphql_Error_GraphQLError.d	fc0e42b53f7bfc30
+281	313	1613154580000000000	src/@apollo/client/ApolloClient__Client.d	759be5906710bbb2
+279	317	1613154580000000000	src/@apollo/client/utilities/ApolloClient__Utilities.ast	ce6ba8055e9741c4
+280	324	1613154580000000000	src/graphql/language/ApolloClient__Graphql_Language_Source.cmj	ec3fc360e70fcbe0
+280	324	1613154580000000000	src/graphql/language/ApolloClient__Graphql_Language_Source.cmi	ec3fc360e70fcbe0
+280	324	1613154580000000000	../../src/graphql/language/ApolloClient__Graphql_Language_Source.bs.js	ec3fc360e70fcbe0
+288	327	1613154580000000000	src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies.ast	96483f917487e3ea
+301	342	1613154580000000000	src/graphql/error/ApolloClient__Graphql_Error.d	6a03001476fa786d
+309	346	1613154580000000000	src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies_Pagination.ast	d8b708b9d1000dda
+317	348	1613154580000000000	src/@apollo/client/utilities/ApolloClient__Utilities.d	5c5b7ebdd427d9ad
+313	350	1613154580000000000	src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables.ast	d7774c84d86adaa2
+327	369	1613154580000000000	src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies.d	dbd607a770c6255f
+324	376	1613154580000000000	src/graphql/language/ApolloClient__Graphql_Language_Ast.cmj	7267e847e8c530aa
+324	376	1613154580000000000	src/graphql/language/ApolloClient__Graphql_Language_Ast.cmi	7267e847e8c530aa
+324	376	1613154580000000000	../../src/graphql/language/ApolloClient__Graphql_Language_Ast.bs.js	7267e847e8c530aa
+346	378	1613154580000000000	src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies_Pagination.d	eb53c2c76a77f6b4
+348	381	1613154580000000000	src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql.d	de53d2167166f7ca
+351	384	1613154580000000000	src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables.d	ee34b5b8b516100a
+342	416	1613154580000000000	src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables_Observable.ast	518b050be66b2109
+376	420	1613154580000000000	src/graphql/language/ApolloClient__Graphql_Language.cmj	9f49d3ff879b3b77
+376	420	1613154580000000000	src/graphql/language/ApolloClient__Graphql_Language.cmi	9f49d3ff879b3b77
+376	420	1613154580000000000	../../src/graphql/language/ApolloClient__Graphql_Language.bs.js	9f49d3ff879b3b77
+379	423	1613154580000000000	src/graphql/error/ApolloClient__Graphql_Error_GraphQLError.cmj	6aa5209a53d6b3a7
+379	423	1613154580000000000	src/graphql/error/ApolloClient__Graphql_Error_GraphQLError.cmi	6aa5209a53d6b3a7
+379	423	1613154580000000000	../../src/graphql/error/ApolloClient__Graphql_Error_GraphQLError.bs.js	6aa5209a53d6b3a7
+381	427	1613154580000000000	src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_GetFromAst.ast	30c774df842f0412
+374	429	1613154580000000000	src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_Fragments.ast	7ce34cbc5208e4d4
+384	439	1613154580000000000	src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_StoreUtils.ast	734b03a8a8d98b5e
+418	450	1613154580000000000	src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables_Observable.d	2a350a1ab1de1bb5
+429	454	1613154580000000000	src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_Fragments.d	5106fd9182ccbcf7
+420	460	1613154580000000000	src/@apollo/client/react/ApolloClient__React.ast	df4a87b35c920554
+427	464	1613154580000000000	src/graphql/error/ApolloClient__Graphql_Error.cmj	b726aea476f4d335
+427	464	1613154580000000000	src/graphql/error/ApolloClient__Graphql_Error.cmi	b726aea476f4d335
+427	464	1613154580000000000	../../src/graphql/error/ApolloClient__Graphql_Error.bs.js	b726aea476f4d335
+439	472	1613154580000000000	src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_GetFromAst.d	d706f10f29bf506e
+424	479	1613154580000000000	src/graphql/execution/ApolloClient__Graphql_Execution_Execute.cmj	977ad3668cc4449b
+424	479	1613154580000000000	src/graphql/execution/ApolloClient__Graphql_Execution_Execute.cmi	977ad3668cc4449b
+424	479	1613154580000000000	../../src/graphql/execution/ApolloClient__Graphql_Execution_Execute.bs.js	977ad3668cc4449b
+455	481	1613154580000000000	src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_StoreUtils.d	a78b650301f66b51
+450	483	1613154580000000000	src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables_Observable.cmj	9f25982410e010a2
+450	483	1613154580000000000	src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables_Observable.cmi	9f25982410e010a2
+450	483	1613154580000000000	../../src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables_Observable.bs.js	9f25982410e010a2
+460	484	1613154580000000000	src/@apollo/client/react/ApolloClient__React.d	c4254c26cd6a1e19
+464	517	1613154580000000000	src/@apollo/client/react/types/ApolloClient__React_Types.ast	6087229e12bf2ae0
+472	523	1613154580000000000	src/@apollo/client/react/hooks/ApolloClient__React_Hooks.ast	3908488145d9e14a
+479	526	1613154580000000000	src/graphql/execution/ApolloClient__Graphql_Execution.cmj	b4366e5fa301916b
+479	526	1613154580000000000	src/graphql/execution/ApolloClient__Graphql_Execution.cmi	b4366e5fa301916b
+479	526	1613154580000000000	../../src/graphql/execution/ApolloClient__Graphql_Execution.bs.js	b4366e5fa301916b
+481	527	1613154580000000000	src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_StoreUtils.cmj	ddbd66768360ae23
+481	527	1613154580000000000	src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_StoreUtils.cmi	ddbd66768360ae23
+481	527	1613154580000000000	../../src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_StoreUtils.bs.js	ddbd66768360ae23
+483	530	1613154580000000000	src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables.cmj	19be9e7551809eab
+483	530	1613154580000000000	src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables.cmi	19be9e7551809eab
+483	530	1613154580000000000	../../src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables.bs.js	19be9e7551809eab
+485	540	1613154580000000000	src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.ast	74f1d3a5abcf1a83
+517	545	1613154580000000000	src/@apollo/client/react/types/ApolloClient__React_Types.d	a7baef5110684b41
+524	562	1613154580000000000	src/@apollo/client/react/hooks/ApolloClient__React_Hooks.d	106bddcbec6e2c12
+526	564	1613154580000000000	src/graphql/ApolloClient__Graphql.cmj	83c78716b52ed484
+526	564	1613154580000000000	src/graphql/ApolloClient__Graphql.cmi	83c78716b52ed484
+526	564	1613154580000000000	../../src/graphql/ApolloClient__Graphql.bs.js	83c78716b52ed484
+528	571	1613154580000000000	src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseMutation.ast	1f13e82605bfc398
+540	575	1613154580000000000	src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.d	af9925b3ead29f0d
+531	577	1613154580000000000	src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseLazyQuery.ast	e85e7e7857e837ba
+545	580	1613154580000000000	src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseApolloClient.ast	d81ce56878363978
+562	613	1613154580000000000	src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseSubscription.ast	ac2e4e7970a61dfe
+564	617	1613154580000000000	src/ApolloClient__Types.cmj	8af97311c15a86c7
+564	617	1613154580000000000	src/ApolloClient__Types.cmi	8af97311c15a86c7
+564	617	1613154580000000000	../../src/ApolloClient__Types.bs.js	8af97311c15a86c7
+571	619	1613154580000000000	src/graphql-tag/ApolloClient__GraphqlTag.cmj	dc62222a0f05ba75
+571	619	1613154580000000000	src/graphql-tag/ApolloClient__GraphqlTag.cmi	dc62222a0f05ba75
+571	619	1613154580000000000	../../src/graphql-tag/ApolloClient__GraphqlTag.bs.js	dc62222a0f05ba75
+575	624	1613154580000000000	src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_Fragments.cmj	1a80894b19ac86a
+575	624	1613154580000000000	src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_Fragments.cmi	1a80894b19ac86a
+575	624	1613154580000000000	../../src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_Fragments.bs.js	1a80894b19ac86a
+577	626	1613154580000000000	src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_GetFromAst.cmj	4cbfa5ccd20d805a
+577	626	1613154580000000000	src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_GetFromAst.cmi	4cbfa5ccd20d805a
+577	626	1613154580000000000	../../src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_GetFromAst.bs.js	4cbfa5ccd20d805a
+580	642	1613154580000000000	src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseMutation.d	a5c9f9b02f61ea70
+613	643	1613154580000000000	src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseLazyQuery.d	c05126f62adcaf82
+617	644	1613154580000000000	src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseApolloClient.d	baf11548aba4bc9d
+619	652	1613154580000000000	src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseSubscription.d	2cca42f400a67c20
+624	673	1613154580000000000	src/@apollo/client/react/context/ApolloClient__React_Context.ast	99d1a9b5d5f5697
+627	675	1613154580000000000	src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql.cmj	894957e405868829
+627	675	1613154580000000000	src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql.cmi	894957e405868829
+627	675	1613154580000000000	../../src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql.bs.js	894957e405868829
+642	676	1613154580000000000	src/@apollo/client/react/context/ApolloClient__React_Context_ApolloProvider.ast	92b658930c0b893d
+643	677	1613154580000000000	src/@apollo/client/link/ApolloClient__Link.ast	20025d50cb7394e2
+645	678	1613154580000000000	src/@apollo/client/link/ws/ApolloClient__Link_Ws.ast	317fed163ebfe644
+660	696	1613154580000000000	src/@apollo/client/link/utils/ApolloClient__Link_Utils.ast	95309aa9ff747a44
+674	698	1613154580000000000	src/@apollo/client/react/context/ApolloClient__React_Context.d	9fc993aae91cddd3
+676	700	1613154580000000000	src/@apollo/client/react/context/ApolloClient__React_Context_ApolloProvider.d	7c9cdef45b8324c
+675	702	1613154580000000000	src/@apollo/client/link/utils/ApolloClient__Link_Utils_ThrowServerError.ast	9976fef1f7ac29bb
+677	722	1613154580000000000	src/@apollo/client/link/ApolloClient__Link.d	2f3f1fda1f563269
+678	723	1613154580000000000	src/@apollo/client/link/ws/ApolloClient__Link_Ws.d	2e0a5c280dc43e4a
+696	727	1613154580000000000	src/@apollo/client/link/utils/ApolloClient__Link_Utils.d	8d6f178c4a98da64
+698	728	1613154580000000000	src/@apollo/client/link/http/ApolloClient__Link_Http.ast	a9f2dc019794810
+701	730	1613154580000000000	src/@apollo/client/link/http/ApolloClient__Link_Http_HttpLink.ast	154c79069aef2d9f
+717	743	1613154580000000000	src/@apollo/client/link/utils/ApolloClient__Link_Utils_ThrowServerError.d	d50cf9a2ec7d65d2
+722	752	1613154580000000000	src/@apollo/client/link/http/ApolloClient__Link_Http_CreateHttpLink.ast	1708b9d23c360fc8
+729	760	1613154580000000000	src/@apollo/client/link/http/ApolloClient__Link_Http.d	1e617e240f0de72a
+730	762	1613154580000000000	src/@apollo/client/link/http/ApolloClient__Link_Http_HttpLink.d	2a68624e14dd6c3b
+725	764	1613154580000000000	src/@apollo/client/link/http/ApolloClient__Link_Http_SelectHttpOptionsAndBody.ast	6da7b753fc2a9c46
+727	774	1613154580000000000	src/@apollo/client/link/http/ApolloClient__Link_Http_ParseAndCheckHttpResponse.ast	cb65ea0d90c4f5c3
+743	788	1613154580000000000	src/@apollo/client/link/utils/ApolloClient__Link_Utils_ThrowServerError.cmj	c9398245133ad95d
+743	788	1613154580000000000	src/@apollo/client/link/utils/ApolloClient__Link_Utils_ThrowServerError.cmi	c9398245133ad95d
+743	788	1613154580000000000	../../src/@apollo/client/link/utils/ApolloClient__Link_Utils_ThrowServerError.bs.js	c9398245133ad95d
+752	794	1613154580000000000	src/@apollo/client/link/http/ApolloClient__Link_Http_CreateHttpLink.d	af6175ee863415eb
+760	795	1613154580000000000	src/@apollo/client/link/error/ApolloClient__Link_Error.ast	cbcef507ae9908c7
+762	796	1613154580000000000	src/@apollo/client/link/core/ApolloClient__Link_Core.ast	310d9f32853ff480
+764	796	1613154580000000000	src/@apollo/client/link/http/ApolloClient__Link_Http_SelectHttpOptionsAndBody.d	3ae289f55fb4f22a
+774	799	1613154580000000000	src/@apollo/client/link/http/ApolloClient__Link_Http_ParseAndCheckHttpResponse.d	ecff394881b8334a
+793	828	1613154580000000000	src/@apollo/client/link/utils/ApolloClient__Link_Utils.cmj	efc59f4f5700d694
+793	828	1613154580000000000	src/@apollo/client/link/utils/ApolloClient__Link_Utils.cmi	efc59f4f5700d694
+793	828	1613154580000000000	../../src/@apollo/client/link/utils/ApolloClient__Link_Utils.bs.js	efc59f4f5700d694
+794	830	1613154580000000000	src/@apollo/client/link/core/ApolloClient__Link_Core_Types.ast	d6dfa87460a9deb5
+795	833	1613154580000000000	src/@apollo/client/link/error/ApolloClient__Link_Error.d	1f3b723bfa037c26
+796	840	1613154580000000000	src/@apollo/client/link/core/ApolloClient__Link_Core.d	2f83ca39fa3aa978
+797	847	1613154580000000000	src/@apollo/client/link/core/ApolloClient__Link_Core_ApolloLink.ast	7507ec563a95ab69
+799	850	1613154580000000000	src/@apollo/client/link/http/ApolloClient__Link_Http_ParseAndCheckHttpResponse.cmj	671753606c4d391b
+799	850	1613154580000000000	src/@apollo/client/link/http/ApolloClient__Link_Http_ParseAndCheckHttpResponse.cmi	671753606c4d391b
+799	850	1613154580000000000	../../src/@apollo/client/link/http/ApolloClient__Link_Http_ParseAndCheckHttpResponse.bs.js	671753606c4d391b
+830	854	1613154580000000000	src/@apollo/client/link/core/ApolloClient__Link_Core_Types.d	f5f5241ec47d7856
+828	860	1613154580000000000	src/@apollo/client/link/context/ApolloClient__Link_Context.ast	20f073d1e236cb02
+834	865	1613154580000000000	src/@apollo/client/errors/ApolloClient__Errors.ast	b506a652a9cb94cb
+847	879	1613154580000000000	src/@apollo/client/link/core/ApolloClient__Link_Core_ApolloLink.d	838960f0f4b3bc32
+846	884	1613154580000000000	src/@apollo/client/errors/ApolloClient__Errors_ApolloError.ast	35a56543669531f5
+860	887	1613154580000000000	src/@apollo/client/link/context/ApolloClient__Link_Context.d	61bcdd48e23dcbb5
+850	888	1613154580000000000	src/@apollo/client/core/ApolloClient__Core.ast	7c0d1ec7b01539c8
+854	890	1613154580000000000	src/@apollo/client/core/ApolloClient__Core_Types.ast	6f0067ae67c35b9c
+865	893	1613154580000000000	src/@apollo/client/errors/ApolloClient__Errors.d	581606db9c88b510
+883	912	1613154580000000000	src/@apollo/client/core/ApolloClient__Core_LocalState.ast	4e6a56974099de6b
+884	914	1613154580000000000	src/@apollo/client/errors/ApolloClient__Errors_ApolloError.d	7bbd069bfeb80f15
+888	918	1613154580000000000	src/@apollo/client/core/ApolloClient__Core.d	82bd3940c0c0a5ed
+890	927	1613154580000000000	src/@apollo/client/core/ApolloClient__Core_Types.d	a1b0efacf8a2aa2c
+887	930	1613154580000000000	src/@apollo/client/core/ApolloClient__Core_ApolloClient.ast	23977456cd07da73
+893	932	1613154580000000000	src/@apollo/client/core/ApolloClient__Core_NetworkStatus.ast	75691aaca970f1ad
+912	933	1613154580000000000	src/@apollo/client/core/ApolloClient__Core_LocalState.d	6a006480682b1898
+919	962	1613154580000000000	src/@apollo/client/core/ApolloClient__Core_ObservableQuery.ast	71d0b2c739b07004
+930	964	1613154580000000000	src/@apollo/client/core/ApolloClient__Core_ApolloClient.d	c8c7e140cad44efb
+932	977	1613154580000000000	src/@apollo/client/core/ApolloClient__Core_NetworkStatus.d	dad320f48184a0a7
+915	980	1613154580000000000	src/@apollo/client/errors/ApolloClient__Errors_ApolloError.cmj	93d436631d8f7acf
+915	980	1613154580000000000	src/@apollo/client/errors/ApolloClient__Errors_ApolloError.cmi	93d436631d8f7acf
+915	980	1613154580000000000	../../src/@apollo/client/errors/ApolloClient__Errors_ApolloError.bs.js	93d436631d8f7acf
+929	981	1613154580000000000	src/@apollo/client/core/ApolloClient__Core_WatchQueryOptions.ast	ad2a77aee0c2f94c
+960	990	1613154580000000000	src/@apollo/client/cache/ApolloClient__Cache.ast	2506e8c2102ecc1c
+962	995	1613154580000000000	src/@apollo/client/core/ApolloClient__Core_ObservableQuery.d	fb66af51c51a7fa8
+965	1018	1613154580000000000	src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory.ast	94ba8119e58bab6f
+977	1022	1613154580000000000	src/@apollo/client/core/ApolloClient__Core_NetworkStatus.cmj	755178ba05166e3b
+977	1022	1613154580000000000	src/@apollo/client/core/ApolloClient__Core_NetworkStatus.cmi	755178ba05166e3b
+977	1022	1613154580000000000	../../src/@apollo/client/core/ApolloClient__Core_NetworkStatus.bs.js	755178ba05166e3b
+990	1024	1613154580000000000	src/@apollo/client/core/ApolloClient__Core_WatchQueryOptions.d	21b533cda0694e56
+981	1026	1613154580000000000	src/@apollo/client/errors/ApolloClient__Errors.cmj	4bc7bf18343f4ba0
+981	1026	1613154580000000000	src/@apollo/client/errors/ApolloClient__Errors.cmi	4bc7bf18343f4ba0
+981	1026	1613154580000000000	../../src/@apollo/client/errors/ApolloClient__Errors.bs.js	4bc7bf18343f4ba0
+995	1028	1613154580000000000	src/@apollo/client/cache/ApolloClient__Cache.d	848969e7fba92a2a
+1018	1040	1613154581000000000	src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory.d	e330cb1847291692
+980	1058	1613154581000000000	src/ApolloClient__Utils.cmj	f233477da3466985
+980	1058	1613154581000000000	src/ApolloClient__Utils.cmi	f233477da3466985
+980	1058	1613154581000000000	../../src/ApolloClient__Utils.bs.js	f233477da3466985
+1022	1060	1613154581000000000	src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies.ast	6d68988adf87f95a
+1025	1061	1613154581000000000	src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_ReactiveVars.ast	e377c3c2ee5a6a1c
+1026	1063	1613154581000000000	src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_InMemoryCache.ast	f9e35eda561a8f54
+1028	1065	1613154581000000000	src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies_FieldPolicy.ast	e49a636b2c6e3d71
+1060	1092	1613154581000000000	src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies.d	8c31aa0659c43a2b
+1061	1093	1613154581000000000	src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_ReactiveVars.d	a2e6b7b8ff34a4f2
+1063	1095	1613154581000000000	src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_InMemoryCache.d	8a8bec670bc2385e
+1065	1136	1613154581000000000	src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies_FieldPolicy.d	8f652c0249942894
+1056	1143	1613154581000000000	src/@apollo/client/cache/core/ApolloClient__Cache_Core.ast	546f8af6174db219
+1058	1145	1613154581000000000	src/@apollo/client/link/core/ApolloClient__Link_Core_Types.cmj	e8943b5fb37cf67a
+1058	1145	1613154581000000000	src/@apollo/client/link/core/ApolloClient__Link_Core_Types.cmi	e8943b5fb37cf67a
+1058	1145	1613154581000000000	../../src/@apollo/client/link/core/ApolloClient__Link_Core_Types.bs.js	e8943b5fb37cf67a
+1092	1150	1613154581000000000	src/@apollo/client/cache/core/ApolloClient__Cache_Core_Cache.ast	aa6ac1376b91d830
+1093	1155	1613154581000000000	src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_ReactiveVars.cmj	48cb4bcfd28847c8
+1093	1155	1613154581000000000	src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_ReactiveVars.cmi	48cb4bcfd28847c8
+1093	1155	1613154581000000000	../../src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_ReactiveVars.bs.js	48cb4bcfd28847c8
+1095	1159	1613154581000000000	src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types.ast	bcb4575cbda577cf
+1143	1162	1613154581000000000	src/@apollo/client/cache/core/ApolloClient__Cache_Core.d	b06707b9bfea8e1f
+1138	1177	1613154581000000000	src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_Common.ast	4f5cb4a3a95c469f
+1155	1182	1613154581000000000	src/@apollo/client/cache/core/ApolloClient__Cache_Core_Cache.d	5fcdff70bd4171bc
+1145	1182	1613154581000000000	src/@apollo/client/link/http/ApolloClient__Link_Http_SelectHttpOptionsAndBody.cmj	9874fd683dbad3f6
+1145	1182	1613154581000000000	src/@apollo/client/link/http/ApolloClient__Link_Http_SelectHttpOptionsAndBody.cmi	9874fd683dbad3f6
+1145	1182	1613154581000000000	../../src/@apollo/client/link/http/ApolloClient__Link_Http_SelectHttpOptionsAndBody.bs.js	9874fd683dbad3f6
+1159	1182	1613154581000000000	src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types.d	609a5c01e3668f83
+1150	1192	1613154581000000000	src/@apollo/client/link/core/ApolloClient__Link_Core_ApolloLink.cmj	6fa9deac920a0e8b
+1150	1192	1613154581000000000	src/@apollo/client/link/core/ApolloClient__Link_Core_ApolloLink.cmi	6fa9deac920a0e8b
+1150	1192	1613154581000000000	../../src/@apollo/client/link/core/ApolloClient__Link_Core_ApolloLink.bs.js	6fa9deac920a0e8b
+1164	1201	1613154581000000000	src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_DataProxy.ast	7e822a929bda7618
+1177	1229	1613154581000000000	src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_Common.d	5638c90fa5ef58d9
+1193	1232	1613154581000000000	src/@apollo/client/link/http/ApolloClient__Link_Http_HttpLink.cmj	936f3d2d40512b9d
+1193	1232	1613154581000000000	src/@apollo/client/link/http/ApolloClient__Link_Http_HttpLink.cmi	936f3d2d40512b9d
+1193	1232	1613154581000000000	../../src/@apollo/client/link/http/ApolloClient__Link_Http_HttpLink.bs.js	936f3d2d40512b9d
+1194	1235	1613154581000000000	src/@apollo/client/link/http/ApolloClient__Link_Http_CreateHttpLink.cmj	1765f92734525ad
+1194	1235	1613154581000000000	src/@apollo/client/link/http/ApolloClient__Link_Http_CreateHttpLink.cmi	1765f92734525ad
+1194	1235	1613154581000000000	../../src/@apollo/client/link/http/ApolloClient__Link_Http_CreateHttpLink.bs.js	1765f92734525ad
+1192	1266	1613154581000000000	src/@apollo/client/link/ws/ApolloClient__Link_Ws.cmj	2b4e5a5eb09133b5
+1192	1266	1613154581000000000	src/@apollo/client/link/ws/ApolloClient__Link_Ws.cmi	2b4e5a5eb09133b5
+1192	1266	1613154581000000000	../../src/@apollo/client/link/ws/ApolloClient__Link_Ws.bs.js	2b4e5a5eb09133b5
+1201	1272	1613154581000000000	src/@apollo/client/link/core/ApolloClient__Link_Core.cmj	dbbda1806c7bb728
+1201	1272	1613154581000000000	src/@apollo/client/link/core/ApolloClient__Link_Core.cmi	dbbda1806c7bb728
+1201	1272	1613154581000000000	../../src/@apollo/client/link/core/ApolloClient__Link_Core.bs.js	dbbda1806c7bb728
+1229	1272	1613154581000000000	src/@apollo/client/link/context/ApolloClient__Link_Context.cmj	971899d29c706427
+1229	1272	1613154581000000000	src/@apollo/client/link/context/ApolloClient__Link_Context.cmi	971899d29c706427
+1229	1272	1613154581000000000	../../src/@apollo/client/link/context/ApolloClient__Link_Context.bs.js	971899d29c706427
+1232	1272	1613154581000000000	src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_Common.cmj	1d341b87f419f8e7
+1232	1272	1613154581000000000	src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_Common.cmi	1d341b87f419f8e7
+1232	1272	1613154581000000000	../../src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_Common.bs.js	1d341b87f419f8e7
+1235	1278	1613154581000000000	src/@apollo/client/link/http/ApolloClient__Link_Http.cmj	1e2b333258646903
+1235	1278	1613154581000000000	src/@apollo/client/link/http/ApolloClient__Link_Http.cmi	1e2b333258646903
+1235	1278	1613154581000000000	../../src/@apollo/client/link/http/ApolloClient__Link_Http.bs.js	1e2b333258646903
+1195	1279	1613154581000000000	src/@apollo/client/link/error/ApolloClient__Link_Error.cmj	8b10d70fdf57376
+1195	1279	1613154581000000000	src/@apollo/client/link/error/ApolloClient__Link_Error.cmi	8b10d70fdf57376
+1195	1279	1613154581000000000	../../src/@apollo/client/link/error/ApolloClient__Link_Error.bs.js	8b10d70fdf57376
+1266	1283	1613154581000000000	src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_DataProxy.d	23d97d21655ceb36
+1279	1303	1613154581000000000	src/@apollo/client/link/ApolloClient__Link.cmj	4a926b48a32ce940
+1279	1303	1613154581000000000	src/@apollo/client/link/ApolloClient__Link.cmi	4a926b48a32ce940
+1279	1303	1613154581000000000	../../src/@apollo/client/link/ApolloClient__Link.bs.js	4a926b48a32ce940
+1283	1314	1613154581000000000	src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_DataProxy.cmj	4f1ac52a18f4da87
+1283	1314	1613154581000000000	src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_DataProxy.cmi	4f1ac52a18f4da87
+1283	1314	1613154581000000000	../../src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_DataProxy.bs.js	4f1ac52a18f4da87
+1314	1336	1613154581000000000	src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types.cmj	e0859565ef257b58
+1314	1336	1613154581000000000	src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types.cmi	e0859565ef257b58
+1314	1336	1613154581000000000	../../src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types.bs.js	e0859565ef257b58
+1336	1376	1613154581000000000	src/@apollo/client/cache/core/ApolloClient__Cache_Core_Cache.cmj	746e39a23cf15b0f
+1336	1376	1613154581000000000	src/@apollo/client/cache/core/ApolloClient__Cache_Core_Cache.cmi	746e39a23cf15b0f
+1336	1376	1613154581000000000	../../src/@apollo/client/cache/core/ApolloClient__Cache_Core_Cache.bs.js	746e39a23cf15b0f
+1377	1402	1613154581000000000	src/@apollo/client/cache/core/ApolloClient__Cache_Core.cmj	b3d6c5932f36f8dc
+1377	1402	1613154581000000000	src/@apollo/client/cache/core/ApolloClient__Cache_Core.cmi	b3d6c5932f36f8dc
+1377	1402	1613154581000000000	../../src/@apollo/client/cache/core/ApolloClient__Cache_Core.bs.js	b3d6c5932f36f8dc
+1376	1406	1613154581000000000	src/@apollo/client/core/ApolloClient__Core_LocalState.cmj	f53d697bca6a1be1
+1376	1406	1613154581000000000	src/@apollo/client/core/ApolloClient__Core_LocalState.cmi	f53d697bca6a1be1
+1376	1406	1613154581000000000	../../src/@apollo/client/core/ApolloClient__Core_LocalState.bs.js	f53d697bca6a1be1
+1376	1418	1613154581000000000	src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies_FieldPolicy.cmj	8d592f680a11687
+1376	1418	1613154581000000000	src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies_FieldPolicy.cmi	8d592f680a11687
+1376	1418	1613154581000000000	../../src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies_FieldPolicy.bs.js	8d592f680a11687
+1418	1443	1613154581000000000	src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies_Pagination.cmj	f48416ff0088f95e
+1418	1443	1613154581000000000	src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies_Pagination.cmi	f48416ff0088f95e
+1418	1443	1613154581000000000	../../src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies_Pagination.bs.js	f48416ff0088f95e
+1406	1448	1613154581000000000	src/@apollo/client/core/ApolloClient__Core_Types.cmj	41e832630729c651
+1406	1448	1613154581000000000	src/@apollo/client/core/ApolloClient__Core_Types.cmi	41e832630729c651
+1406	1448	1613154581000000000	../../src/@apollo/client/core/ApolloClient__Core_Types.bs.js	41e832630729c651
+1443	1470	1613154581000000000	src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies.cmj	45ebabe375e17ec9
+1443	1470	1613154581000000000	src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies.cmi	45ebabe375e17ec9
+1443	1470	1613154581000000000	../../src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies.bs.js	45ebabe375e17ec9
+1444	1493	1613154581000000000	src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies.cmj	57a189cb7424dee2
+1444	1493	1613154581000000000	src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies.cmi	57a189cb7424dee2
+1444	1493	1613154581000000000	../../src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies.bs.js	57a189cb7424dee2
+1448	1495	1613154581000000000	src/@apollo/client/core/ApolloClient__Core_ObservableQuery.cmj	f8f6a97df0ff6529
+1448	1495	1613154581000000000	src/@apollo/client/core/ApolloClient__Core_ObservableQuery.cmi	f8f6a97df0ff6529
+1448	1495	1613154581000000000	../../src/@apollo/client/core/ApolloClient__Core_ObservableQuery.bs.js	f8f6a97df0ff6529
+1470	1510	1613154581000000000	src/@apollo/client/utilities/ApolloClient__Utilities.cmj	1ad79329055dd865
+1470	1510	1613154581000000000	src/@apollo/client/utilities/ApolloClient__Utilities.cmi	1ad79329055dd865
+1470	1510	1613154581000000000	../../src/@apollo/client/utilities/ApolloClient__Utilities.bs.js	1ad79329055dd865
+1450	1517	1613154581000000000	src/@apollo/client/core/ApolloClient__Core_WatchQueryOptions.cmj	6adf2db6261b7621
+1450	1517	1613154581000000000	src/@apollo/client/core/ApolloClient__Core_WatchQueryOptions.cmi	6adf2db6261b7621
+1450	1517	1613154581000000000	../../src/@apollo/client/core/ApolloClient__Core_WatchQueryOptions.bs.js	6adf2db6261b7621
+1493	1530	1613154581000000000	src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_InMemoryCache.cmj	8605e434d121a95f
+1493	1530	1613154581000000000	src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_InMemoryCache.cmi	8605e434d121a95f
+1493	1530	1613154581000000000	../../src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_InMemoryCache.bs.js	8605e434d121a95f
+1530	1551	1613154581000000000	src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory.cmj	e85c115e44613fea
+1530	1551	1613154581000000000	src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory.cmi	e85c115e44613fea
+1530	1551	1613154581000000000	../../src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory.bs.js	e85c115e44613fea
+1551	1580	1613154581000000000	src/@apollo/client/cache/ApolloClient__Cache.cmj	5162ddeef2f8b916
+1551	1580	1613154581000000000	src/@apollo/client/cache/ApolloClient__Cache.cmi	5162ddeef2f8b916
+1551	1580	1613154581000000000	../../src/@apollo/client/cache/ApolloClient__Cache.bs.js	5162ddeef2f8b916
+1517	1598	1613154581000000000	src/@apollo/client/core/ApolloClient__Core_ApolloClient.cmj	edfa0e4fa13cc214
+1517	1598	1613154581000000000	src/@apollo/client/core/ApolloClient__Core_ApolloClient.cmi	edfa0e4fa13cc214
+1517	1598	1613154581000000000	../../src/@apollo/client/core/ApolloClient__Core_ApolloClient.bs.js	edfa0e4fa13cc214
+1599	1653	1613154581000000000	src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseApolloClient.cmj	a59fb30f8f75dfa9
+1599	1653	1613154581000000000	src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseApolloClient.cmi	a59fb30f8f75dfa9
+1599	1653	1613154581000000000	../../src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseApolloClient.bs.js	a59fb30f8f75dfa9
+1603	1654	1613154581000000000	src/@apollo/client/core/ApolloClient__Core.cmj	4cb410c19d159b16
+1603	1654	1613154581000000000	src/@apollo/client/core/ApolloClient__Core.cmi	4cb410c19d159b16
+1603	1654	1613154581000000000	../../src/@apollo/client/core/ApolloClient__Core.bs.js	4cb410c19d159b16
+1601	1660	1613154581000000000	src/@apollo/client/react/context/ApolloClient__React_Context_ApolloProvider.cmj	e8d1dffbe86225b0
+1601	1660	1613154581000000000	src/@apollo/client/react/context/ApolloClient__React_Context_ApolloProvider.cmi	e8d1dffbe86225b0
+1601	1660	1613154581000000000	../../src/@apollo/client/react/context/ApolloClient__React_Context_ApolloProvider.bs.js	e8d1dffbe86225b0
+1660	1685	1613154581000000000	src/@apollo/client/react/context/ApolloClient__React_Context.cmj	8038bcdc053c29a
+1660	1685	1613154581000000000	src/@apollo/client/react/context/ApolloClient__React_Context.cmi	8038bcdc053c29a
+1660	1685	1613154581000000000	../../src/@apollo/client/react/context/ApolloClient__React_Context.bs.js	8038bcdc053c29a
+1598	1728	1613154581000000000	src/@apollo/client/react/types/ApolloClient__React_Types.cmj	6ad5fa202762b009
+1598	1728	1613154581000000000	src/@apollo/client/react/types/ApolloClient__React_Types.cmi	6ad5fa202762b009
+1598	1728	1613154581000000000	../../src/@apollo/client/react/types/ApolloClient__React_Types.bs.js	6ad5fa202762b009
+1729	1776	1613154581000000000	src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseSubscription.cmj	a525629e09f071e
+1729	1776	1613154581000000000	src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseSubscription.cmi	a525629e09f071e
+1729	1776	1613154581000000000	../../src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseSubscription.bs.js	a525629e09f071e
+1729	1779	1613154581000000000	src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseLazyQuery.cmj	5bb8d57106e214c
+1729	1779	1613154581000000000	src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseLazyQuery.cmi	5bb8d57106e214c
+1729	1779	1613154581000000000	../../src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseLazyQuery.bs.js	5bb8d57106e214c
+1728	1787	1613154581000000000	src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseMutation.cmj	acf73ca510ec73a9
+1728	1787	1613154581000000000	src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseMutation.cmi	acf73ca510ec73a9
+1728	1787	1613154581000000000	../../src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseMutation.bs.js	acf73ca510ec73a9
+1779	1830	1613154581000000000	src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.cmj	dc8943323fb61e11
+1779	1830	1613154581000000000	src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.cmi	dc8943323fb61e11
+1779	1830	1613154581000000000	../../src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.bs.js	dc8943323fb61e11
+1830	1852	1613154581000000000	src/@apollo/client/react/hooks/ApolloClient__React_Hooks.cmj	cf58668a3058ea96
+1830	1852	1613154581000000000	src/@apollo/client/react/hooks/ApolloClient__React_Hooks.cmi	cf58668a3058ea96
+1830	1852	1613154581000000000	../../src/@apollo/client/react/hooks/ApolloClient__React_Hooks.bs.js	cf58668a3058ea96
+1852	1887	1613154581000000000	src/@apollo/client/react/ApolloClient__React.cmj	3d58b0d57b937308
+1852	1887	1613154581000000000	src/@apollo/client/react/ApolloClient__React.cmi	3d58b0d57b937308
+1852	1887	1613154581000000000	../../src/@apollo/client/react/ApolloClient__React.bs.js	3d58b0d57b937308
+1887	1927	1613154581000000000	src/@apollo/client/ApolloClient__Client.cmj	f3f95215e6c34e4d
+1887	1927	1613154581000000000	src/@apollo/client/ApolloClient__Client.cmi	f3f95215e6c34e4d
+1887	1927	1613154581000000000	../../src/@apollo/client/ApolloClient__Client.bs.js	f3f95215e6c34e4d
+1927	1971	1613154581000000000	src/ReasonMLCommunity__ApolloClient.cmj	eeca4836c2e5b889
+1927	1971	1613154581000000000	src/ReasonMLCommunity__ApolloClient.cmi	eeca4836c2e5b889
+1927	1971	1613154581000000000	../../src/ReasonMLCommunity__ApolloClient.bs.js	eeca4836c2e5b889
+1971	1994	1613154581000000000	src/ApolloClient.cmj	e2e89cb33ba68fbc
+1971	1994	1613154581000000000	src/ApolloClient.cmi	e2e89cb33ba68fbc
+1971	1994	1613154581000000000	../../src/ApolloClient.bs.js	e2e89cb33ba68fbc
diff --git a/node_modules/rescript-apollo-client/lib/bs/build.ninja b/node_modules/rescript-apollo-client/lib/bs/build.ninja
new file mode 100644
index 0000000..44a88ee
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/build.ninja
@@ -0,0 +1,222 @@
+rescript = 1
+g_finger := /Volumes/SSD/Github/socializer/client/node_modules/@reasonml-community/graphql-ppx/lib/ocaml/install.stamp
+g_finger := /Volumes/SSD/Github/socializer/client/node_modules/@rescript/react/lib/ocaml/install.stamp
+rule astj
+  command = /Volumes/SSD/Github/socializer/client/node_modules/bs-platform/darwin/bsc.exe  -w a -bs-v 9.0.0 -bs-jsx 3  -absname -bs-ast -o $out $i
+o src/ApolloClient.ast : astj ../../src/ApolloClient.res
+rule deps
+  command = /Volumes/SSD/Github/socializer/client/node_modules/bs-platform/darwin/bsb_helper.exe -hash 70713a67d6978d807919716e6fb7db36 $in
+  restat = 1
+o src/ApolloClient.d : deps src/ApolloClient.ast
+rule mij
+  command = /Volumes/SSD/Github/socializer/client/node_modules/bs-platform/darwin/bsc.exe -I src/@apollo/client/cache/core/types -I src/@apollo/client/cache/core -I src/@apollo/client/cache/inmemory -I src/@apollo/client/cache -I src/@apollo/client/core -I src/@apollo/client/errors/__tests__ -I src/@apollo/client/errors -I src/@apollo/client/link/context -I src/@apollo/client/link/core -I src/@apollo/client/link/error -I src/@apollo/client/link/http -I src/@apollo/client/link/utils -I src/@apollo/client/link/ws -I src/@apollo/client/link -I src/@apollo/client/react/context -I src/@apollo/client/react/hooks -I src/@apollo/client/react/types -I src/@apollo/client/react -I src/@apollo/client/utilities/graphql -I src/@apollo/client/utilities/observables -I src/@apollo/client/utilities/policies -I src/@apollo/client/utilities -I src/@apollo/client -I src/@apollo -I src/graphql/error -I src/graphql/execution -I src/graphql/language -I src/graphql/location -I src/graphql -I src/graphql-tag -I src/subscriptions-transport-ws -I src/zen-observable -I src -I /Volumes/SSD/Github/socializer/client/node_modules/@reasonml-community/graphql-ppx/lib/ocaml -I /Volumes/SSD/Github/socializer/client/node_modules/@rescript/react/lib/ocaml   -w a -bs-package-name rescript-apollo-client -bs-package-output es6:$in_d:.bs.js -bs-v $g_finger $i
+  dyndep = 1
+  restat = 1
+o src/ApolloClient.cmj src/ApolloClient.cmi ../../src/ApolloClient.bs.js : mij src/ApolloClient.ast
+o src/ApolloClient__Types.ast : astj ../../src/ApolloClient__Types.res
+o src/ApolloClient__Types.d : deps src/ApolloClient__Types.ast
+o src/ApolloClient__Types.cmj src/ApolloClient__Types.cmi ../../src/ApolloClient__Types.bs.js : mij src/ApolloClient__Types.ast
+o src/ApolloClient__Utils.ast : astj ../../src/ApolloClient__Utils.res
+o src/ApolloClient__Utils.d : deps src/ApolloClient__Utils.ast
+o src/ApolloClient__Utils.cmj src/ApolloClient__Utils.cmi ../../src/ApolloClient__Utils.bs.js : mij src/ApolloClient__Utils.ast
+o src/ReasonMLCommunity__ApolloClient.ast : astj ../../src/ReasonMLCommunity__ApolloClient.res
+o src/ReasonMLCommunity__ApolloClient.d : deps src/ReasonMLCommunity__ApolloClient.ast
+o src/ReasonMLCommunity__ApolloClient.cmj src/ReasonMLCommunity__ApolloClient.cmi ../../src/ReasonMLCommunity__ApolloClient.bs.js : mij src/ReasonMLCommunity__ApolloClient.ast
+o src/zen-observable/ApolloClient__ZenObservable.ast : astj ../../src/zen-observable/ApolloClient__ZenObservable.res
+o src/zen-observable/ApolloClient__ZenObservable.d : deps src/zen-observable/ApolloClient__ZenObservable.ast
+o src/zen-observable/ApolloClient__ZenObservable.cmj src/zen-observable/ApolloClient__ZenObservable.cmi ../../src/zen-observable/ApolloClient__ZenObservable.bs.js : mij src/zen-observable/ApolloClient__ZenObservable.ast
+o src/subscriptions-transport-ws/ApolloClient__SubscriptionsTransportWs.ast : astj ../../src/subscriptions-transport-ws/ApolloClient__SubscriptionsTransportWs.res
+o src/subscriptions-transport-ws/ApolloClient__SubscriptionsTransportWs.d : deps src/subscriptions-transport-ws/ApolloClient__SubscriptionsTransportWs.ast
+o src/subscriptions-transport-ws/ApolloClient__SubscriptionsTransportWs.cmj src/subscriptions-transport-ws/ApolloClient__SubscriptionsTransportWs.cmi ../../src/subscriptions-transport-ws/ApolloClient__SubscriptionsTransportWs.bs.js : mij src/subscriptions-transport-ws/ApolloClient__SubscriptionsTransportWs.ast
+o src/graphql-tag/ApolloClient__GraphqlTag.ast : astj ../../src/graphql-tag/ApolloClient__GraphqlTag.res
+o src/graphql-tag/ApolloClient__GraphqlTag.d : deps src/graphql-tag/ApolloClient__GraphqlTag.ast
+o src/graphql-tag/ApolloClient__GraphqlTag.cmj src/graphql-tag/ApolloClient__GraphqlTag.cmi ../../src/graphql-tag/ApolloClient__GraphqlTag.bs.js : mij src/graphql-tag/ApolloClient__GraphqlTag.ast
+o src/graphql/ApolloClient__Graphql.ast : astj ../../src/graphql/ApolloClient__Graphql.res
+o src/graphql/ApolloClient__Graphql.d : deps src/graphql/ApolloClient__Graphql.ast
+o src/graphql/ApolloClient__Graphql.cmj src/graphql/ApolloClient__Graphql.cmi ../../src/graphql/ApolloClient__Graphql.bs.js : mij src/graphql/ApolloClient__Graphql.ast
+o src/graphql/location/ApolloClient__Graphql_Location.ast : astj ../../src/graphql/location/ApolloClient__Graphql_Location.res
+o src/graphql/location/ApolloClient__Graphql_Location.d : deps src/graphql/location/ApolloClient__Graphql_Location.ast
+o src/graphql/location/ApolloClient__Graphql_Location.cmj src/graphql/location/ApolloClient__Graphql_Location.cmi ../../src/graphql/location/ApolloClient__Graphql_Location.bs.js : mij src/graphql/location/ApolloClient__Graphql_Location.ast
+o src/graphql/language/ApolloClient__Graphql_Language.ast : astj ../../src/graphql/language/ApolloClient__Graphql_Language.res
+o src/graphql/language/ApolloClient__Graphql_Language.d : deps src/graphql/language/ApolloClient__Graphql_Language.ast
+o src/graphql/language/ApolloClient__Graphql_Language.cmj src/graphql/language/ApolloClient__Graphql_Language.cmi ../../src/graphql/language/ApolloClient__Graphql_Language.bs.js : mij src/graphql/language/ApolloClient__Graphql_Language.ast
+o src/graphql/language/ApolloClient__Graphql_Language_Ast.ast : astj ../../src/graphql/language/ApolloClient__Graphql_Language_Ast.res
+o src/graphql/language/ApolloClient__Graphql_Language_Ast.d : deps src/graphql/language/ApolloClient__Graphql_Language_Ast.ast
+o src/graphql/language/ApolloClient__Graphql_Language_Ast.cmj src/graphql/language/ApolloClient__Graphql_Language_Ast.cmi ../../src/graphql/language/ApolloClient__Graphql_Language_Ast.bs.js : mij src/graphql/language/ApolloClient__Graphql_Language_Ast.ast
+o src/graphql/language/ApolloClient__Graphql_Language_Source.ast : astj ../../src/graphql/language/ApolloClient__Graphql_Language_Source.res
+o src/graphql/language/ApolloClient__Graphql_Language_Source.d : deps src/graphql/language/ApolloClient__Graphql_Language_Source.ast
+o src/graphql/language/ApolloClient__Graphql_Language_Source.cmj src/graphql/language/ApolloClient__Graphql_Language_Source.cmi ../../src/graphql/language/ApolloClient__Graphql_Language_Source.bs.js : mij src/graphql/language/ApolloClient__Graphql_Language_Source.ast
+o src/graphql/execution/ApolloClient__Graphql_Execution.ast : astj ../../src/graphql/execution/ApolloClient__Graphql_Execution.res
+o src/graphql/execution/ApolloClient__Graphql_Execution.d : deps src/graphql/execution/ApolloClient__Graphql_Execution.ast
+o src/graphql/execution/ApolloClient__Graphql_Execution.cmj src/graphql/execution/ApolloClient__Graphql_Execution.cmi ../../src/graphql/execution/ApolloClient__Graphql_Execution.bs.js : mij src/graphql/execution/ApolloClient__Graphql_Execution.ast
+o src/graphql/execution/ApolloClient__Graphql_Execution_Execute.ast : astj ../../src/graphql/execution/ApolloClient__Graphql_Execution_Execute.res
+o src/graphql/execution/ApolloClient__Graphql_Execution_Execute.d : deps src/graphql/execution/ApolloClient__Graphql_Execution_Execute.ast
+o src/graphql/execution/ApolloClient__Graphql_Execution_Execute.cmj src/graphql/execution/ApolloClient__Graphql_Execution_Execute.cmi ../../src/graphql/execution/ApolloClient__Graphql_Execution_Execute.bs.js : mij src/graphql/execution/ApolloClient__Graphql_Execution_Execute.ast
+o src/graphql/error/ApolloClient__Graphql_Error.ast : astj ../../src/graphql/error/ApolloClient__Graphql_Error.res
+o src/graphql/error/ApolloClient__Graphql_Error.d : deps src/graphql/error/ApolloClient__Graphql_Error.ast
+o src/graphql/error/ApolloClient__Graphql_Error.cmj src/graphql/error/ApolloClient__Graphql_Error.cmi ../../src/graphql/error/ApolloClient__Graphql_Error.bs.js : mij src/graphql/error/ApolloClient__Graphql_Error.ast
+o src/graphql/error/ApolloClient__Graphql_Error_GraphQLError.ast : astj ../../src/graphql/error/ApolloClient__Graphql_Error_GraphQLError.res
+o src/graphql/error/ApolloClient__Graphql_Error_GraphQLError.d : deps src/graphql/error/ApolloClient__Graphql_Error_GraphQLError.ast
+o src/graphql/error/ApolloClient__Graphql_Error_GraphQLError.cmj src/graphql/error/ApolloClient__Graphql_Error_GraphQLError.cmi ../../src/graphql/error/ApolloClient__Graphql_Error_GraphQLError.bs.js : mij src/graphql/error/ApolloClient__Graphql_Error_GraphQLError.ast
+o src/@apollo/client/ApolloClient__Client.ast : astj ../../src/@apollo/client/ApolloClient__Client.res
+o src/@apollo/client/ApolloClient__Client.d : deps src/@apollo/client/ApolloClient__Client.ast
+o src/@apollo/client/ApolloClient__Client.cmj src/@apollo/client/ApolloClient__Client.cmi ../../src/@apollo/client/ApolloClient__Client.bs.js : mij src/@apollo/client/ApolloClient__Client.ast
+o src/@apollo/client/utilities/ApolloClient__Utilities.ast : astj ../../src/@apollo/client/utilities/ApolloClient__Utilities.res
+o src/@apollo/client/utilities/ApolloClient__Utilities.d : deps src/@apollo/client/utilities/ApolloClient__Utilities.ast
+o src/@apollo/client/utilities/ApolloClient__Utilities.cmj src/@apollo/client/utilities/ApolloClient__Utilities.cmi ../../src/@apollo/client/utilities/ApolloClient__Utilities.bs.js : mij src/@apollo/client/utilities/ApolloClient__Utilities.ast
+o src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies.ast : astj ../../src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies.res
+o src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies.d : deps src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies.ast
+o src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies.cmj src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies.cmi ../../src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies.bs.js : mij src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies.ast
+o src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies_Pagination.ast : astj ../../src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies_Pagination.res
+o src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies_Pagination.d : deps src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies_Pagination.ast
+o src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies_Pagination.cmj src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies_Pagination.cmi ../../src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies_Pagination.bs.js : mij src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies_Pagination.ast
+o src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables.ast : astj ../../src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables.res
+o src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables.d : deps src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables.ast
+o src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables.cmj src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables.cmi ../../src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables.bs.js : mij src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables.ast
+o src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables_Observable.ast : astj ../../src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables_Observable.res
+o src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables_Observable.d : deps src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables_Observable.ast
+o src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables_Observable.cmj src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables_Observable.cmi ../../src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables_Observable.bs.js : mij src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables_Observable.ast
+o src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql.ast : astj ../../src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql.res
+o src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql.d : deps src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql.ast
+o src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql.cmj src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql.cmi ../../src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql.bs.js : mij src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql.ast
+o src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_Fragments.ast : astj ../../src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_Fragments.res
+o src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_Fragments.d : deps src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_Fragments.ast
+o src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_Fragments.cmj src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_Fragments.cmi ../../src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_Fragments.bs.js : mij src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_Fragments.ast
+o src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_GetFromAst.ast : astj ../../src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_GetFromAst.res
+o src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_GetFromAst.d : deps src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_GetFromAst.ast
+o src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_GetFromAst.cmj src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_GetFromAst.cmi ../../src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_GetFromAst.bs.js : mij src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_GetFromAst.ast
+o src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_StoreUtils.ast : astj ../../src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_StoreUtils.res
+o src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_StoreUtils.d : deps src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_StoreUtils.ast
+o src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_StoreUtils.cmj src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_StoreUtils.cmi ../../src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_StoreUtils.bs.js : mij src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_StoreUtils.ast
+o src/@apollo/client/react/ApolloClient__React.ast : astj ../../src/@apollo/client/react/ApolloClient__React.res
+o src/@apollo/client/react/ApolloClient__React.d : deps src/@apollo/client/react/ApolloClient__React.ast
+o src/@apollo/client/react/ApolloClient__React.cmj src/@apollo/client/react/ApolloClient__React.cmi ../../src/@apollo/client/react/ApolloClient__React.bs.js : mij src/@apollo/client/react/ApolloClient__React.ast
+o src/@apollo/client/react/types/ApolloClient__React_Types.ast : astj ../../src/@apollo/client/react/types/ApolloClient__React_Types.res
+o src/@apollo/client/react/types/ApolloClient__React_Types.d : deps src/@apollo/client/react/types/ApolloClient__React_Types.ast
+o src/@apollo/client/react/types/ApolloClient__React_Types.cmj src/@apollo/client/react/types/ApolloClient__React_Types.cmi ../../src/@apollo/client/react/types/ApolloClient__React_Types.bs.js : mij src/@apollo/client/react/types/ApolloClient__React_Types.ast
+o src/@apollo/client/react/hooks/ApolloClient__React_Hooks.ast : astj ../../src/@apollo/client/react/hooks/ApolloClient__React_Hooks.res
+o src/@apollo/client/react/hooks/ApolloClient__React_Hooks.d : deps src/@apollo/client/react/hooks/ApolloClient__React_Hooks.ast
+o src/@apollo/client/react/hooks/ApolloClient__React_Hooks.cmj src/@apollo/client/react/hooks/ApolloClient__React_Hooks.cmi ../../src/@apollo/client/react/hooks/ApolloClient__React_Hooks.bs.js : mij src/@apollo/client/react/hooks/ApolloClient__React_Hooks.ast
+o src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.ast : astj ../../src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.res
+o src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.d : deps src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.ast
+o src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.cmj src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.cmi ../../src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.bs.js : mij src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.ast
+o src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseMutation.ast : astj ../../src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseMutation.res
+o src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseMutation.d : deps src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseMutation.ast
+o src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseMutation.cmj src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseMutation.cmi ../../src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseMutation.bs.js : mij src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseMutation.ast
+o src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseLazyQuery.ast : astj ../../src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseLazyQuery.res
+o src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseLazyQuery.d : deps src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseLazyQuery.ast
+o src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseLazyQuery.cmj src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseLazyQuery.cmi ../../src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseLazyQuery.bs.js : mij src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseLazyQuery.ast
+o src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseApolloClient.ast : astj ../../src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseApolloClient.res
+o src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseApolloClient.d : deps src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseApolloClient.ast
+o src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseApolloClient.cmj src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseApolloClient.cmi ../../src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseApolloClient.bs.js : mij src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseApolloClient.ast
+o src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseSubscription.ast : astj ../../src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseSubscription.res
+o src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseSubscription.d : deps src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseSubscription.ast
+o src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseSubscription.cmj src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseSubscription.cmi ../../src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseSubscription.bs.js : mij src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseSubscription.ast
+o src/@apollo/client/react/context/ApolloClient__React_Context.ast : astj ../../src/@apollo/client/react/context/ApolloClient__React_Context.res
+o src/@apollo/client/react/context/ApolloClient__React_Context.d : deps src/@apollo/client/react/context/ApolloClient__React_Context.ast
+o src/@apollo/client/react/context/ApolloClient__React_Context.cmj src/@apollo/client/react/context/ApolloClient__React_Context.cmi ../../src/@apollo/client/react/context/ApolloClient__React_Context.bs.js : mij src/@apollo/client/react/context/ApolloClient__React_Context.ast
+o src/@apollo/client/react/context/ApolloClient__React_Context_ApolloProvider.ast : astj ../../src/@apollo/client/react/context/ApolloClient__React_Context_ApolloProvider.res
+o src/@apollo/client/react/context/ApolloClient__React_Context_ApolloProvider.d : deps src/@apollo/client/react/context/ApolloClient__React_Context_ApolloProvider.ast
+o src/@apollo/client/react/context/ApolloClient__React_Context_ApolloProvider.cmj src/@apollo/client/react/context/ApolloClient__React_Context_ApolloProvider.cmi ../../src/@apollo/client/react/context/ApolloClient__React_Context_ApolloProvider.bs.js : mij src/@apollo/client/react/context/ApolloClient__React_Context_ApolloProvider.ast
+o src/@apollo/client/link/ApolloClient__Link.ast : astj ../../src/@apollo/client/link/ApolloClient__Link.res
+o src/@apollo/client/link/ApolloClient__Link.d : deps src/@apollo/client/link/ApolloClient__Link.ast
+o src/@apollo/client/link/ApolloClient__Link.cmj src/@apollo/client/link/ApolloClient__Link.cmi ../../src/@apollo/client/link/ApolloClient__Link.bs.js : mij src/@apollo/client/link/ApolloClient__Link.ast
+o src/@apollo/client/link/ws/ApolloClient__Link_Ws.ast : astj ../../src/@apollo/client/link/ws/ApolloClient__Link_Ws.res
+o src/@apollo/client/link/ws/ApolloClient__Link_Ws.d : deps src/@apollo/client/link/ws/ApolloClient__Link_Ws.ast
+o src/@apollo/client/link/ws/ApolloClient__Link_Ws.cmj src/@apollo/client/link/ws/ApolloClient__Link_Ws.cmi ../../src/@apollo/client/link/ws/ApolloClient__Link_Ws.bs.js : mij src/@apollo/client/link/ws/ApolloClient__Link_Ws.ast
+o src/@apollo/client/link/utils/ApolloClient__Link_Utils.ast : astj ../../src/@apollo/client/link/utils/ApolloClient__Link_Utils.res
+o src/@apollo/client/link/utils/ApolloClient__Link_Utils.d : deps src/@apollo/client/link/utils/ApolloClient__Link_Utils.ast
+o src/@apollo/client/link/utils/ApolloClient__Link_Utils.cmj src/@apollo/client/link/utils/ApolloClient__Link_Utils.cmi ../../src/@apollo/client/link/utils/ApolloClient__Link_Utils.bs.js : mij src/@apollo/client/link/utils/ApolloClient__Link_Utils.ast
+o src/@apollo/client/link/utils/ApolloClient__Link_Utils_ThrowServerError.ast : astj ../../src/@apollo/client/link/utils/ApolloClient__Link_Utils_ThrowServerError.res
+o src/@apollo/client/link/utils/ApolloClient__Link_Utils_ThrowServerError.d : deps src/@apollo/client/link/utils/ApolloClient__Link_Utils_ThrowServerError.ast
+o src/@apollo/client/link/utils/ApolloClient__Link_Utils_ThrowServerError.cmj src/@apollo/client/link/utils/ApolloClient__Link_Utils_ThrowServerError.cmi ../../src/@apollo/client/link/utils/ApolloClient__Link_Utils_ThrowServerError.bs.js : mij src/@apollo/client/link/utils/ApolloClient__Link_Utils_ThrowServerError.ast
+o src/@apollo/client/link/http/ApolloClient__Link_Http.ast : astj ../../src/@apollo/client/link/http/ApolloClient__Link_Http.res
+o src/@apollo/client/link/http/ApolloClient__Link_Http.d : deps src/@apollo/client/link/http/ApolloClient__Link_Http.ast
+o src/@apollo/client/link/http/ApolloClient__Link_Http.cmj src/@apollo/client/link/http/ApolloClient__Link_Http.cmi ../../src/@apollo/client/link/http/ApolloClient__Link_Http.bs.js : mij src/@apollo/client/link/http/ApolloClient__Link_Http.ast
+o src/@apollo/client/link/http/ApolloClient__Link_Http_HttpLink.ast : astj ../../src/@apollo/client/link/http/ApolloClient__Link_Http_HttpLink.res
+o src/@apollo/client/link/http/ApolloClient__Link_Http_HttpLink.d : deps src/@apollo/client/link/http/ApolloClient__Link_Http_HttpLink.ast
+o src/@apollo/client/link/http/ApolloClient__Link_Http_HttpLink.cmj src/@apollo/client/link/http/ApolloClient__Link_Http_HttpLink.cmi ../../src/@apollo/client/link/http/ApolloClient__Link_Http_HttpLink.bs.js : mij src/@apollo/client/link/http/ApolloClient__Link_Http_HttpLink.ast
+o src/@apollo/client/link/http/ApolloClient__Link_Http_CreateHttpLink.ast : astj ../../src/@apollo/client/link/http/ApolloClient__Link_Http_CreateHttpLink.res
+o src/@apollo/client/link/http/ApolloClient__Link_Http_CreateHttpLink.d : deps src/@apollo/client/link/http/ApolloClient__Link_Http_CreateHttpLink.ast
+o src/@apollo/client/link/http/ApolloClient__Link_Http_CreateHttpLink.cmj src/@apollo/client/link/http/ApolloClient__Link_Http_CreateHttpLink.cmi ../../src/@apollo/client/link/http/ApolloClient__Link_Http_CreateHttpLink.bs.js : mij src/@apollo/client/link/http/ApolloClient__Link_Http_CreateHttpLink.ast
+o src/@apollo/client/link/http/ApolloClient__Link_Http_SelectHttpOptionsAndBody.ast : astj ../../src/@apollo/client/link/http/ApolloClient__Link_Http_SelectHttpOptionsAndBody.res
+o src/@apollo/client/link/http/ApolloClient__Link_Http_SelectHttpOptionsAndBody.d : deps src/@apollo/client/link/http/ApolloClient__Link_Http_SelectHttpOptionsAndBody.ast
+o src/@apollo/client/link/http/ApolloClient__Link_Http_SelectHttpOptionsAndBody.cmj src/@apollo/client/link/http/ApolloClient__Link_Http_SelectHttpOptionsAndBody.cmi ../../src/@apollo/client/link/http/ApolloClient__Link_Http_SelectHttpOptionsAndBody.bs.js : mij src/@apollo/client/link/http/ApolloClient__Link_Http_SelectHttpOptionsAndBody.ast
+o src/@apollo/client/link/http/ApolloClient__Link_Http_ParseAndCheckHttpResponse.ast : astj ../../src/@apollo/client/link/http/ApolloClient__Link_Http_ParseAndCheckHttpResponse.res
+o src/@apollo/client/link/http/ApolloClient__Link_Http_ParseAndCheckHttpResponse.d : deps src/@apollo/client/link/http/ApolloClient__Link_Http_ParseAndCheckHttpResponse.ast
+o src/@apollo/client/link/http/ApolloClient__Link_Http_ParseAndCheckHttpResponse.cmj src/@apollo/client/link/http/ApolloClient__Link_Http_ParseAndCheckHttpResponse.cmi ../../src/@apollo/client/link/http/ApolloClient__Link_Http_ParseAndCheckHttpResponse.bs.js : mij src/@apollo/client/link/http/ApolloClient__Link_Http_ParseAndCheckHttpResponse.ast
+o src/@apollo/client/link/error/ApolloClient__Link_Error.ast : astj ../../src/@apollo/client/link/error/ApolloClient__Link_Error.res
+o src/@apollo/client/link/error/ApolloClient__Link_Error.d : deps src/@apollo/client/link/error/ApolloClient__Link_Error.ast
+o src/@apollo/client/link/error/ApolloClient__Link_Error.cmj src/@apollo/client/link/error/ApolloClient__Link_Error.cmi ../../src/@apollo/client/link/error/ApolloClient__Link_Error.bs.js : mij src/@apollo/client/link/error/ApolloClient__Link_Error.ast
+o src/@apollo/client/link/core/ApolloClient__Link_Core.ast : astj ../../src/@apollo/client/link/core/ApolloClient__Link_Core.res
+o src/@apollo/client/link/core/ApolloClient__Link_Core.d : deps src/@apollo/client/link/core/ApolloClient__Link_Core.ast
+o src/@apollo/client/link/core/ApolloClient__Link_Core.cmj src/@apollo/client/link/core/ApolloClient__Link_Core.cmi ../../src/@apollo/client/link/core/ApolloClient__Link_Core.bs.js : mij src/@apollo/client/link/core/ApolloClient__Link_Core.ast
+o src/@apollo/client/link/core/ApolloClient__Link_Core_Types.ast : astj ../../src/@apollo/client/link/core/ApolloClient__Link_Core_Types.res
+o src/@apollo/client/link/core/ApolloClient__Link_Core_Types.d : deps src/@apollo/client/link/core/ApolloClient__Link_Core_Types.ast
+o src/@apollo/client/link/core/ApolloClient__Link_Core_Types.cmj src/@apollo/client/link/core/ApolloClient__Link_Core_Types.cmi ../../src/@apollo/client/link/core/ApolloClient__Link_Core_Types.bs.js : mij src/@apollo/client/link/core/ApolloClient__Link_Core_Types.ast
+o src/@apollo/client/link/core/ApolloClient__Link_Core_ApolloLink.ast : astj ../../src/@apollo/client/link/core/ApolloClient__Link_Core_ApolloLink.res
+o src/@apollo/client/link/core/ApolloClient__Link_Core_ApolloLink.d : deps src/@apollo/client/link/core/ApolloClient__Link_Core_ApolloLink.ast
+o src/@apollo/client/link/core/ApolloClient__Link_Core_ApolloLink.cmj src/@apollo/client/link/core/ApolloClient__Link_Core_ApolloLink.cmi ../../src/@apollo/client/link/core/ApolloClient__Link_Core_ApolloLink.bs.js : mij src/@apollo/client/link/core/ApolloClient__Link_Core_ApolloLink.ast
+o src/@apollo/client/link/context/ApolloClient__Link_Context.ast : astj ../../src/@apollo/client/link/context/ApolloClient__Link_Context.res
+o src/@apollo/client/link/context/ApolloClient__Link_Context.d : deps src/@apollo/client/link/context/ApolloClient__Link_Context.ast
+o src/@apollo/client/link/context/ApolloClient__Link_Context.cmj src/@apollo/client/link/context/ApolloClient__Link_Context.cmi ../../src/@apollo/client/link/context/ApolloClient__Link_Context.bs.js : mij src/@apollo/client/link/context/ApolloClient__Link_Context.ast
+o src/@apollo/client/errors/ApolloClient__Errors.ast : astj ../../src/@apollo/client/errors/ApolloClient__Errors.res
+o src/@apollo/client/errors/ApolloClient__Errors.d : deps src/@apollo/client/errors/ApolloClient__Errors.ast
+o src/@apollo/client/errors/ApolloClient__Errors.cmj src/@apollo/client/errors/ApolloClient__Errors.cmi ../../src/@apollo/client/errors/ApolloClient__Errors.bs.js : mij src/@apollo/client/errors/ApolloClient__Errors.ast
+o src/@apollo/client/errors/ApolloClient__Errors_ApolloError.ast : astj ../../src/@apollo/client/errors/ApolloClient__Errors_ApolloError.res
+o src/@apollo/client/errors/ApolloClient__Errors_ApolloError.d : deps src/@apollo/client/errors/ApolloClient__Errors_ApolloError.ast
+o src/@apollo/client/errors/ApolloClient__Errors_ApolloError.cmj src/@apollo/client/errors/ApolloClient__Errors_ApolloError.cmi ../../src/@apollo/client/errors/ApolloClient__Errors_ApolloError.bs.js : mij src/@apollo/client/errors/ApolloClient__Errors_ApolloError.ast
+o src/@apollo/client/core/ApolloClient__Core.ast : astj ../../src/@apollo/client/core/ApolloClient__Core.res
+o src/@apollo/client/core/ApolloClient__Core.d : deps src/@apollo/client/core/ApolloClient__Core.ast
+o src/@apollo/client/core/ApolloClient__Core.cmj src/@apollo/client/core/ApolloClient__Core.cmi ../../src/@apollo/client/core/ApolloClient__Core.bs.js : mij src/@apollo/client/core/ApolloClient__Core.ast
+o src/@apollo/client/core/ApolloClient__Core_Types.ast : astj ../../src/@apollo/client/core/ApolloClient__Core_Types.res
+o src/@apollo/client/core/ApolloClient__Core_Types.d : deps src/@apollo/client/core/ApolloClient__Core_Types.ast
+o src/@apollo/client/core/ApolloClient__Core_Types.cmj src/@apollo/client/core/ApolloClient__Core_Types.cmi ../../src/@apollo/client/core/ApolloClient__Core_Types.bs.js : mij src/@apollo/client/core/ApolloClient__Core_Types.ast
+o src/@apollo/client/core/ApolloClient__Core_LocalState.ast : astj ../../src/@apollo/client/core/ApolloClient__Core_LocalState.res
+o src/@apollo/client/core/ApolloClient__Core_LocalState.d : deps src/@apollo/client/core/ApolloClient__Core_LocalState.ast
+o src/@apollo/client/core/ApolloClient__Core_LocalState.cmj src/@apollo/client/core/ApolloClient__Core_LocalState.cmi ../../src/@apollo/client/core/ApolloClient__Core_LocalState.bs.js : mij src/@apollo/client/core/ApolloClient__Core_LocalState.ast
+o src/@apollo/client/core/ApolloClient__Core_ApolloClient.ast : astj ../../src/@apollo/client/core/ApolloClient__Core_ApolloClient.res
+o src/@apollo/client/core/ApolloClient__Core_ApolloClient.d : deps src/@apollo/client/core/ApolloClient__Core_ApolloClient.ast
+o src/@apollo/client/core/ApolloClient__Core_ApolloClient.cmj src/@apollo/client/core/ApolloClient__Core_ApolloClient.cmi ../../src/@apollo/client/core/ApolloClient__Core_ApolloClient.bs.js : mij src/@apollo/client/core/ApolloClient__Core_ApolloClient.ast
+o src/@apollo/client/core/ApolloClient__Core_NetworkStatus.ast : astj ../../src/@apollo/client/core/ApolloClient__Core_NetworkStatus.res
+o src/@apollo/client/core/ApolloClient__Core_NetworkStatus.d : deps src/@apollo/client/core/ApolloClient__Core_NetworkStatus.ast
+o src/@apollo/client/core/ApolloClient__Core_NetworkStatus.cmj src/@apollo/client/core/ApolloClient__Core_NetworkStatus.cmi ../../src/@apollo/client/core/ApolloClient__Core_NetworkStatus.bs.js : mij src/@apollo/client/core/ApolloClient__Core_NetworkStatus.ast
+o src/@apollo/client/core/ApolloClient__Core_ObservableQuery.ast : astj ../../src/@apollo/client/core/ApolloClient__Core_ObservableQuery.res
+o src/@apollo/client/core/ApolloClient__Core_ObservableQuery.d : deps src/@apollo/client/core/ApolloClient__Core_ObservableQuery.ast
+o src/@apollo/client/core/ApolloClient__Core_ObservableQuery.cmj src/@apollo/client/core/ApolloClient__Core_ObservableQuery.cmi ../../src/@apollo/client/core/ApolloClient__Core_ObservableQuery.bs.js : mij src/@apollo/client/core/ApolloClient__Core_ObservableQuery.ast
+o src/@apollo/client/core/ApolloClient__Core_WatchQueryOptions.ast : astj ../../src/@apollo/client/core/ApolloClient__Core_WatchQueryOptions.res
+o src/@apollo/client/core/ApolloClient__Core_WatchQueryOptions.d : deps src/@apollo/client/core/ApolloClient__Core_WatchQueryOptions.ast
+o src/@apollo/client/core/ApolloClient__Core_WatchQueryOptions.cmj src/@apollo/client/core/ApolloClient__Core_WatchQueryOptions.cmi ../../src/@apollo/client/core/ApolloClient__Core_WatchQueryOptions.bs.js : mij src/@apollo/client/core/ApolloClient__Core_WatchQueryOptions.ast
+o src/@apollo/client/cache/ApolloClient__Cache.ast : astj ../../src/@apollo/client/cache/ApolloClient__Cache.res
+o src/@apollo/client/cache/ApolloClient__Cache.d : deps src/@apollo/client/cache/ApolloClient__Cache.ast
+o src/@apollo/client/cache/ApolloClient__Cache.cmj src/@apollo/client/cache/ApolloClient__Cache.cmi ../../src/@apollo/client/cache/ApolloClient__Cache.bs.js : mij src/@apollo/client/cache/ApolloClient__Cache.ast
+o src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory.ast : astj ../../src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory.res
+o src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory.d : deps src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory.ast
+o src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory.cmj src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory.cmi ../../src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory.bs.js : mij src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory.ast
+o src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies.ast : astj ../../src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies.res
+o src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies.d : deps src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies.ast
+o src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies.cmj src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies.cmi ../../src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies.bs.js : mij src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies.ast
+o src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_ReactiveVars.ast : astj ../../src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_ReactiveVars.res
+o src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_ReactiveVars.d : deps src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_ReactiveVars.ast
+o src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_ReactiveVars.cmj src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_ReactiveVars.cmi ../../src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_ReactiveVars.bs.js : mij src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_ReactiveVars.ast
+o src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_InMemoryCache.ast : astj ../../src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_InMemoryCache.res
+o src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_InMemoryCache.d : deps src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_InMemoryCache.ast
+o src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_InMemoryCache.cmj src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_InMemoryCache.cmi ../../src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_InMemoryCache.bs.js : mij src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_InMemoryCache.ast
+o src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies_FieldPolicy.ast : astj ../../src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies_FieldPolicy.res
+o src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies_FieldPolicy.d : deps src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies_FieldPolicy.ast
+o src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies_FieldPolicy.cmj src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies_FieldPolicy.cmi ../../src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies_FieldPolicy.bs.js : mij src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies_FieldPolicy.ast
+o src/@apollo/client/cache/core/ApolloClient__Cache_Core.ast : astj ../../src/@apollo/client/cache/core/ApolloClient__Cache_Core.res
+o src/@apollo/client/cache/core/ApolloClient__Cache_Core.d : deps src/@apollo/client/cache/core/ApolloClient__Cache_Core.ast
+o src/@apollo/client/cache/core/ApolloClient__Cache_Core.cmj src/@apollo/client/cache/core/ApolloClient__Cache_Core.cmi ../../src/@apollo/client/cache/core/ApolloClient__Cache_Core.bs.js : mij src/@apollo/client/cache/core/ApolloClient__Cache_Core.ast
+o src/@apollo/client/cache/core/ApolloClient__Cache_Core_Cache.ast : astj ../../src/@apollo/client/cache/core/ApolloClient__Cache_Core_Cache.res
+o src/@apollo/client/cache/core/ApolloClient__Cache_Core_Cache.d : deps src/@apollo/client/cache/core/ApolloClient__Cache_Core_Cache.ast
+o src/@apollo/client/cache/core/ApolloClient__Cache_Core_Cache.cmj src/@apollo/client/cache/core/ApolloClient__Cache_Core_Cache.cmi ../../src/@apollo/client/cache/core/ApolloClient__Cache_Core_Cache.bs.js : mij src/@apollo/client/cache/core/ApolloClient__Cache_Core_Cache.ast
+o src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types.ast : astj ../../src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types.res
+o src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types.d : deps src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types.ast
+o src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types.cmj src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types.cmi ../../src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types.bs.js : mij src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types.ast
+o src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_Common.ast : astj ../../src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_Common.res
+o src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_Common.d : deps src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_Common.ast
+o src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_Common.cmj src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_Common.cmi ../../src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_Common.bs.js : mij src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_Common.ast
+o src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_DataProxy.ast : astj ../../src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_DataProxy.res
+o src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_DataProxy.d : deps src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_DataProxy.ast
+o src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_DataProxy.cmj src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_DataProxy.cmi ../../src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_DataProxy.bs.js : mij src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_DataProxy.ast
diff --git a/node_modules/rescript-apollo-client/lib/bs/install.ninja b/node_modules/rescript-apollo-client/lib/bs/install.ninja
new file mode 100644
index 0000000..83532de
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/install.ninja
@@ -0,0 +1,286 @@
+rescript = 1
+rule cp
+  command = cp $i $out
+rule touch
+ command = touch $out
+o ApolloClient.cmi : cp ../bs/src/ApolloClient.cmi
+o ApolloClient.cmj : cp ../bs/src/ApolloClient.cmj
+o ApolloClient.cmt : cp ../bs/src/ApolloClient.cmt
+o ApolloClient.res : cp ../../src/ApolloClient.res
+o ApolloClient__Types.cmi : cp ../bs/src/ApolloClient__Types.cmi
+o ApolloClient__Types.cmj : cp ../bs/src/ApolloClient__Types.cmj
+o ApolloClient__Types.cmt : cp ../bs/src/ApolloClient__Types.cmt
+o ApolloClient__Types.res : cp ../../src/ApolloClient__Types.res
+o ApolloClient__Utils.cmi : cp ../bs/src/ApolloClient__Utils.cmi
+o ApolloClient__Utils.cmj : cp ../bs/src/ApolloClient__Utils.cmj
+o ApolloClient__Utils.cmt : cp ../bs/src/ApolloClient__Utils.cmt
+o ApolloClient__Utils.res : cp ../../src/ApolloClient__Utils.res
+o ReasonMLCommunity__ApolloClient.cmi : cp ../bs/src/ReasonMLCommunity__ApolloClient.cmi
+o ReasonMLCommunity__ApolloClient.cmj : cp ../bs/src/ReasonMLCommunity__ApolloClient.cmj
+o ReasonMLCommunity__ApolloClient.cmt : cp ../bs/src/ReasonMLCommunity__ApolloClient.cmt
+o ReasonMLCommunity__ApolloClient.res : cp ../../src/ReasonMLCommunity__ApolloClient.res
+o ApolloClient__ZenObservable.cmi : cp ../bs/src/zen-observable/ApolloClient__ZenObservable.cmi
+o ApolloClient__ZenObservable.cmj : cp ../bs/src/zen-observable/ApolloClient__ZenObservable.cmj
+o ApolloClient__ZenObservable.cmt : cp ../bs/src/zen-observable/ApolloClient__ZenObservable.cmt
+o ApolloClient__ZenObservable.res : cp ../../src/zen-observable/ApolloClient__ZenObservable.res
+o ApolloClient__SubscriptionsTransportWs.cmi : cp ../bs/src/subscriptions-transport-ws/ApolloClient__SubscriptionsTransportWs.cmi
+o ApolloClient__SubscriptionsTransportWs.cmj : cp ../bs/src/subscriptions-transport-ws/ApolloClient__SubscriptionsTransportWs.cmj
+o ApolloClient__SubscriptionsTransportWs.cmt : cp ../bs/src/subscriptions-transport-ws/ApolloClient__SubscriptionsTransportWs.cmt
+o ApolloClient__SubscriptionsTransportWs.res : cp ../../src/subscriptions-transport-ws/ApolloClient__SubscriptionsTransportWs.res
+o ApolloClient__GraphqlTag.cmi : cp ../bs/src/graphql-tag/ApolloClient__GraphqlTag.cmi
+o ApolloClient__GraphqlTag.cmj : cp ../bs/src/graphql-tag/ApolloClient__GraphqlTag.cmj
+o ApolloClient__GraphqlTag.cmt : cp ../bs/src/graphql-tag/ApolloClient__GraphqlTag.cmt
+o ApolloClient__GraphqlTag.res : cp ../../src/graphql-tag/ApolloClient__GraphqlTag.res
+o ApolloClient__Graphql.cmi : cp ../bs/src/graphql/ApolloClient__Graphql.cmi
+o ApolloClient__Graphql.cmj : cp ../bs/src/graphql/ApolloClient__Graphql.cmj
+o ApolloClient__Graphql.cmt : cp ../bs/src/graphql/ApolloClient__Graphql.cmt
+o ApolloClient__Graphql.res : cp ../../src/graphql/ApolloClient__Graphql.res
+o ApolloClient__Graphql_Location.cmi : cp ../bs/src/graphql/location/ApolloClient__Graphql_Location.cmi
+o ApolloClient__Graphql_Location.cmj : cp ../bs/src/graphql/location/ApolloClient__Graphql_Location.cmj
+o ApolloClient__Graphql_Location.cmt : cp ../bs/src/graphql/location/ApolloClient__Graphql_Location.cmt
+o ApolloClient__Graphql_Location.res : cp ../../src/graphql/location/ApolloClient__Graphql_Location.res
+o ApolloClient__Graphql_Language.cmi : cp ../bs/src/graphql/language/ApolloClient__Graphql_Language.cmi
+o ApolloClient__Graphql_Language.cmj : cp ../bs/src/graphql/language/ApolloClient__Graphql_Language.cmj
+o ApolloClient__Graphql_Language.cmt : cp ../bs/src/graphql/language/ApolloClient__Graphql_Language.cmt
+o ApolloClient__Graphql_Language.res : cp ../../src/graphql/language/ApolloClient__Graphql_Language.res
+o ApolloClient__Graphql_Language_Ast.cmi : cp ../bs/src/graphql/language/ApolloClient__Graphql_Language_Ast.cmi
+o ApolloClient__Graphql_Language_Ast.cmj : cp ../bs/src/graphql/language/ApolloClient__Graphql_Language_Ast.cmj
+o ApolloClient__Graphql_Language_Ast.cmt : cp ../bs/src/graphql/language/ApolloClient__Graphql_Language_Ast.cmt
+o ApolloClient__Graphql_Language_Ast.res : cp ../../src/graphql/language/ApolloClient__Graphql_Language_Ast.res
+o ApolloClient__Graphql_Language_Source.cmi : cp ../bs/src/graphql/language/ApolloClient__Graphql_Language_Source.cmi
+o ApolloClient__Graphql_Language_Source.cmj : cp ../bs/src/graphql/language/ApolloClient__Graphql_Language_Source.cmj
+o ApolloClient__Graphql_Language_Source.cmt : cp ../bs/src/graphql/language/ApolloClient__Graphql_Language_Source.cmt
+o ApolloClient__Graphql_Language_Source.res : cp ../../src/graphql/language/ApolloClient__Graphql_Language_Source.res
+o ApolloClient__Graphql_Execution.cmi : cp ../bs/src/graphql/execution/ApolloClient__Graphql_Execution.cmi
+o ApolloClient__Graphql_Execution.cmj : cp ../bs/src/graphql/execution/ApolloClient__Graphql_Execution.cmj
+o ApolloClient__Graphql_Execution.cmt : cp ../bs/src/graphql/execution/ApolloClient__Graphql_Execution.cmt
+o ApolloClient__Graphql_Execution.res : cp ../../src/graphql/execution/ApolloClient__Graphql_Execution.res
+o ApolloClient__Graphql_Execution_Execute.cmi : cp ../bs/src/graphql/execution/ApolloClient__Graphql_Execution_Execute.cmi
+o ApolloClient__Graphql_Execution_Execute.cmj : cp ../bs/src/graphql/execution/ApolloClient__Graphql_Execution_Execute.cmj
+o ApolloClient__Graphql_Execution_Execute.cmt : cp ../bs/src/graphql/execution/ApolloClient__Graphql_Execution_Execute.cmt
+o ApolloClient__Graphql_Execution_Execute.res : cp ../../src/graphql/execution/ApolloClient__Graphql_Execution_Execute.res
+o ApolloClient__Graphql_Error.cmi : cp ../bs/src/graphql/error/ApolloClient__Graphql_Error.cmi
+o ApolloClient__Graphql_Error.cmj : cp ../bs/src/graphql/error/ApolloClient__Graphql_Error.cmj
+o ApolloClient__Graphql_Error.cmt : cp ../bs/src/graphql/error/ApolloClient__Graphql_Error.cmt
+o ApolloClient__Graphql_Error.res : cp ../../src/graphql/error/ApolloClient__Graphql_Error.res
+o ApolloClient__Graphql_Error_GraphQLError.cmi : cp ../bs/src/graphql/error/ApolloClient__Graphql_Error_GraphQLError.cmi
+o ApolloClient__Graphql_Error_GraphQLError.cmj : cp ../bs/src/graphql/error/ApolloClient__Graphql_Error_GraphQLError.cmj
+o ApolloClient__Graphql_Error_GraphQLError.cmt : cp ../bs/src/graphql/error/ApolloClient__Graphql_Error_GraphQLError.cmt
+o ApolloClient__Graphql_Error_GraphQLError.res : cp ../../src/graphql/error/ApolloClient__Graphql_Error_GraphQLError.res
+o ApolloClient__Client.cmi : cp ../bs/src/@apollo/client/ApolloClient__Client.cmi
+o ApolloClient__Client.cmj : cp ../bs/src/@apollo/client/ApolloClient__Client.cmj
+o ApolloClient__Client.cmt : cp ../bs/src/@apollo/client/ApolloClient__Client.cmt
+o ApolloClient__Client.res : cp ../../src/@apollo/client/ApolloClient__Client.res
+o ApolloClient__Utilities.cmi : cp ../bs/src/@apollo/client/utilities/ApolloClient__Utilities.cmi
+o ApolloClient__Utilities.cmj : cp ../bs/src/@apollo/client/utilities/ApolloClient__Utilities.cmj
+o ApolloClient__Utilities.cmt : cp ../bs/src/@apollo/client/utilities/ApolloClient__Utilities.cmt
+o ApolloClient__Utilities.res : cp ../../src/@apollo/client/utilities/ApolloClient__Utilities.res
+o ApolloClient__Utilities_Policies.cmi : cp ../bs/src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies.cmi
+o ApolloClient__Utilities_Policies.cmj : cp ../bs/src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies.cmj
+o ApolloClient__Utilities_Policies.cmt : cp ../bs/src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies.cmt
+o ApolloClient__Utilities_Policies.res : cp ../../src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies.res
+o ApolloClient__Utilities_Policies_Pagination.cmi : cp ../bs/src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies_Pagination.cmi
+o ApolloClient__Utilities_Policies_Pagination.cmj : cp ../bs/src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies_Pagination.cmj
+o ApolloClient__Utilities_Policies_Pagination.cmt : cp ../bs/src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies_Pagination.cmt
+o ApolloClient__Utilities_Policies_Pagination.res : cp ../../src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies_Pagination.res
+o ApolloClient__Utilities_Observables.cmi : cp ../bs/src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables.cmi
+o ApolloClient__Utilities_Observables.cmj : cp ../bs/src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables.cmj
+o ApolloClient__Utilities_Observables.cmt : cp ../bs/src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables.cmt
+o ApolloClient__Utilities_Observables.res : cp ../../src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables.res
+o ApolloClient__Utilities_Observables_Observable.cmi : cp ../bs/src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables_Observable.cmi
+o ApolloClient__Utilities_Observables_Observable.cmj : cp ../bs/src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables_Observable.cmj
+o ApolloClient__Utilities_Observables_Observable.cmt : cp ../bs/src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables_Observable.cmt
+o ApolloClient__Utilities_Observables_Observable.res : cp ../../src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables_Observable.res
+o ApolloClient__Utilities_Graphql.cmi : cp ../bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql.cmi
+o ApolloClient__Utilities_Graphql.cmj : cp ../bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql.cmj
+o ApolloClient__Utilities_Graphql.cmt : cp ../bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql.cmt
+o ApolloClient__Utilities_Graphql.res : cp ../../src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql.res
+o ApolloClient__Utilities_Graphql_Fragments.cmi : cp ../bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_Fragments.cmi
+o ApolloClient__Utilities_Graphql_Fragments.cmj : cp ../bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_Fragments.cmj
+o ApolloClient__Utilities_Graphql_Fragments.cmt : cp ../bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_Fragments.cmt
+o ApolloClient__Utilities_Graphql_Fragments.res : cp ../../src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_Fragments.res
+o ApolloClient__Utilities_Graphql_GetFromAst.cmi : cp ../bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_GetFromAst.cmi
+o ApolloClient__Utilities_Graphql_GetFromAst.cmj : cp ../bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_GetFromAst.cmj
+o ApolloClient__Utilities_Graphql_GetFromAst.cmt : cp ../bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_GetFromAst.cmt
+o ApolloClient__Utilities_Graphql_GetFromAst.res : cp ../../src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_GetFromAst.res
+o ApolloClient__Utilities_Graphql_StoreUtils.cmi : cp ../bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_StoreUtils.cmi
+o ApolloClient__Utilities_Graphql_StoreUtils.cmj : cp ../bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_StoreUtils.cmj
+o ApolloClient__Utilities_Graphql_StoreUtils.cmt : cp ../bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_StoreUtils.cmt
+o ApolloClient__Utilities_Graphql_StoreUtils.res : cp ../../src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_StoreUtils.res
+o ApolloClient__React.cmi : cp ../bs/src/@apollo/client/react/ApolloClient__React.cmi
+o ApolloClient__React.cmj : cp ../bs/src/@apollo/client/react/ApolloClient__React.cmj
+o ApolloClient__React.cmt : cp ../bs/src/@apollo/client/react/ApolloClient__React.cmt
+o ApolloClient__React.res : cp ../../src/@apollo/client/react/ApolloClient__React.res
+o ApolloClient__React_Types.cmi : cp ../bs/src/@apollo/client/react/types/ApolloClient__React_Types.cmi
+o ApolloClient__React_Types.cmj : cp ../bs/src/@apollo/client/react/types/ApolloClient__React_Types.cmj
+o ApolloClient__React_Types.cmt : cp ../bs/src/@apollo/client/react/types/ApolloClient__React_Types.cmt
+o ApolloClient__React_Types.res : cp ../../src/@apollo/client/react/types/ApolloClient__React_Types.res
+o ApolloClient__React_Hooks.cmi : cp ../bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks.cmi
+o ApolloClient__React_Hooks.cmj : cp ../bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks.cmj
+o ApolloClient__React_Hooks.cmt : cp ../bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks.cmt
+o ApolloClient__React_Hooks.res : cp ../../src/@apollo/client/react/hooks/ApolloClient__React_Hooks.res
+o ApolloClient__React_Hooks_UseQuery.cmi : cp ../bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.cmi
+o ApolloClient__React_Hooks_UseQuery.cmj : cp ../bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.cmj
+o ApolloClient__React_Hooks_UseQuery.cmt : cp ../bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.cmt
+o ApolloClient__React_Hooks_UseQuery.res : cp ../../src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.res
+o ApolloClient__React_Hooks_UseMutation.cmi : cp ../bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseMutation.cmi
+o ApolloClient__React_Hooks_UseMutation.cmj : cp ../bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseMutation.cmj
+o ApolloClient__React_Hooks_UseMutation.cmt : cp ../bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseMutation.cmt
+o ApolloClient__React_Hooks_UseMutation.res : cp ../../src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseMutation.res
+o ApolloClient__React_Hooks_UseLazyQuery.cmi : cp ../bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseLazyQuery.cmi
+o ApolloClient__React_Hooks_UseLazyQuery.cmj : cp ../bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseLazyQuery.cmj
+o ApolloClient__React_Hooks_UseLazyQuery.cmt : cp ../bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseLazyQuery.cmt
+o ApolloClient__React_Hooks_UseLazyQuery.res : cp ../../src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseLazyQuery.res
+o ApolloClient__React_Hooks_UseApolloClient.cmi : cp ../bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseApolloClient.cmi
+o ApolloClient__React_Hooks_UseApolloClient.cmj : cp ../bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseApolloClient.cmj
+o ApolloClient__React_Hooks_UseApolloClient.cmt : cp ../bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseApolloClient.cmt
+o ApolloClient__React_Hooks_UseApolloClient.res : cp ../../src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseApolloClient.res
+o ApolloClient__React_Hooks_UseSubscription.cmi : cp ../bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseSubscription.cmi
+o ApolloClient__React_Hooks_UseSubscription.cmj : cp ../bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseSubscription.cmj
+o ApolloClient__React_Hooks_UseSubscription.cmt : cp ../bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseSubscription.cmt
+o ApolloClient__React_Hooks_UseSubscription.res : cp ../../src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseSubscription.res
+o ApolloClient__React_Context.cmi : cp ../bs/src/@apollo/client/react/context/ApolloClient__React_Context.cmi
+o ApolloClient__React_Context.cmj : cp ../bs/src/@apollo/client/react/context/ApolloClient__React_Context.cmj
+o ApolloClient__React_Context.cmt : cp ../bs/src/@apollo/client/react/context/ApolloClient__React_Context.cmt
+o ApolloClient__React_Context.res : cp ../../src/@apollo/client/react/context/ApolloClient__React_Context.res
+o ApolloClient__React_Context_ApolloProvider.cmi : cp ../bs/src/@apollo/client/react/context/ApolloClient__React_Context_ApolloProvider.cmi
+o ApolloClient__React_Context_ApolloProvider.cmj : cp ../bs/src/@apollo/client/react/context/ApolloClient__React_Context_ApolloProvider.cmj
+o ApolloClient__React_Context_ApolloProvider.cmt : cp ../bs/src/@apollo/client/react/context/ApolloClient__React_Context_ApolloProvider.cmt
+o ApolloClient__React_Context_ApolloProvider.res : cp ../../src/@apollo/client/react/context/ApolloClient__React_Context_ApolloProvider.res
+o ApolloClient__Link.cmi : cp ../bs/src/@apollo/client/link/ApolloClient__Link.cmi
+o ApolloClient__Link.cmj : cp ../bs/src/@apollo/client/link/ApolloClient__Link.cmj
+o ApolloClient__Link.cmt : cp ../bs/src/@apollo/client/link/ApolloClient__Link.cmt
+o ApolloClient__Link.res : cp ../../src/@apollo/client/link/ApolloClient__Link.res
+o ApolloClient__Link_Ws.cmi : cp ../bs/src/@apollo/client/link/ws/ApolloClient__Link_Ws.cmi
+o ApolloClient__Link_Ws.cmj : cp ../bs/src/@apollo/client/link/ws/ApolloClient__Link_Ws.cmj
+o ApolloClient__Link_Ws.cmt : cp ../bs/src/@apollo/client/link/ws/ApolloClient__Link_Ws.cmt
+o ApolloClient__Link_Ws.res : cp ../../src/@apollo/client/link/ws/ApolloClient__Link_Ws.res
+o ApolloClient__Link_Utils.cmi : cp ../bs/src/@apollo/client/link/utils/ApolloClient__Link_Utils.cmi
+o ApolloClient__Link_Utils.cmj : cp ../bs/src/@apollo/client/link/utils/ApolloClient__Link_Utils.cmj
+o ApolloClient__Link_Utils.cmt : cp ../bs/src/@apollo/client/link/utils/ApolloClient__Link_Utils.cmt
+o ApolloClient__Link_Utils.res : cp ../../src/@apollo/client/link/utils/ApolloClient__Link_Utils.res
+o ApolloClient__Link_Utils_ThrowServerError.cmi : cp ../bs/src/@apollo/client/link/utils/ApolloClient__Link_Utils_ThrowServerError.cmi
+o ApolloClient__Link_Utils_ThrowServerError.cmj : cp ../bs/src/@apollo/client/link/utils/ApolloClient__Link_Utils_ThrowServerError.cmj
+o ApolloClient__Link_Utils_ThrowServerError.cmt : cp ../bs/src/@apollo/client/link/utils/ApolloClient__Link_Utils_ThrowServerError.cmt
+o ApolloClient__Link_Utils_ThrowServerError.res : cp ../../src/@apollo/client/link/utils/ApolloClient__Link_Utils_ThrowServerError.res
+o ApolloClient__Link_Http.cmi : cp ../bs/src/@apollo/client/link/http/ApolloClient__Link_Http.cmi
+o ApolloClient__Link_Http.cmj : cp ../bs/src/@apollo/client/link/http/ApolloClient__Link_Http.cmj
+o ApolloClient__Link_Http.cmt : cp ../bs/src/@apollo/client/link/http/ApolloClient__Link_Http.cmt
+o ApolloClient__Link_Http.res : cp ../../src/@apollo/client/link/http/ApolloClient__Link_Http.res
+o ApolloClient__Link_Http_HttpLink.cmi : cp ../bs/src/@apollo/client/link/http/ApolloClient__Link_Http_HttpLink.cmi
+o ApolloClient__Link_Http_HttpLink.cmj : cp ../bs/src/@apollo/client/link/http/ApolloClient__Link_Http_HttpLink.cmj
+o ApolloClient__Link_Http_HttpLink.cmt : cp ../bs/src/@apollo/client/link/http/ApolloClient__Link_Http_HttpLink.cmt
+o ApolloClient__Link_Http_HttpLink.res : cp ../../src/@apollo/client/link/http/ApolloClient__Link_Http_HttpLink.res
+o ApolloClient__Link_Http_CreateHttpLink.cmi : cp ../bs/src/@apollo/client/link/http/ApolloClient__Link_Http_CreateHttpLink.cmi
+o ApolloClient__Link_Http_CreateHttpLink.cmj : cp ../bs/src/@apollo/client/link/http/ApolloClient__Link_Http_CreateHttpLink.cmj
+o ApolloClient__Link_Http_CreateHttpLink.cmt : cp ../bs/src/@apollo/client/link/http/ApolloClient__Link_Http_CreateHttpLink.cmt
+o ApolloClient__Link_Http_CreateHttpLink.res : cp ../../src/@apollo/client/link/http/ApolloClient__Link_Http_CreateHttpLink.res
+o ApolloClient__Link_Http_SelectHttpOptionsAndBody.cmi : cp ../bs/src/@apollo/client/link/http/ApolloClient__Link_Http_SelectHttpOptionsAndBody.cmi
+o ApolloClient__Link_Http_SelectHttpOptionsAndBody.cmj : cp ../bs/src/@apollo/client/link/http/ApolloClient__Link_Http_SelectHttpOptionsAndBody.cmj
+o ApolloClient__Link_Http_SelectHttpOptionsAndBody.cmt : cp ../bs/src/@apollo/client/link/http/ApolloClient__Link_Http_SelectHttpOptionsAndBody.cmt
+o ApolloClient__Link_Http_SelectHttpOptionsAndBody.res : cp ../../src/@apollo/client/link/http/ApolloClient__Link_Http_SelectHttpOptionsAndBody.res
+o ApolloClient__Link_Http_ParseAndCheckHttpResponse.cmi : cp ../bs/src/@apollo/client/link/http/ApolloClient__Link_Http_ParseAndCheckHttpResponse.cmi
+o ApolloClient__Link_Http_ParseAndCheckHttpResponse.cmj : cp ../bs/src/@apollo/client/link/http/ApolloClient__Link_Http_ParseAndCheckHttpResponse.cmj
+o ApolloClient__Link_Http_ParseAndCheckHttpResponse.cmt : cp ../bs/src/@apollo/client/link/http/ApolloClient__Link_Http_ParseAndCheckHttpResponse.cmt
+o ApolloClient__Link_Http_ParseAndCheckHttpResponse.res : cp ../../src/@apollo/client/link/http/ApolloClient__Link_Http_ParseAndCheckHttpResponse.res
+o ApolloClient__Link_Error.cmi : cp ../bs/src/@apollo/client/link/error/ApolloClient__Link_Error.cmi
+o ApolloClient__Link_Error.cmj : cp ../bs/src/@apollo/client/link/error/ApolloClient__Link_Error.cmj
+o ApolloClient__Link_Error.cmt : cp ../bs/src/@apollo/client/link/error/ApolloClient__Link_Error.cmt
+o ApolloClient__Link_Error.res : cp ../../src/@apollo/client/link/error/ApolloClient__Link_Error.res
+o ApolloClient__Link_Core.cmi : cp ../bs/src/@apollo/client/link/core/ApolloClient__Link_Core.cmi
+o ApolloClient__Link_Core.cmj : cp ../bs/src/@apollo/client/link/core/ApolloClient__Link_Core.cmj
+o ApolloClient__Link_Core.cmt : cp ../bs/src/@apollo/client/link/core/ApolloClient__Link_Core.cmt
+o ApolloClient__Link_Core.res : cp ../../src/@apollo/client/link/core/ApolloClient__Link_Core.res
+o ApolloClient__Link_Core_Types.cmi : cp ../bs/src/@apollo/client/link/core/ApolloClient__Link_Core_Types.cmi
+o ApolloClient__Link_Core_Types.cmj : cp ../bs/src/@apollo/client/link/core/ApolloClient__Link_Core_Types.cmj
+o ApolloClient__Link_Core_Types.cmt : cp ../bs/src/@apollo/client/link/core/ApolloClient__Link_Core_Types.cmt
+o ApolloClient__Link_Core_Types.res : cp ../../src/@apollo/client/link/core/ApolloClient__Link_Core_Types.res
+o ApolloClient__Link_Core_ApolloLink.cmi : cp ../bs/src/@apollo/client/link/core/ApolloClient__Link_Core_ApolloLink.cmi
+o ApolloClient__Link_Core_ApolloLink.cmj : cp ../bs/src/@apollo/client/link/core/ApolloClient__Link_Core_ApolloLink.cmj
+o ApolloClient__Link_Core_ApolloLink.cmt : cp ../bs/src/@apollo/client/link/core/ApolloClient__Link_Core_ApolloLink.cmt
+o ApolloClient__Link_Core_ApolloLink.res : cp ../../src/@apollo/client/link/core/ApolloClient__Link_Core_ApolloLink.res
+o ApolloClient__Link_Context.cmi : cp ../bs/src/@apollo/client/link/context/ApolloClient__Link_Context.cmi
+o ApolloClient__Link_Context.cmj : cp ../bs/src/@apollo/client/link/context/ApolloClient__Link_Context.cmj
+o ApolloClient__Link_Context.cmt : cp ../bs/src/@apollo/client/link/context/ApolloClient__Link_Context.cmt
+o ApolloClient__Link_Context.res : cp ../../src/@apollo/client/link/context/ApolloClient__Link_Context.res
+o ApolloClient__Errors.cmi : cp ../bs/src/@apollo/client/errors/ApolloClient__Errors.cmi
+o ApolloClient__Errors.cmj : cp ../bs/src/@apollo/client/errors/ApolloClient__Errors.cmj
+o ApolloClient__Errors.cmt : cp ../bs/src/@apollo/client/errors/ApolloClient__Errors.cmt
+o ApolloClient__Errors.res : cp ../../src/@apollo/client/errors/ApolloClient__Errors.res
+o ApolloClient__Errors_ApolloError.cmi : cp ../bs/src/@apollo/client/errors/ApolloClient__Errors_ApolloError.cmi
+o ApolloClient__Errors_ApolloError.cmj : cp ../bs/src/@apollo/client/errors/ApolloClient__Errors_ApolloError.cmj
+o ApolloClient__Errors_ApolloError.cmt : cp ../bs/src/@apollo/client/errors/ApolloClient__Errors_ApolloError.cmt
+o ApolloClient__Errors_ApolloError.res : cp ../../src/@apollo/client/errors/ApolloClient__Errors_ApolloError.res
+o ApolloClient__Core.cmi : cp ../bs/src/@apollo/client/core/ApolloClient__Core.cmi
+o ApolloClient__Core.cmj : cp ../bs/src/@apollo/client/core/ApolloClient__Core.cmj
+o ApolloClient__Core.cmt : cp ../bs/src/@apollo/client/core/ApolloClient__Core.cmt
+o ApolloClient__Core.res : cp ../../src/@apollo/client/core/ApolloClient__Core.res
+o ApolloClient__Core_Types.cmi : cp ../bs/src/@apollo/client/core/ApolloClient__Core_Types.cmi
+o ApolloClient__Core_Types.cmj : cp ../bs/src/@apollo/client/core/ApolloClient__Core_Types.cmj
+o ApolloClient__Core_Types.cmt : cp ../bs/src/@apollo/client/core/ApolloClient__Core_Types.cmt
+o ApolloClient__Core_Types.res : cp ../../src/@apollo/client/core/ApolloClient__Core_Types.res
+o ApolloClient__Core_LocalState.cmi : cp ../bs/src/@apollo/client/core/ApolloClient__Core_LocalState.cmi
+o ApolloClient__Core_LocalState.cmj : cp ../bs/src/@apollo/client/core/ApolloClient__Core_LocalState.cmj
+o ApolloClient__Core_LocalState.cmt : cp ../bs/src/@apollo/client/core/ApolloClient__Core_LocalState.cmt
+o ApolloClient__Core_LocalState.res : cp ../../src/@apollo/client/core/ApolloClient__Core_LocalState.res
+o ApolloClient__Core_ApolloClient.cmi : cp ../bs/src/@apollo/client/core/ApolloClient__Core_ApolloClient.cmi
+o ApolloClient__Core_ApolloClient.cmj : cp ../bs/src/@apollo/client/core/ApolloClient__Core_ApolloClient.cmj
+o ApolloClient__Core_ApolloClient.cmt : cp ../bs/src/@apollo/client/core/ApolloClient__Core_ApolloClient.cmt
+o ApolloClient__Core_ApolloClient.res : cp ../../src/@apollo/client/core/ApolloClient__Core_ApolloClient.res
+o ApolloClient__Core_NetworkStatus.cmi : cp ../bs/src/@apollo/client/core/ApolloClient__Core_NetworkStatus.cmi
+o ApolloClient__Core_NetworkStatus.cmj : cp ../bs/src/@apollo/client/core/ApolloClient__Core_NetworkStatus.cmj
+o ApolloClient__Core_NetworkStatus.cmt : cp ../bs/src/@apollo/client/core/ApolloClient__Core_NetworkStatus.cmt
+o ApolloClient__Core_NetworkStatus.res : cp ../../src/@apollo/client/core/ApolloClient__Core_NetworkStatus.res
+o ApolloClient__Core_ObservableQuery.cmi : cp ../bs/src/@apollo/client/core/ApolloClient__Core_ObservableQuery.cmi
+o ApolloClient__Core_ObservableQuery.cmj : cp ../bs/src/@apollo/client/core/ApolloClient__Core_ObservableQuery.cmj
+o ApolloClient__Core_ObservableQuery.cmt : cp ../bs/src/@apollo/client/core/ApolloClient__Core_ObservableQuery.cmt
+o ApolloClient__Core_ObservableQuery.res : cp ../../src/@apollo/client/core/ApolloClient__Core_ObservableQuery.res
+o ApolloClient__Core_WatchQueryOptions.cmi : cp ../bs/src/@apollo/client/core/ApolloClient__Core_WatchQueryOptions.cmi
+o ApolloClient__Core_WatchQueryOptions.cmj : cp ../bs/src/@apollo/client/core/ApolloClient__Core_WatchQueryOptions.cmj
+o ApolloClient__Core_WatchQueryOptions.cmt : cp ../bs/src/@apollo/client/core/ApolloClient__Core_WatchQueryOptions.cmt
+o ApolloClient__Core_WatchQueryOptions.res : cp ../../src/@apollo/client/core/ApolloClient__Core_WatchQueryOptions.res
+o ApolloClient__Cache.cmi : cp ../bs/src/@apollo/client/cache/ApolloClient__Cache.cmi
+o ApolloClient__Cache.cmj : cp ../bs/src/@apollo/client/cache/ApolloClient__Cache.cmj
+o ApolloClient__Cache.cmt : cp ../bs/src/@apollo/client/cache/ApolloClient__Cache.cmt
+o ApolloClient__Cache.res : cp ../../src/@apollo/client/cache/ApolloClient__Cache.res
+o ApolloClient__Cache_InMemory.cmi : cp ../bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory.cmi
+o ApolloClient__Cache_InMemory.cmj : cp ../bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory.cmj
+o ApolloClient__Cache_InMemory.cmt : cp ../bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory.cmt
+o ApolloClient__Cache_InMemory.res : cp ../../src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory.res
+o ApolloClient__Cache_InMemory_Policies.cmi : cp ../bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies.cmi
+o ApolloClient__Cache_InMemory_Policies.cmj : cp ../bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies.cmj
+o ApolloClient__Cache_InMemory_Policies.cmt : cp ../bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies.cmt
+o ApolloClient__Cache_InMemory_Policies.res : cp ../../src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies.res
+o ApolloClient__Cache_InMemory_ReactiveVars.cmi : cp ../bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_ReactiveVars.cmi
+o ApolloClient__Cache_InMemory_ReactiveVars.cmj : cp ../bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_ReactiveVars.cmj
+o ApolloClient__Cache_InMemory_ReactiveVars.cmt : cp ../bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_ReactiveVars.cmt
+o ApolloClient__Cache_InMemory_ReactiveVars.res : cp ../../src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_ReactiveVars.res
+o ApolloClient__Cache_InMemory_InMemoryCache.cmi : cp ../bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_InMemoryCache.cmi
+o ApolloClient__Cache_InMemory_InMemoryCache.cmj : cp ../bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_InMemoryCache.cmj
+o ApolloClient__Cache_InMemory_InMemoryCache.cmt : cp ../bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_InMemoryCache.cmt
+o ApolloClient__Cache_InMemory_InMemoryCache.res : cp ../../src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_InMemoryCache.res
+o ApolloClient__Cache_InMemory_Policies_FieldPolicy.cmi : cp ../bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies_FieldPolicy.cmi
+o ApolloClient__Cache_InMemory_Policies_FieldPolicy.cmj : cp ../bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies_FieldPolicy.cmj
+o ApolloClient__Cache_InMemory_Policies_FieldPolicy.cmt : cp ../bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies_FieldPolicy.cmt
+o ApolloClient__Cache_InMemory_Policies_FieldPolicy.res : cp ../../src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies_FieldPolicy.res
+o ApolloClient__Cache_Core.cmi : cp ../bs/src/@apollo/client/cache/core/ApolloClient__Cache_Core.cmi
+o ApolloClient__Cache_Core.cmj : cp ../bs/src/@apollo/client/cache/core/ApolloClient__Cache_Core.cmj
+o ApolloClient__Cache_Core.cmt : cp ../bs/src/@apollo/client/cache/core/ApolloClient__Cache_Core.cmt
+o ApolloClient__Cache_Core.res : cp ../../src/@apollo/client/cache/core/ApolloClient__Cache_Core.res
+o ApolloClient__Cache_Core_Cache.cmi : cp ../bs/src/@apollo/client/cache/core/ApolloClient__Cache_Core_Cache.cmi
+o ApolloClient__Cache_Core_Cache.cmj : cp ../bs/src/@apollo/client/cache/core/ApolloClient__Cache_Core_Cache.cmj
+o ApolloClient__Cache_Core_Cache.cmt : cp ../bs/src/@apollo/client/cache/core/ApolloClient__Cache_Core_Cache.cmt
+o ApolloClient__Cache_Core_Cache.res : cp ../../src/@apollo/client/cache/core/ApolloClient__Cache_Core_Cache.res
+o ApolloClient__Cache_Core_Types.cmi : cp ../bs/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types.cmi
+o ApolloClient__Cache_Core_Types.cmj : cp ../bs/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types.cmj
+o ApolloClient__Cache_Core_Types.cmt : cp ../bs/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types.cmt
+o ApolloClient__Cache_Core_Types.res : cp ../../src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types.res
+o ApolloClient__Cache_Core_Types_Common.cmi : cp ../bs/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_Common.cmi
+o ApolloClient__Cache_Core_Types_Common.cmj : cp ../bs/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_Common.cmj
+o ApolloClient__Cache_Core_Types_Common.cmt : cp ../bs/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_Common.cmt
+o ApolloClient__Cache_Core_Types_Common.res : cp ../../src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_Common.res
+o ApolloClient__Cache_Core_Types_DataProxy.cmi : cp ../bs/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_DataProxy.cmi
+o ApolloClient__Cache_Core_Types_DataProxy.cmj : cp ../bs/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_DataProxy.cmj
+o ApolloClient__Cache_Core_Types_DataProxy.cmt : cp ../bs/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_DataProxy.cmt
+o ApolloClient__Cache_Core_Types_DataProxy.res : cp ../../src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_DataProxy.res
+build install.stamp : touch ApolloClient.cmi ApolloClient.cmj ApolloClient__Types.cmi ApolloClient__Types.cmj ApolloClient__Utils.cmi ApolloClient__Utils.cmj ReasonMLCommunity__ApolloClient.cmi ReasonMLCommunity__ApolloClient.cmj ApolloClient__ZenObservable.cmi ApolloClient__ZenObservable.cmj ApolloClient__SubscriptionsTransportWs.cmi ApolloClient__SubscriptionsTransportWs.cmj ApolloClient__GraphqlTag.cmi ApolloClient__GraphqlTag.cmj ApolloClient__Graphql.cmi ApolloClient__Graphql.cmj ApolloClient__Graphql_Location.cmi ApolloClient__Graphql_Location.cmj ApolloClient__Graphql_Language.cmi ApolloClient__Graphql_Language.cmj ApolloClient__Graphql_Language_Ast.cmi ApolloClient__Graphql_Language_Ast.cmj ApolloClient__Graphql_Language_Source.cmi ApolloClient__Graphql_Language_Source.cmj ApolloClient__Graphql_Execution.cmi ApolloClient__Graphql_Execution.cmj ApolloClient__Graphql_Execution_Execute.cmi ApolloClient__Graphql_Execution_Execute.cmj ApolloClient__Graphql_Error.cmi ApolloClient__Graphql_Error.cmj ApolloClient__Graphql_Error_GraphQLError.cmi ApolloClient__Graphql_Error_GraphQLError.cmj ApolloClient__Client.cmi ApolloClient__Client.cmj ApolloClient__Utilities.cmi ApolloClient__Utilities.cmj ApolloClient__Utilities_Policies.cmi ApolloClient__Utilities_Policies.cmj ApolloClient__Utilities_Policies_Pagination.cmi ApolloClient__Utilities_Policies_Pagination.cmj ApolloClient__Utilities_Observables.cmi ApolloClient__Utilities_Observables.cmj ApolloClient__Utilities_Observables_Observable.cmi ApolloClient__Utilities_Observables_Observable.cmj ApolloClient__Utilities_Graphql.cmi ApolloClient__Utilities_Graphql.cmj ApolloClient__Utilities_Graphql_Fragments.cmi ApolloClient__Utilities_Graphql_Fragments.cmj ApolloClient__Utilities_Graphql_GetFromAst.cmi ApolloClient__Utilities_Graphql_GetFromAst.cmj ApolloClient__Utilities_Graphql_StoreUtils.cmi ApolloClient__Utilities_Graphql_StoreUtils.cmj ApolloClient__React.cmi ApolloClient__React.cmj ApolloClient__React_Types.cmi ApolloClient__React_Types.cmj ApolloClient__React_Hooks.cmi ApolloClient__React_Hooks.cmj ApolloClient__React_Hooks_UseQuery.cmi ApolloClient__React_Hooks_UseQuery.cmj ApolloClient__React_Hooks_UseMutation.cmi ApolloClient__React_Hooks_UseMutation.cmj ApolloClient__React_Hooks_UseLazyQuery.cmi ApolloClient__React_Hooks_UseLazyQuery.cmj ApolloClient__React_Hooks_UseApolloClient.cmi ApolloClient__React_Hooks_UseApolloClient.cmj ApolloClient__React_Hooks_UseSubscription.cmi ApolloClient__React_Hooks_UseSubscription.cmj ApolloClient__React_Context.cmi ApolloClient__React_Context.cmj ApolloClient__React_Context_ApolloProvider.cmi ApolloClient__React_Context_ApolloProvider.cmj ApolloClient__Link.cmi ApolloClient__Link.cmj ApolloClient__Link_Ws.cmi ApolloClient__Link_Ws.cmj ApolloClient__Link_Utils.cmi ApolloClient__Link_Utils.cmj ApolloClient__Link_Utils_ThrowServerError.cmi ApolloClient__Link_Utils_ThrowServerError.cmj ApolloClient__Link_Http.cmi ApolloClient__Link_Http.cmj ApolloClient__Link_Http_HttpLink.cmi ApolloClient__Link_Http_HttpLink.cmj ApolloClient__Link_Http_CreateHttpLink.cmi ApolloClient__Link_Http_CreateHttpLink.cmj ApolloClient__Link_Http_SelectHttpOptionsAndBody.cmi ApolloClient__Link_Http_SelectHttpOptionsAndBody.cmj ApolloClient__Link_Http_ParseAndCheckHttpResponse.cmi ApolloClient__Link_Http_ParseAndCheckHttpResponse.cmj ApolloClient__Link_Error.cmi ApolloClient__Link_Error.cmj ApolloClient__Link_Core.cmi ApolloClient__Link_Core.cmj ApolloClient__Link_Core_Types.cmi ApolloClient__Link_Core_Types.cmj ApolloClient__Link_Core_ApolloLink.cmi ApolloClient__Link_Core_ApolloLink.cmj ApolloClient__Link_Context.cmi ApolloClient__Link_Context.cmj ApolloClient__Errors.cmi ApolloClient__Errors.cmj ApolloClient__Errors_ApolloError.cmi ApolloClient__Errors_ApolloError.cmj ApolloClient__Core.cmi ApolloClient__Core.cmj ApolloClient__Core_Types.cmi ApolloClient__Core_Types.cmj ApolloClient__Core_LocalState.cmi ApolloClient__Core_LocalState.cmj ApolloClient__Core_ApolloClient.cmi ApolloClient__Core_ApolloClient.cmj ApolloClient__Core_NetworkStatus.cmi ApolloClient__Core_NetworkStatus.cmj ApolloClient__Core_ObservableQuery.cmi ApolloClient__Core_ObservableQuery.cmj ApolloClient__Core_WatchQueryOptions.cmi ApolloClient__Core_WatchQueryOptions.cmj ApolloClient__Cache.cmi ApolloClient__Cache.cmj ApolloClient__Cache_InMemory.cmi ApolloClient__Cache_InMemory.cmj ApolloClient__Cache_InMemory_Policies.cmi ApolloClient__Cache_InMemory_Policies.cmj ApolloClient__Cache_InMemory_ReactiveVars.cmi ApolloClient__Cache_InMemory_ReactiveVars.cmj ApolloClient__Cache_InMemory_InMemoryCache.cmi ApolloClient__Cache_InMemory_InMemoryCache.cmj ApolloClient__Cache_InMemory_Policies_FieldPolicy.cmi ApolloClient__Cache_InMemory_Policies_FieldPolicy.cmj ApolloClient__Cache_Core.cmi ApolloClient__Cache_Core.cmj ApolloClient__Cache_Core_Cache.cmi ApolloClient__Cache_Core_Cache.cmj ApolloClient__Cache_Core_Types.cmi ApolloClient__Cache_Core_Types.cmj ApolloClient__Cache_Core_Types_Common.cmi ApolloClient__Cache_Core_Types_Common.cmj ApolloClient__Cache_Core_Types_DataProxy.cmi ApolloClient__Cache_Core_Types_DataProxy.cmj 
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/ApolloClient__Client.ast b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/ApolloClient__Client.ast
new file mode 100644
index 0000000..634be0d
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/ApolloClient__Client.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/ApolloClient__Client.cmi b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/ApolloClient__Client.cmi
new file mode 100644
index 0000000..de7d2d0
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/ApolloClient__Client.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/ApolloClient__Client.cmj b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/ApolloClient__Client.cmj
new file mode 100644
index 0000000..7f9da0c
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/ApolloClient__Client.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/ApolloClient__Client.cmt b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/ApolloClient__Client.cmt
new file mode 100644
index 0000000..f8a0012
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/ApolloClient__Client.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/ApolloClient__Client.d b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/ApolloClient__Client.d
new file mode 100644
index 0000000..a6dc5d4
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/ApolloClient__Client.d
@@ -0,0 +1 @@
+src/@apollo/client/ApolloClient__Client.cmj : src/@apollo/client/cache/ApolloClient__Cache.cmj src/@apollo/client/cache/ApolloClient__Cache.cmi src/@apollo/client/cache/core/ApolloClient__Cache_Core_Cache.cmj src/@apollo/client/cache/core/ApolloClient__Cache_Core_Cache.cmi src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_InMemoryCache.cmj src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_InMemoryCache.cmi src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies.cmj src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies.cmi src/@apollo/client/core/ApolloClient__Core.cmj src/@apollo/client/core/ApolloClient__Core.cmi src/@apollo/client/core/ApolloClient__Core_ApolloClient.cmj src/@apollo/client/core/ApolloClient__Core_ApolloClient.cmi src/@apollo/client/core/ApolloClient__Core_NetworkStatus.cmj src/@apollo/client/core/ApolloClient__Core_NetworkStatus.cmi src/@apollo/client/errors/ApolloClient__Errors.cmj src/@apollo/client/errors/ApolloClient__Errors.cmi src/@apollo/client/errors/ApolloClient__Errors_ApolloError.cmj src/@apollo/client/errors/ApolloClient__Errors_ApolloError.cmi src/graphql-tag/ApolloClient__GraphqlTag.cmj src/graphql-tag/ApolloClient__GraphqlTag.cmi src/@apollo/client/link/ApolloClient__Link.cmj src/@apollo/client/link/ApolloClient__Link.cmi src/@apollo/client/link/core/ApolloClient__Link_Core_ApolloLink.cmj src/@apollo/client/link/core/ApolloClient__Link_Core_ApolloLink.cmi src/@apollo/client/link/http/ApolloClient__Link_Http_CreateHttpLink.cmj src/@apollo/client/link/http/ApolloClient__Link_Http_CreateHttpLink.cmi src/@apollo/client/link/http/ApolloClient__Link_Http_HttpLink.cmj src/@apollo/client/link/http/ApolloClient__Link_Http_HttpLink.cmi src/@apollo/client/react/ApolloClient__React.cmj src/@apollo/client/react/ApolloClient__React.cmi src/@apollo/client/react/context/ApolloClient__React_Context_ApolloProvider.cmj src/@apollo/client/react/context/ApolloClient__React_Context_ApolloProvider.cmi src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseMutation.cmj src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseMutation.cmi src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.cmj src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.cmi src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseSubscription.cmj src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseSubscription.cmi src/@apollo/client/utilities/ApolloClient__Utilities.cmj src/@apollo/client/utilities/ApolloClient__Utilities.cmi src/zen-observable/ApolloClient__ZenObservable.cmj src/zen-observable/ApolloClient__ZenObservable.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/ApolloClient__Cache.ast b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/ApolloClient__Cache.ast
new file mode 100644
index 0000000..57e866e
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/ApolloClient__Cache.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/ApolloClient__Cache.cmi b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/ApolloClient__Cache.cmi
new file mode 100644
index 0000000..08b74f4
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/ApolloClient__Cache.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/ApolloClient__Cache.cmj b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/ApolloClient__Cache.cmj
new file mode 100644
index 0000000..e77dc7c
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/ApolloClient__Cache.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/ApolloClient__Cache.cmt b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/ApolloClient__Cache.cmt
new file mode 100644
index 0000000..0e238ed
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/ApolloClient__Cache.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/ApolloClient__Cache.d b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/ApolloClient__Cache.d
new file mode 100644
index 0000000..8cc292a
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/ApolloClient__Cache.d
@@ -0,0 +1 @@
+src/@apollo/client/cache/ApolloClient__Cache.cmj : src/@apollo/client/cache/core/ApolloClient__Cache_Core.cmj src/@apollo/client/cache/core/ApolloClient__Cache_Core.cmi src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory.cmj src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/ApolloClient__Cache_Core.ast b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/ApolloClient__Cache_Core.ast
new file mode 100644
index 0000000..8d33d03
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/ApolloClient__Cache_Core.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/ApolloClient__Cache_Core.cmi b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/ApolloClient__Cache_Core.cmi
new file mode 100644
index 0000000..04b5cb8
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/ApolloClient__Cache_Core.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/ApolloClient__Cache_Core.cmj b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/ApolloClient__Cache_Core.cmj
new file mode 100644
index 0000000..22ee44c
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/ApolloClient__Cache_Core.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/ApolloClient__Cache_Core.cmt b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/ApolloClient__Cache_Core.cmt
new file mode 100644
index 0000000..08e11a0
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/ApolloClient__Cache_Core.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/ApolloClient__Cache_Core.d b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/ApolloClient__Cache_Core.d
new file mode 100644
index 0000000..7a4e103
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/ApolloClient__Cache_Core.d
@@ -0,0 +1 @@
+src/@apollo/client/cache/core/ApolloClient__Cache_Core.cmj : src/@apollo/client/cache/core/ApolloClient__Cache_Core_Cache.cmj src/@apollo/client/cache/core/ApolloClient__Cache_Core_Cache.cmi src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types.cmj src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/ApolloClient__Cache_Core_Cache.ast b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/ApolloClient__Cache_Core_Cache.ast
new file mode 100644
index 0000000..cf5de16
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/ApolloClient__Cache_Core_Cache.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/ApolloClient__Cache_Core_Cache.cmi b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/ApolloClient__Cache_Core_Cache.cmi
new file mode 100644
index 0000000..9d5586a
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/ApolloClient__Cache_Core_Cache.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/ApolloClient__Cache_Core_Cache.cmj b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/ApolloClient__Cache_Core_Cache.cmj
new file mode 100644
index 0000000..fe16f17
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/ApolloClient__Cache_Core_Cache.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/ApolloClient__Cache_Core_Cache.cmt b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/ApolloClient__Cache_Core_Cache.cmt
new file mode 100644
index 0000000..769d221
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/ApolloClient__Cache_Core_Cache.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/ApolloClient__Cache_Core_Cache.d b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/ApolloClient__Cache_Core_Cache.d
new file mode 100644
index 0000000..79a23cf
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/ApolloClient__Cache_Core_Cache.d
@@ -0,0 +1 @@
+src/@apollo/client/cache/core/ApolloClient__Cache_Core_Cache.cmj : src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types.cmj src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types.cmi src/ApolloClient__Types.cmj src/ApolloClient__Types.cmi src/ApolloClient__Utils.cmj src/ApolloClient__Utils.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types.ast b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types.ast
new file mode 100644
index 0000000..1a92597
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types.cmi b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types.cmi
new file mode 100644
index 0000000..1455ff1
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types.cmj b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types.cmj
new file mode 100644
index 0000000..08ca6cf
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types.cmt b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types.cmt
new file mode 100644
index 0000000..1a00944
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types.d b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types.d
new file mode 100644
index 0000000..a138f8d
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types.d
@@ -0,0 +1 @@
+src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types.cmj : src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_Common.cmj src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_Common.cmi src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_DataProxy.cmj src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_DataProxy.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_Common.ast b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_Common.ast
new file mode 100644
index 0000000..0c6d426
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_Common.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_Common.cmi b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_Common.cmi
new file mode 100644
index 0000000..cc33070
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_Common.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_Common.cmj b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_Common.cmj
new file mode 100644
index 0000000..79324a4
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_Common.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_Common.cmt b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_Common.cmt
new file mode 100644
index 0000000..6507ffa
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_Common.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_Common.d b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_Common.d
new file mode 100644
index 0000000..03c2c96
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_Common.d
@@ -0,0 +1 @@
+src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_Common.cmj : src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_StoreUtils.cmj src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_StoreUtils.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_DataProxy.ast b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_DataProxy.ast
new file mode 100644
index 0000000..3cd92b1
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_DataProxy.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_DataProxy.cmi b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_DataProxy.cmi
new file mode 100644
index 0000000..76f0a39
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_DataProxy.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_DataProxy.cmj b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_DataProxy.cmj
new file mode 100644
index 0000000..075b68c
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_DataProxy.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_DataProxy.cmt b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_DataProxy.cmt
new file mode 100644
index 0000000..d84e52d
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_DataProxy.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_DataProxy.d b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_DataProxy.d
new file mode 100644
index 0000000..bc227bb
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_DataProxy.d
@@ -0,0 +1 @@
+src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_DataProxy.cmj : src/graphql/ApolloClient__Graphql.cmj src/graphql/ApolloClient__Graphql.cmi src/ApolloClient__Utils.cmj src/ApolloClient__Utils.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory.ast b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory.ast
new file mode 100644
index 0000000..4f6e6f7
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory.cmi b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory.cmi
new file mode 100644
index 0000000..6014b9c
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory.cmj b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory.cmj
new file mode 100644
index 0000000..16d88b7
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory.cmt b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory.cmt
new file mode 100644
index 0000000..b1beb94
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory.d b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory.d
new file mode 100644
index 0000000..a894ccc
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory.d
@@ -0,0 +1 @@
+src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory.cmj : src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_InMemoryCache.cmj src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_InMemoryCache.cmi src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies.cmj src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_InMemoryCache.ast b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_InMemoryCache.ast
new file mode 100644
index 0000000..eff0172
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_InMemoryCache.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_InMemoryCache.cmi b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_InMemoryCache.cmi
new file mode 100644
index 0000000..9977045
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_InMemoryCache.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_InMemoryCache.cmj b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_InMemoryCache.cmj
new file mode 100644
index 0000000..df27b69
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_InMemoryCache.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_InMemoryCache.cmt b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_InMemoryCache.cmt
new file mode 100644
index 0000000..9a65230
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_InMemoryCache.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_InMemoryCache.d b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_InMemoryCache.d
new file mode 100644
index 0000000..04c77bf
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_InMemoryCache.d
@@ -0,0 +1 @@
+src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_InMemoryCache.cmj : src/@apollo/client/cache/core/ApolloClient__Cache_Core_Cache.cmj src/@apollo/client/cache/core/ApolloClient__Cache_Core_Cache.cmi src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies.cmj src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies.ast b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies.ast
new file mode 100644
index 0000000..3b3d959
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies.cmi b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies.cmi
new file mode 100644
index 0000000..7f6f6b7
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies.cmj b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies.cmj
new file mode 100644
index 0000000..ceab3b5
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies.cmt b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies.cmt
new file mode 100644
index 0000000..2154c41
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies.d b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies.d
new file mode 100644
index 0000000..6d3b3a4
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies.d
@@ -0,0 +1 @@
+src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies.cmj : src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies_FieldPolicy.cmj src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies_FieldPolicy.cmi src/graphql/ApolloClient__Graphql.cmj src/graphql/ApolloClient__Graphql.cmi src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_Fragments.cmj src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_Fragments.cmi src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies_Pagination.cmj src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies_Pagination.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies_FieldPolicy.ast b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies_FieldPolicy.ast
new file mode 100644
index 0000000..7bd8488
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies_FieldPolicy.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies_FieldPolicy.cmi b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies_FieldPolicy.cmi
new file mode 100644
index 0000000..320e4f7
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies_FieldPolicy.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies_FieldPolicy.cmj b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies_FieldPolicy.cmj
new file mode 100644
index 0000000..954e60b
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies_FieldPolicy.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies_FieldPolicy.cmt b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies_FieldPolicy.cmt
new file mode 100644
index 0000000..fc53bda
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies_FieldPolicy.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies_FieldPolicy.d b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies_FieldPolicy.d
new file mode 100644
index 0000000..d36d41b
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies_FieldPolicy.d
@@ -0,0 +1 @@
+src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies_FieldPolicy.cmj : src/@apollo/client/cache/core/ApolloClient__Cache_Core_Cache.cmj src/@apollo/client/cache/core/ApolloClient__Cache_Core_Cache.cmi src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_Common.cmj src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_Common.cmi src/graphql/ApolloClient__Graphql.cmj src/graphql/ApolloClient__Graphql.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_ReactiveVars.ast b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_ReactiveVars.ast
new file mode 100644
index 0000000..4a459fd
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_ReactiveVars.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_ReactiveVars.cmi b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_ReactiveVars.cmi
new file mode 100644
index 0000000..7366d54
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_ReactiveVars.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_ReactiveVars.cmj b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_ReactiveVars.cmj
new file mode 100644
index 0000000..94223cd
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_ReactiveVars.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_ReactiveVars.cmt b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_ReactiveVars.cmt
new file mode 100644
index 0000000..34f0907
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_ReactiveVars.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_ReactiveVars.d b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_ReactiveVars.d
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core.ast b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core.ast
new file mode 100644
index 0000000..4c15d64
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core.cmi b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core.cmi
new file mode 100644
index 0000000..6ddc4db
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core.cmj b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core.cmj
new file mode 100644
index 0000000..9f609e5
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core.cmt b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core.cmt
new file mode 100644
index 0000000..5f569a1
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core.d b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core.d
new file mode 100644
index 0000000..7c14597
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core.d
@@ -0,0 +1 @@
+src/@apollo/client/core/ApolloClient__Core.cmj : src/@apollo/client/core/ApolloClient__Core_ApolloClient.cmj src/@apollo/client/core/ApolloClient__Core_ApolloClient.cmi src/@apollo/client/core/ApolloClient__Core_LocalState.cmj src/@apollo/client/core/ApolloClient__Core_LocalState.cmi src/@apollo/client/core/ApolloClient__Core_NetworkStatus.cmj src/@apollo/client/core/ApolloClient__Core_NetworkStatus.cmi src/@apollo/client/core/ApolloClient__Core_ObservableQuery.cmj src/@apollo/client/core/ApolloClient__Core_ObservableQuery.cmi src/@apollo/client/core/ApolloClient__Core_Types.cmj src/@apollo/client/core/ApolloClient__Core_Types.cmi src/@apollo/client/core/ApolloClient__Core_WatchQueryOptions.cmj src/@apollo/client/core/ApolloClient__Core_WatchQueryOptions.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_ApolloClient.ast b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_ApolloClient.ast
new file mode 100644
index 0000000..e1516a6
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_ApolloClient.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_ApolloClient.cmi b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_ApolloClient.cmi
new file mode 100644
index 0000000..d5301fe
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_ApolloClient.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_ApolloClient.cmj b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_ApolloClient.cmj
new file mode 100644
index 0000000..2bbd58f
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_ApolloClient.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_ApolloClient.cmt b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_ApolloClient.cmt
new file mode 100644
index 0000000..1570c94
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_ApolloClient.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_ApolloClient.d b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_ApolloClient.d
new file mode 100644
index 0000000..49a0445
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_ApolloClient.d
@@ -0,0 +1 @@
+src/@apollo/client/core/ApolloClient__Core_ApolloClient.cmj : src/@apollo/client/cache/core/ApolloClient__Cache_Core_Cache.cmj src/@apollo/client/cache/core/ApolloClient__Cache_Core_Cache.cmi src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types.cmj src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types.cmi src/@apollo/client/core/ApolloClient__Core_LocalState.cmj src/@apollo/client/core/ApolloClient__Core_LocalState.cmi src/@apollo/client/core/ApolloClient__Core_ObservableQuery.cmj src/@apollo/client/core/ApolloClient__Core_ObservableQuery.cmi src/@apollo/client/core/ApolloClient__Core_Types.cmj src/@apollo/client/core/ApolloClient__Core_Types.cmi src/@apollo/client/core/ApolloClient__Core_WatchQueryOptions.cmj src/@apollo/client/core/ApolloClient__Core_WatchQueryOptions.cmi src/@apollo/client/errors/ApolloClient__Errors_ApolloError.cmj src/@apollo/client/errors/ApolloClient__Errors_ApolloError.cmi src/graphql/ApolloClient__Graphql.cmj src/graphql/ApolloClient__Graphql.cmi src/@apollo/client/link/core/ApolloClient__Link_Core_ApolloLink.cmj src/@apollo/client/link/core/ApolloClient__Link_Core_ApolloLink.cmi src/@apollo/client/link/core/ApolloClient__Link_Core_Types.cmj src/@apollo/client/link/core/ApolloClient__Link_Core_Types.cmi src/@apollo/client/link/http/ApolloClient__Link_Http_SelectHttpOptionsAndBody.cmj src/@apollo/client/link/http/ApolloClient__Link_Http_SelectHttpOptionsAndBody.cmi src/ApolloClient__Types.cmj src/ApolloClient__Types.cmi src/ApolloClient__Utils.cmj src/ApolloClient__Utils.cmi src/zen-observable/ApolloClient__ZenObservable.cmj src/zen-observable/ApolloClient__ZenObservable.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_LocalState.ast b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_LocalState.ast
new file mode 100644
index 0000000..5a9a2c5
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_LocalState.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_LocalState.cmi b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_LocalState.cmi
new file mode 100644
index 0000000..e4e3846
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_LocalState.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_LocalState.cmj b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_LocalState.cmj
new file mode 100644
index 0000000..8d22dca
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_LocalState.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_LocalState.cmt b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_LocalState.cmt
new file mode 100644
index 0000000..34f9d94
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_LocalState.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_LocalState.d b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_LocalState.d
new file mode 100644
index 0000000..23fae7d
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_LocalState.d
@@ -0,0 +1 @@
+src/@apollo/client/core/ApolloClient__Core_LocalState.cmj : src/@apollo/client/cache/core/ApolloClient__Cache_Core_Cache.cmj src/@apollo/client/cache/core/ApolloClient__Cache_Core_Cache.cmi src/graphql/ApolloClient__Graphql.cmj src/graphql/ApolloClient__Graphql.cmi src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_Fragments.cmj src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_Fragments.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_NetworkStatus.ast b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_NetworkStatus.ast
new file mode 100644
index 0000000..d40504a
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_NetworkStatus.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_NetworkStatus.cmi b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_NetworkStatus.cmi
new file mode 100644
index 0000000..969173e
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_NetworkStatus.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_NetworkStatus.cmj b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_NetworkStatus.cmj
new file mode 100644
index 0000000..6245393
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_NetworkStatus.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_NetworkStatus.cmt b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_NetworkStatus.cmt
new file mode 100644
index 0000000..3724ab6
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_NetworkStatus.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_NetworkStatus.d b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_NetworkStatus.d
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_ObservableQuery.ast b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_ObservableQuery.ast
new file mode 100644
index 0000000..7d859ae
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_ObservableQuery.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_ObservableQuery.cmi b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_ObservableQuery.cmi
new file mode 100644
index 0000000..4cf6a97
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_ObservableQuery.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_ObservableQuery.cmj b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_ObservableQuery.cmj
new file mode 100644
index 0000000..4afd1f9
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_ObservableQuery.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_ObservableQuery.cmt b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_ObservableQuery.cmt
new file mode 100644
index 0000000..15fa4e7
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_ObservableQuery.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_ObservableQuery.d b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_ObservableQuery.d
new file mode 100644
index 0000000..d858dbc
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_ObservableQuery.d
@@ -0,0 +1 @@
+src/@apollo/client/core/ApolloClient__Core_ObservableQuery.cmj : src/@apollo/client/core/ApolloClient__Core_Types.cmj src/@apollo/client/core/ApolloClient__Core_Types.cmi src/ApolloClient__Types.cmj src/ApolloClient__Types.cmi src/zen-observable/ApolloClient__ZenObservable.cmj src/zen-observable/ApolloClient__ZenObservable.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_Types.ast b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_Types.ast
new file mode 100644
index 0000000..75bf8c0
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_Types.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_Types.cmi b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_Types.cmi
new file mode 100644
index 0000000..85d047a
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_Types.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_Types.cmj b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_Types.cmj
new file mode 100644
index 0000000..3a30486
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_Types.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_Types.cmt b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_Types.cmt
new file mode 100644
index 0000000..90d6664
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_Types.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_Types.d b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_Types.d
new file mode 100644
index 0000000..e514285
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_Types.d
@@ -0,0 +1 @@
+src/@apollo/client/core/ApolloClient__Core_Types.cmj : src/@apollo/client/core/ApolloClient__Core_LocalState.cmj src/@apollo/client/core/ApolloClient__Core_LocalState.cmi src/@apollo/client/core/ApolloClient__Core_NetworkStatus.cmj src/@apollo/client/core/ApolloClient__Core_NetworkStatus.cmi src/@apollo/client/errors/ApolloClient__Errors_ApolloError.cmj src/@apollo/client/errors/ApolloClient__Errors_ApolloError.cmi src/graphql/ApolloClient__Graphql.cmj src/graphql/ApolloClient__Graphql.cmi src/@apollo/client/link/core/ApolloClient__Link_Core_Types.cmj src/@apollo/client/link/core/ApolloClient__Link_Core_Types.cmi src/ApolloClient__Types.cmj src/ApolloClient__Types.cmi src/ApolloClient__Utils.cmj src/ApolloClient__Utils.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_WatchQueryOptions.ast b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_WatchQueryOptions.ast
new file mode 100644
index 0000000..5922f64
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_WatchQueryOptions.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_WatchQueryOptions.cmi b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_WatchQueryOptions.cmi
new file mode 100644
index 0000000..aa64196
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_WatchQueryOptions.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_WatchQueryOptions.cmj b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_WatchQueryOptions.cmj
new file mode 100644
index 0000000..7803158
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_WatchQueryOptions.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_WatchQueryOptions.cmt b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_WatchQueryOptions.cmt
new file mode 100644
index 0000000..4fad925
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_WatchQueryOptions.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_WatchQueryOptions.d b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_WatchQueryOptions.d
new file mode 100644
index 0000000..05ceca0
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/core/ApolloClient__Core_WatchQueryOptions.d
@@ -0,0 +1 @@
+src/@apollo/client/core/ApolloClient__Core_WatchQueryOptions.cmj : src/@apollo/client/cache/core/ApolloClient__Cache_Core_Cache.cmj src/@apollo/client/cache/core/ApolloClient__Cache_Core_Cache.cmi src/@apollo/client/core/ApolloClient__Core_Types.cmj src/@apollo/client/core/ApolloClient__Core_Types.cmi src/graphql/ApolloClient__Graphql.cmj src/graphql/ApolloClient__Graphql.cmi src/@apollo/client/link/core/ApolloClient__Link_Core_Types.cmj src/@apollo/client/link/core/ApolloClient__Link_Core_Types.cmi src/ApolloClient__Types.cmj src/ApolloClient__Types.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/errors/ApolloClient__Errors.ast b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/errors/ApolloClient__Errors.ast
new file mode 100644
index 0000000..a7a2efe
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/errors/ApolloClient__Errors.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/errors/ApolloClient__Errors.cmi b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/errors/ApolloClient__Errors.cmi
new file mode 100644
index 0000000..e8e145d
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/errors/ApolloClient__Errors.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/errors/ApolloClient__Errors.cmj b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/errors/ApolloClient__Errors.cmj
new file mode 100644
index 0000000..bb59caf
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/errors/ApolloClient__Errors.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/errors/ApolloClient__Errors.cmt b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/errors/ApolloClient__Errors.cmt
new file mode 100644
index 0000000..d38411a
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/errors/ApolloClient__Errors.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/errors/ApolloClient__Errors.d b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/errors/ApolloClient__Errors.d
new file mode 100644
index 0000000..1727abd
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/errors/ApolloClient__Errors.d
@@ -0,0 +1 @@
+src/@apollo/client/errors/ApolloClient__Errors.cmj : src/@apollo/client/errors/ApolloClient__Errors_ApolloError.cmj src/@apollo/client/errors/ApolloClient__Errors_ApolloError.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/errors/ApolloClient__Errors_ApolloError.ast b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/errors/ApolloClient__Errors_ApolloError.ast
new file mode 100644
index 0000000..4f0d7a4
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/errors/ApolloClient__Errors_ApolloError.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/errors/ApolloClient__Errors_ApolloError.cmi b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/errors/ApolloClient__Errors_ApolloError.cmi
new file mode 100644
index 0000000..27fec92
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/errors/ApolloClient__Errors_ApolloError.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/errors/ApolloClient__Errors_ApolloError.cmj b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/errors/ApolloClient__Errors_ApolloError.cmj
new file mode 100644
index 0000000..0be1423
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/errors/ApolloClient__Errors_ApolloError.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/errors/ApolloClient__Errors_ApolloError.cmt b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/errors/ApolloClient__Errors_ApolloError.cmt
new file mode 100644
index 0000000..fd699af
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/errors/ApolloClient__Errors_ApolloError.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/errors/ApolloClient__Errors_ApolloError.d b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/errors/ApolloClient__Errors_ApolloError.d
new file mode 100644
index 0000000..b34ce42
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/errors/ApolloClient__Errors_ApolloError.d
@@ -0,0 +1 @@
+src/@apollo/client/errors/ApolloClient__Errors_ApolloError.cmj : src/graphql/ApolloClient__Graphql.cmj src/graphql/ApolloClient__Graphql.cmi src/@apollo/client/link/http/ApolloClient__Link_Http_ParseAndCheckHttpResponse.cmj src/@apollo/client/link/http/ApolloClient__Link_Http_ParseAndCheckHttpResponse.cmi src/@apollo/client/link/utils/ApolloClient__Link_Utils_ThrowServerError.cmj src/@apollo/client/link/utils/ApolloClient__Link_Utils_ThrowServerError.cmi src/ApolloClient__Types.cmj src/ApolloClient__Types.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/ApolloClient__Link.ast b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/ApolloClient__Link.ast
new file mode 100644
index 0000000..2aea599
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/ApolloClient__Link.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/ApolloClient__Link.cmi b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/ApolloClient__Link.cmi
new file mode 100644
index 0000000..4164bc2
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/ApolloClient__Link.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/ApolloClient__Link.cmj b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/ApolloClient__Link.cmj
new file mode 100644
index 0000000..2f08f1e
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/ApolloClient__Link.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/ApolloClient__Link.cmt b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/ApolloClient__Link.cmt
new file mode 100644
index 0000000..f8f99d5
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/ApolloClient__Link.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/ApolloClient__Link.d b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/ApolloClient__Link.d
new file mode 100644
index 0000000..0728aa1
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/ApolloClient__Link.d
@@ -0,0 +1 @@
+src/@apollo/client/link/ApolloClient__Link.cmj : src/@apollo/client/link/context/ApolloClient__Link_Context.cmj src/@apollo/client/link/context/ApolloClient__Link_Context.cmi src/@apollo/client/link/core/ApolloClient__Link_Core.cmj src/@apollo/client/link/core/ApolloClient__Link_Core.cmi src/@apollo/client/link/error/ApolloClient__Link_Error.cmj src/@apollo/client/link/error/ApolloClient__Link_Error.cmi src/@apollo/client/link/http/ApolloClient__Link_Http.cmj src/@apollo/client/link/http/ApolloClient__Link_Http.cmi src/@apollo/client/link/utils/ApolloClient__Link_Utils.cmj src/@apollo/client/link/utils/ApolloClient__Link_Utils.cmi src/@apollo/client/link/ws/ApolloClient__Link_Ws.cmj src/@apollo/client/link/ws/ApolloClient__Link_Ws.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/context/ApolloClient__Link_Context.ast b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/context/ApolloClient__Link_Context.ast
new file mode 100644
index 0000000..84c9b28
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/context/ApolloClient__Link_Context.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/context/ApolloClient__Link_Context.cmi b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/context/ApolloClient__Link_Context.cmi
new file mode 100644
index 0000000..0dd6ba7
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/context/ApolloClient__Link_Context.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/context/ApolloClient__Link_Context.cmj b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/context/ApolloClient__Link_Context.cmj
new file mode 100644
index 0000000..80d1dae
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/context/ApolloClient__Link_Context.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/context/ApolloClient__Link_Context.cmt b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/context/ApolloClient__Link_Context.cmt
new file mode 100644
index 0000000..7859de2
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/context/ApolloClient__Link_Context.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/context/ApolloClient__Link_Context.d b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/context/ApolloClient__Link_Context.d
new file mode 100644
index 0000000..317c8c4
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/context/ApolloClient__Link_Context.d
@@ -0,0 +1 @@
+src/@apollo/client/link/context/ApolloClient__Link_Context.cmj : src/@apollo/client/link/core/ApolloClient__Link_Core_ApolloLink.cmj src/@apollo/client/link/core/ApolloClient__Link_Core_ApolloLink.cmi src/@apollo/client/link/core/ApolloClient__Link_Core_Types.cmj src/@apollo/client/link/core/ApolloClient__Link_Core_Types.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/core/ApolloClient__Link_Core.ast b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/core/ApolloClient__Link_Core.ast
new file mode 100644
index 0000000..c586692
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/core/ApolloClient__Link_Core.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/core/ApolloClient__Link_Core.cmi b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/core/ApolloClient__Link_Core.cmi
new file mode 100644
index 0000000..adb7e9f
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/core/ApolloClient__Link_Core.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/core/ApolloClient__Link_Core.cmj b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/core/ApolloClient__Link_Core.cmj
new file mode 100644
index 0000000..9f8ca56
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/core/ApolloClient__Link_Core.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/core/ApolloClient__Link_Core.cmt b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/core/ApolloClient__Link_Core.cmt
new file mode 100644
index 0000000..bfc33c8
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/core/ApolloClient__Link_Core.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/core/ApolloClient__Link_Core.d b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/core/ApolloClient__Link_Core.d
new file mode 100644
index 0000000..09fc927
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/core/ApolloClient__Link_Core.d
@@ -0,0 +1 @@
+src/@apollo/client/link/core/ApolloClient__Link_Core.cmj : src/@apollo/client/link/core/ApolloClient__Link_Core_ApolloLink.cmj src/@apollo/client/link/core/ApolloClient__Link_Core_ApolloLink.cmi src/@apollo/client/link/core/ApolloClient__Link_Core_Types.cmj src/@apollo/client/link/core/ApolloClient__Link_Core_Types.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/core/ApolloClient__Link_Core_ApolloLink.ast b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/core/ApolloClient__Link_Core_ApolloLink.ast
new file mode 100644
index 0000000..5084626
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/core/ApolloClient__Link_Core_ApolloLink.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/core/ApolloClient__Link_Core_ApolloLink.cmi b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/core/ApolloClient__Link_Core_ApolloLink.cmi
new file mode 100644
index 0000000..a118a28
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/core/ApolloClient__Link_Core_ApolloLink.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/core/ApolloClient__Link_Core_ApolloLink.cmj b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/core/ApolloClient__Link_Core_ApolloLink.cmj
new file mode 100644
index 0000000..0c37b60
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/core/ApolloClient__Link_Core_ApolloLink.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/core/ApolloClient__Link_Core_ApolloLink.cmt b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/core/ApolloClient__Link_Core_ApolloLink.cmt
new file mode 100644
index 0000000..1cdc3e6
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/core/ApolloClient__Link_Core_ApolloLink.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/core/ApolloClient__Link_Core_ApolloLink.d b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/core/ApolloClient__Link_Core_ApolloLink.d
new file mode 100644
index 0000000..19f5b40
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/core/ApolloClient__Link_Core_ApolloLink.d
@@ -0,0 +1 @@
+src/@apollo/client/link/core/ApolloClient__Link_Core_ApolloLink.cmj : src/@apollo/client/link/core/ApolloClient__Link_Core_Types.cmj src/@apollo/client/link/core/ApolloClient__Link_Core_Types.cmi src/zen-observable/ApolloClient__ZenObservable.cmj src/zen-observable/ApolloClient__ZenObservable.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/core/ApolloClient__Link_Core_Types.ast b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/core/ApolloClient__Link_Core_Types.ast
new file mode 100644
index 0000000..f5a3252
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/core/ApolloClient__Link_Core_Types.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/core/ApolloClient__Link_Core_Types.cmi b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/core/ApolloClient__Link_Core_Types.cmi
new file mode 100644
index 0000000..d6297b3
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/core/ApolloClient__Link_Core_Types.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/core/ApolloClient__Link_Core_Types.cmj b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/core/ApolloClient__Link_Core_Types.cmj
new file mode 100644
index 0000000..7c05b72
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/core/ApolloClient__Link_Core_Types.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/core/ApolloClient__Link_Core_Types.cmt b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/core/ApolloClient__Link_Core_Types.cmt
new file mode 100644
index 0000000..6eff12e
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/core/ApolloClient__Link_Core_Types.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/core/ApolloClient__Link_Core_Types.d b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/core/ApolloClient__Link_Core_Types.d
new file mode 100644
index 0000000..6add00d
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/core/ApolloClient__Link_Core_Types.d
@@ -0,0 +1 @@
+src/@apollo/client/link/core/ApolloClient__Link_Core_Types.cmj : src/@apollo/client/errors/ApolloClient__Errors_ApolloError.cmj src/@apollo/client/errors/ApolloClient__Errors_ApolloError.cmi src/graphql/ApolloClient__Graphql.cmj src/graphql/ApolloClient__Graphql.cmi src/ApolloClient__Types.cmj src/ApolloClient__Types.cmi src/ApolloClient__Utils.cmj src/ApolloClient__Utils.cmi src/zen-observable/ApolloClient__ZenObservable.cmj src/zen-observable/ApolloClient__ZenObservable.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/error/ApolloClient__Link_Error.ast b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/error/ApolloClient__Link_Error.ast
new file mode 100644
index 0000000..f431dae
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/error/ApolloClient__Link_Error.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/error/ApolloClient__Link_Error.cmi b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/error/ApolloClient__Link_Error.cmi
new file mode 100644
index 0000000..a5c8963
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/error/ApolloClient__Link_Error.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/error/ApolloClient__Link_Error.cmj b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/error/ApolloClient__Link_Error.cmj
new file mode 100644
index 0000000..a2a1e0c
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/error/ApolloClient__Link_Error.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/error/ApolloClient__Link_Error.cmt b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/error/ApolloClient__Link_Error.cmt
new file mode 100644
index 0000000..ee4488e
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/error/ApolloClient__Link_Error.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/error/ApolloClient__Link_Error.d b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/error/ApolloClient__Link_Error.d
new file mode 100644
index 0000000..2e4038c
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/error/ApolloClient__Link_Error.d
@@ -0,0 +1 @@
+src/@apollo/client/link/error/ApolloClient__Link_Error.cmj : src/@apollo/client/errors/ApolloClient__Errors_ApolloError.cmj src/@apollo/client/errors/ApolloClient__Errors_ApolloError.cmi src/graphql/ApolloClient__Graphql.cmj src/graphql/ApolloClient__Graphql.cmi src/graphql/execution/ApolloClient__Graphql_Execution_Execute.cmj src/graphql/execution/ApolloClient__Graphql_Execution_Execute.cmi src/@apollo/client/link/core/ApolloClient__Link_Core_ApolloLink.cmj src/@apollo/client/link/core/ApolloClient__Link_Core_ApolloLink.cmi src/@apollo/client/link/core/ApolloClient__Link_Core_Types.cmj src/@apollo/client/link/core/ApolloClient__Link_Core_Types.cmi src/@apollo/client/link/http/ApolloClient__Link_Http_ParseAndCheckHttpResponse.cmj src/@apollo/client/link/http/ApolloClient__Link_Http_ParseAndCheckHttpResponse.cmi src/@apollo/client/link/utils/ApolloClient__Link_Utils_ThrowServerError.cmj src/@apollo/client/link/utils/ApolloClient__Link_Utils_ThrowServerError.cmi src/zen-observable/ApolloClient__ZenObservable.cmj src/zen-observable/ApolloClient__ZenObservable.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http.ast b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http.ast
new file mode 100644
index 0000000..14991ae
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http.cmi b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http.cmi
new file mode 100644
index 0000000..eac1bc6
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http.cmj b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http.cmj
new file mode 100644
index 0000000..0e5c80e
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http.cmt b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http.cmt
new file mode 100644
index 0000000..56ee540
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http.d b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http.d
new file mode 100644
index 0000000..7825896
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http.d
@@ -0,0 +1 @@
+src/@apollo/client/link/http/ApolloClient__Link_Http.cmj : src/@apollo/client/link/http/ApolloClient__Link_Http_CreateHttpLink.cmj src/@apollo/client/link/http/ApolloClient__Link_Http_CreateHttpLink.cmi src/@apollo/client/link/http/ApolloClient__Link_Http_HttpLink.cmj src/@apollo/client/link/http/ApolloClient__Link_Http_HttpLink.cmi src/@apollo/client/link/http/ApolloClient__Link_Http_ParseAndCheckHttpResponse.cmj src/@apollo/client/link/http/ApolloClient__Link_Http_ParseAndCheckHttpResponse.cmi src/@apollo/client/link/http/ApolloClient__Link_Http_SelectHttpOptionsAndBody.cmj src/@apollo/client/link/http/ApolloClient__Link_Http_SelectHttpOptionsAndBody.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_CreateHttpLink.ast b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_CreateHttpLink.ast
new file mode 100644
index 0000000..c5760a7
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_CreateHttpLink.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_CreateHttpLink.cmi b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_CreateHttpLink.cmi
new file mode 100644
index 0000000..28a62e6
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_CreateHttpLink.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_CreateHttpLink.cmj b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_CreateHttpLink.cmj
new file mode 100644
index 0000000..52ec13b
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_CreateHttpLink.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_CreateHttpLink.cmt b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_CreateHttpLink.cmt
new file mode 100644
index 0000000..881cd14
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_CreateHttpLink.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_CreateHttpLink.d b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_CreateHttpLink.d
new file mode 100644
index 0000000..e660d48
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_CreateHttpLink.d
@@ -0,0 +1 @@
+src/@apollo/client/link/http/ApolloClient__Link_Http_CreateHttpLink.cmj : src/@apollo/client/link/core/ApolloClient__Link_Core_ApolloLink.cmj src/@apollo/client/link/core/ApolloClient__Link_Core_ApolloLink.cmi src/@apollo/client/link/http/ApolloClient__Link_Http_SelectHttpOptionsAndBody.cmj src/@apollo/client/link/http/ApolloClient__Link_Http_SelectHttpOptionsAndBody.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_HttpLink.ast b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_HttpLink.ast
new file mode 100644
index 0000000..dc6c332
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_HttpLink.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_HttpLink.cmi b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_HttpLink.cmi
new file mode 100644
index 0000000..1e49631
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_HttpLink.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_HttpLink.cmj b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_HttpLink.cmj
new file mode 100644
index 0000000..ddffbf4
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_HttpLink.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_HttpLink.cmt b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_HttpLink.cmt
new file mode 100644
index 0000000..e3cc3f3
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_HttpLink.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_HttpLink.d b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_HttpLink.d
new file mode 100644
index 0000000..70200b2
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_HttpLink.d
@@ -0,0 +1 @@
+src/@apollo/client/link/http/ApolloClient__Link_Http_HttpLink.cmj : src/@apollo/client/link/core/ApolloClient__Link_Core_ApolloLink.cmj src/@apollo/client/link/core/ApolloClient__Link_Core_ApolloLink.cmi src/@apollo/client/link/http/ApolloClient__Link_Http_SelectHttpOptionsAndBody.cmj src/@apollo/client/link/http/ApolloClient__Link_Http_SelectHttpOptionsAndBody.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_ParseAndCheckHttpResponse.ast b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_ParseAndCheckHttpResponse.ast
new file mode 100644
index 0000000..64324cf
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_ParseAndCheckHttpResponse.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_ParseAndCheckHttpResponse.cmi b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_ParseAndCheckHttpResponse.cmi
new file mode 100644
index 0000000..1c872da
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_ParseAndCheckHttpResponse.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_ParseAndCheckHttpResponse.cmj b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_ParseAndCheckHttpResponse.cmj
new file mode 100644
index 0000000..401c4b8
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_ParseAndCheckHttpResponse.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_ParseAndCheckHttpResponse.cmt b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_ParseAndCheckHttpResponse.cmt
new file mode 100644
index 0000000..a541f6e
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_ParseAndCheckHttpResponse.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_ParseAndCheckHttpResponse.d b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_ParseAndCheckHttpResponse.d
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_SelectHttpOptionsAndBody.ast b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_SelectHttpOptionsAndBody.ast
new file mode 100644
index 0000000..b8adcaa
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_SelectHttpOptionsAndBody.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_SelectHttpOptionsAndBody.cmi b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_SelectHttpOptionsAndBody.cmi
new file mode 100644
index 0000000..321d30b
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_SelectHttpOptionsAndBody.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_SelectHttpOptionsAndBody.cmj b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_SelectHttpOptionsAndBody.cmj
new file mode 100644
index 0000000..16ab879
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_SelectHttpOptionsAndBody.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_SelectHttpOptionsAndBody.cmt b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_SelectHttpOptionsAndBody.cmt
new file mode 100644
index 0000000..5441cc0
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_SelectHttpOptionsAndBody.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_SelectHttpOptionsAndBody.d b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_SelectHttpOptionsAndBody.d
new file mode 100644
index 0000000..8b1882f
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/http/ApolloClient__Link_Http_SelectHttpOptionsAndBody.d
@@ -0,0 +1 @@
+src/@apollo/client/link/http/ApolloClient__Link_Http_SelectHttpOptionsAndBody.cmj : src/@apollo/client/link/core/ApolloClient__Link_Core_Types.cmj src/@apollo/client/link/core/ApolloClient__Link_Core_Types.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/utils/ApolloClient__Link_Utils.ast b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/utils/ApolloClient__Link_Utils.ast
new file mode 100644
index 0000000..04bcfc4
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/utils/ApolloClient__Link_Utils.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/utils/ApolloClient__Link_Utils.cmi b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/utils/ApolloClient__Link_Utils.cmi
new file mode 100644
index 0000000..1f4ea2d
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/utils/ApolloClient__Link_Utils.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/utils/ApolloClient__Link_Utils.cmj b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/utils/ApolloClient__Link_Utils.cmj
new file mode 100644
index 0000000..4541129
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/utils/ApolloClient__Link_Utils.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/utils/ApolloClient__Link_Utils.cmt b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/utils/ApolloClient__Link_Utils.cmt
new file mode 100644
index 0000000..3c8bf98
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/utils/ApolloClient__Link_Utils.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/utils/ApolloClient__Link_Utils.d b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/utils/ApolloClient__Link_Utils.d
new file mode 100644
index 0000000..91aa201
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/utils/ApolloClient__Link_Utils.d
@@ -0,0 +1 @@
+src/@apollo/client/link/utils/ApolloClient__Link_Utils.cmj : src/@apollo/client/link/utils/ApolloClient__Link_Utils_ThrowServerError.cmj src/@apollo/client/link/utils/ApolloClient__Link_Utils_ThrowServerError.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/utils/ApolloClient__Link_Utils_ThrowServerError.ast b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/utils/ApolloClient__Link_Utils_ThrowServerError.ast
new file mode 100644
index 0000000..2c38b9f
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/utils/ApolloClient__Link_Utils_ThrowServerError.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/utils/ApolloClient__Link_Utils_ThrowServerError.cmi b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/utils/ApolloClient__Link_Utils_ThrowServerError.cmi
new file mode 100644
index 0000000..4f73291
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/utils/ApolloClient__Link_Utils_ThrowServerError.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/utils/ApolloClient__Link_Utils_ThrowServerError.cmj b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/utils/ApolloClient__Link_Utils_ThrowServerError.cmj
new file mode 100644
index 0000000..4c7e4bc
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/utils/ApolloClient__Link_Utils_ThrowServerError.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/utils/ApolloClient__Link_Utils_ThrowServerError.cmt b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/utils/ApolloClient__Link_Utils_ThrowServerError.cmt
new file mode 100644
index 0000000..1216245
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/utils/ApolloClient__Link_Utils_ThrowServerError.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/utils/ApolloClient__Link_Utils_ThrowServerError.d b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/utils/ApolloClient__Link_Utils_ThrowServerError.d
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/ws/ApolloClient__Link_Ws.ast b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/ws/ApolloClient__Link_Ws.ast
new file mode 100644
index 0000000..d9ef08d
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/ws/ApolloClient__Link_Ws.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/ws/ApolloClient__Link_Ws.cmi b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/ws/ApolloClient__Link_Ws.cmi
new file mode 100644
index 0000000..2d5083b
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/ws/ApolloClient__Link_Ws.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/ws/ApolloClient__Link_Ws.cmj b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/ws/ApolloClient__Link_Ws.cmj
new file mode 100644
index 0000000..b90b847
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/ws/ApolloClient__Link_Ws.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/ws/ApolloClient__Link_Ws.cmt b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/ws/ApolloClient__Link_Ws.cmt
new file mode 100644
index 0000000..205ab72
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/ws/ApolloClient__Link_Ws.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/ws/ApolloClient__Link_Ws.d b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/ws/ApolloClient__Link_Ws.d
new file mode 100644
index 0000000..fce4453
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/link/ws/ApolloClient__Link_Ws.d
@@ -0,0 +1 @@
+src/@apollo/client/link/ws/ApolloClient__Link_Ws.cmj : src/graphql/ApolloClient__Graphql.cmj src/graphql/ApolloClient__Graphql.cmi src/@apollo/client/link/core/ApolloClient__Link_Core_ApolloLink.cmj src/@apollo/client/link/core/ApolloClient__Link_Core_ApolloLink.cmi src/subscriptions-transport-ws/ApolloClient__SubscriptionsTransportWs.cmj src/subscriptions-transport-ws/ApolloClient__SubscriptionsTransportWs.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/ApolloClient__React.ast b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/ApolloClient__React.ast
new file mode 100644
index 0000000..9c7dce7
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/ApolloClient__React.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/ApolloClient__React.cmi b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/ApolloClient__React.cmi
new file mode 100644
index 0000000..afe3df5
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/ApolloClient__React.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/ApolloClient__React.cmj b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/ApolloClient__React.cmj
new file mode 100644
index 0000000..7bb11cd
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/ApolloClient__React.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/ApolloClient__React.cmt b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/ApolloClient__React.cmt
new file mode 100644
index 0000000..d5fdfc5
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/ApolloClient__React.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/ApolloClient__React.d b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/ApolloClient__React.d
new file mode 100644
index 0000000..9a53821
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/ApolloClient__React.d
@@ -0,0 +1 @@
+src/@apollo/client/react/ApolloClient__React.cmj : src/@apollo/client/react/context/ApolloClient__React_Context.cmj src/@apollo/client/react/context/ApolloClient__React_Context.cmi src/@apollo/client/react/hooks/ApolloClient__React_Hooks.cmj src/@apollo/client/react/hooks/ApolloClient__React_Hooks.cmi src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseLazyQuery.cmj src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseLazyQuery.cmi src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseMutation.cmj src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseMutation.cmi src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.cmj src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.cmi src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseSubscription.cmj src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseSubscription.cmi src/@apollo/client/react/types/ApolloClient__React_Types.cmj src/@apollo/client/react/types/ApolloClient__React_Types.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/context/ApolloClient__React_Context.ast b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/context/ApolloClient__React_Context.ast
new file mode 100644
index 0000000..5f618a8
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/context/ApolloClient__React_Context.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/context/ApolloClient__React_Context.cmi b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/context/ApolloClient__React_Context.cmi
new file mode 100644
index 0000000..aef3165
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/context/ApolloClient__React_Context.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/context/ApolloClient__React_Context.cmj b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/context/ApolloClient__React_Context.cmj
new file mode 100644
index 0000000..0a94a46
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/context/ApolloClient__React_Context.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/context/ApolloClient__React_Context.cmt b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/context/ApolloClient__React_Context.cmt
new file mode 100644
index 0000000..eb71e85
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/context/ApolloClient__React_Context.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/context/ApolloClient__React_Context.d b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/context/ApolloClient__React_Context.d
new file mode 100644
index 0000000..f89df3d
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/context/ApolloClient__React_Context.d
@@ -0,0 +1 @@
+src/@apollo/client/react/context/ApolloClient__React_Context.cmj : src/@apollo/client/react/context/ApolloClient__React_Context_ApolloProvider.cmj src/@apollo/client/react/context/ApolloClient__React_Context_ApolloProvider.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/context/ApolloClient__React_Context_ApolloProvider.ast b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/context/ApolloClient__React_Context_ApolloProvider.ast
new file mode 100644
index 0000000..4c5c9bb
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/context/ApolloClient__React_Context_ApolloProvider.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/context/ApolloClient__React_Context_ApolloProvider.cmi b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/context/ApolloClient__React_Context_ApolloProvider.cmi
new file mode 100644
index 0000000..11244a7
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/context/ApolloClient__React_Context_ApolloProvider.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/context/ApolloClient__React_Context_ApolloProvider.cmj b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/context/ApolloClient__React_Context_ApolloProvider.cmj
new file mode 100644
index 0000000..0a94a46
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/context/ApolloClient__React_Context_ApolloProvider.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/context/ApolloClient__React_Context_ApolloProvider.cmt b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/context/ApolloClient__React_Context_ApolloProvider.cmt
new file mode 100644
index 0000000..3519828
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/context/ApolloClient__React_Context_ApolloProvider.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/context/ApolloClient__React_Context_ApolloProvider.d b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/context/ApolloClient__React_Context_ApolloProvider.d
new file mode 100644
index 0000000..2b85aa2
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/context/ApolloClient__React_Context_ApolloProvider.d
@@ -0,0 +1 @@
+src/@apollo/client/react/context/ApolloClient__React_Context_ApolloProvider.cmj : src/@apollo/client/core/ApolloClient__Core_ApolloClient.cmj src/@apollo/client/core/ApolloClient__Core_ApolloClient.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks.ast b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks.ast
new file mode 100644
index 0000000..0e4d823
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks.cmi b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks.cmi
new file mode 100644
index 0000000..462044a
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks.cmj b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks.cmj
new file mode 100644
index 0000000..c02f1e5
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks.cmt b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks.cmt
new file mode 100644
index 0000000..84f1ce7
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks.d b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks.d
new file mode 100644
index 0000000..f766fd8
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks.d
@@ -0,0 +1 @@
+src/@apollo/client/react/hooks/ApolloClient__React_Hooks.cmj : src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseApolloClient.cmj src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseApolloClient.cmi src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseMutation.cmj src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseMutation.cmi src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.cmj src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.cmi src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseSubscription.cmj src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseSubscription.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseApolloClient.ast b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseApolloClient.ast
new file mode 100644
index 0000000..8a847e5
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseApolloClient.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseApolloClient.cmi b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseApolloClient.cmi
new file mode 100644
index 0000000..4520f95
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseApolloClient.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseApolloClient.cmj b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseApolloClient.cmj
new file mode 100644
index 0000000..c02f1e5
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseApolloClient.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseApolloClient.cmt b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseApolloClient.cmt
new file mode 100644
index 0000000..c713be2
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseApolloClient.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseApolloClient.d b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseApolloClient.d
new file mode 100644
index 0000000..33c242b
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseApolloClient.d
@@ -0,0 +1 @@
+src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseApolloClient.cmj : src/@apollo/client/core/ApolloClient__Core_ApolloClient.cmj src/@apollo/client/core/ApolloClient__Core_ApolloClient.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseLazyQuery.ast b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseLazyQuery.ast
new file mode 100644
index 0000000..6905b4a
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseLazyQuery.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseLazyQuery.cmi b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseLazyQuery.cmi
new file mode 100644
index 0000000..8f873d1
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseLazyQuery.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseLazyQuery.cmj b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseLazyQuery.cmj
new file mode 100644
index 0000000..9d8746a
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseLazyQuery.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseLazyQuery.cmt b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseLazyQuery.cmt
new file mode 100644
index 0000000..d28fc0c
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseLazyQuery.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseLazyQuery.d b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseLazyQuery.d
new file mode 100644
index 0000000..b5129b8
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseLazyQuery.d
@@ -0,0 +1 @@
+src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseLazyQuery.cmj : src/@apollo/client/core/ApolloClient__Core_ApolloClient.cmj src/@apollo/client/core/ApolloClient__Core_ApolloClient.cmi src/@apollo/client/core/ApolloClient__Core_WatchQueryOptions.cmj src/@apollo/client/core/ApolloClient__Core_WatchQueryOptions.cmi src/@apollo/client/errors/ApolloClient__Errors_ApolloError.cmj src/@apollo/client/errors/ApolloClient__Errors_ApolloError.cmi src/graphql/ApolloClient__Graphql.cmj src/graphql/ApolloClient__Graphql.cmi src/@apollo/client/react/types/ApolloClient__React_Types.cmj src/@apollo/client/react/types/ApolloClient__React_Types.cmi src/ApolloClient__Types.cmj src/ApolloClient__Types.cmi src/ApolloClient__Utils.cmj src/ApolloClient__Utils.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseMutation.ast b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseMutation.ast
new file mode 100644
index 0000000..f63bb18
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseMutation.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseMutation.cmi b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseMutation.cmi
new file mode 100644
index 0000000..4501656
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseMutation.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseMutation.cmj b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseMutation.cmj
new file mode 100644
index 0000000..4ab8cb0
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseMutation.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseMutation.cmt b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseMutation.cmt
new file mode 100644
index 0000000..c587007
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseMutation.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseMutation.d b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseMutation.d
new file mode 100644
index 0000000..bfa4f8d
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseMutation.d
@@ -0,0 +1 @@
+src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseMutation.cmj : src/@apollo/client/core/ApolloClient__Core_ApolloClient.cmj src/@apollo/client/core/ApolloClient__Core_ApolloClient.cmi src/@apollo/client/core/ApolloClient__Core_Types.cmj src/@apollo/client/core/ApolloClient__Core_Types.cmi src/@apollo/client/core/ApolloClient__Core_WatchQueryOptions.cmj src/@apollo/client/core/ApolloClient__Core_WatchQueryOptions.cmi src/@apollo/client/errors/ApolloClient__Errors_ApolloError.cmj src/@apollo/client/errors/ApolloClient__Errors_ApolloError.cmi src/graphql/ApolloClient__Graphql.cmj src/graphql/ApolloClient__Graphql.cmi src/@apollo/client/react/types/ApolloClient__React_Types.cmj src/@apollo/client/react/types/ApolloClient__React_Types.cmi src/ApolloClient__Types.cmj src/ApolloClient__Types.cmi src/ApolloClient__Utils.cmj src/ApolloClient__Utils.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.ast b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.ast
new file mode 100644
index 0000000..c917d63
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.cmi b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.cmi
new file mode 100644
index 0000000..503db14
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.cmj b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.cmj
new file mode 100644
index 0000000..f41b111
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.cmt b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.cmt
new file mode 100644
index 0000000..b0df144
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.d b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.d
new file mode 100644
index 0000000..1b4a8e6
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.d
@@ -0,0 +1 @@
+src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.cmj : src/@apollo/client/core/ApolloClient__Core_ApolloClient.cmj src/@apollo/client/core/ApolloClient__Core_ApolloClient.cmi src/@apollo/client/core/ApolloClient__Core_WatchQueryOptions.cmj src/@apollo/client/core/ApolloClient__Core_WatchQueryOptions.cmi src/@apollo/client/errors/ApolloClient__Errors_ApolloError.cmj src/@apollo/client/errors/ApolloClient__Errors_ApolloError.cmi src/graphql/ApolloClient__Graphql.cmj src/graphql/ApolloClient__Graphql.cmi src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseLazyQuery.cmj src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseLazyQuery.cmi src/@apollo/client/react/types/ApolloClient__React_Types.cmj src/@apollo/client/react/types/ApolloClient__React_Types.cmi src/ApolloClient__Types.cmj src/ApolloClient__Types.cmi src/ApolloClient__Utils.cmj src/ApolloClient__Utils.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseSubscription.ast b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseSubscription.ast
new file mode 100644
index 0000000..addcd2b
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseSubscription.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseSubscription.cmi b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseSubscription.cmi
new file mode 100644
index 0000000..eee18f9
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseSubscription.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseSubscription.cmj b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseSubscription.cmj
new file mode 100644
index 0000000..8c7a988
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseSubscription.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseSubscription.cmt b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseSubscription.cmt
new file mode 100644
index 0000000..03a9594
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseSubscription.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseSubscription.d b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseSubscription.d
new file mode 100644
index 0000000..d0db3b0
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseSubscription.d
@@ -0,0 +1 @@
+src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseSubscription.cmj : src/@apollo/client/core/ApolloClient__Core_ApolloClient.cmj src/@apollo/client/core/ApolloClient__Core_ApolloClient.cmi src/@apollo/client/core/ApolloClient__Core_WatchQueryOptions.cmj src/@apollo/client/core/ApolloClient__Core_WatchQueryOptions.cmi src/@apollo/client/errors/ApolloClient__Errors_ApolloError.cmj src/@apollo/client/errors/ApolloClient__Errors_ApolloError.cmi src/graphql/ApolloClient__Graphql.cmj src/graphql/ApolloClient__Graphql.cmi src/@apollo/client/react/types/ApolloClient__React_Types.cmj src/@apollo/client/react/types/ApolloClient__React_Types.cmi src/ApolloClient__Types.cmj src/ApolloClient__Types.cmi src/ApolloClient__Utils.cmj src/ApolloClient__Utils.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/types/ApolloClient__React_Types.ast b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/types/ApolloClient__React_Types.ast
new file mode 100644
index 0000000..c8254ba
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/types/ApolloClient__React_Types.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/types/ApolloClient__React_Types.cmi b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/types/ApolloClient__React_Types.cmi
new file mode 100644
index 0000000..2626333
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/types/ApolloClient__React_Types.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/types/ApolloClient__React_Types.cmj b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/types/ApolloClient__React_Types.cmj
new file mode 100644
index 0000000..5258c5b
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/types/ApolloClient__React_Types.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/types/ApolloClient__React_Types.cmt b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/types/ApolloClient__React_Types.cmt
new file mode 100644
index 0000000..78d96cb
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/types/ApolloClient__React_Types.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/types/ApolloClient__React_Types.d b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/types/ApolloClient__React_Types.d
new file mode 100644
index 0000000..db2d6f8
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/react/types/ApolloClient__React_Types.d
@@ -0,0 +1 @@
+src/@apollo/client/react/types/ApolloClient__React_Types.cmj : src/@apollo/client/core/ApolloClient__Core_ApolloClient.cmj src/@apollo/client/core/ApolloClient__Core_ApolloClient.cmi src/@apollo/client/core/ApolloClient__Core_NetworkStatus.cmj src/@apollo/client/core/ApolloClient__Core_NetworkStatus.cmi src/@apollo/client/core/ApolloClient__Core_Types.cmj src/@apollo/client/core/ApolloClient__Core_Types.cmi src/@apollo/client/core/ApolloClient__Core_WatchQueryOptions.cmj src/@apollo/client/core/ApolloClient__Core_WatchQueryOptions.cmi src/@apollo/client/errors/ApolloClient__Errors_ApolloError.cmj src/@apollo/client/errors/ApolloClient__Errors_ApolloError.cmi src/graphql/ApolloClient__Graphql.cmj src/graphql/ApolloClient__Graphql.cmi src/@apollo/client/link/core/ApolloClient__Link_Core_Types.cmj src/@apollo/client/link/core/ApolloClient__Link_Core_Types.cmi src/ApolloClient__Types.cmj src/ApolloClient__Types.cmi src/ApolloClient__Utils.cmj src/ApolloClient__Utils.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/ApolloClient__Utilities.ast b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/ApolloClient__Utilities.ast
new file mode 100644
index 0000000..1ceb110
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/ApolloClient__Utilities.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/ApolloClient__Utilities.cmi b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/ApolloClient__Utilities.cmi
new file mode 100644
index 0000000..eaecdee
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/ApolloClient__Utilities.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/ApolloClient__Utilities.cmj b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/ApolloClient__Utilities.cmj
new file mode 100644
index 0000000..7a8e57f
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/ApolloClient__Utilities.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/ApolloClient__Utilities.cmt b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/ApolloClient__Utilities.cmt
new file mode 100644
index 0000000..dcbf7a8
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/ApolloClient__Utilities.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/ApolloClient__Utilities.d b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/ApolloClient__Utilities.d
new file mode 100644
index 0000000..4108a23
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/ApolloClient__Utilities.d
@@ -0,0 +1 @@
+src/@apollo/client/utilities/ApolloClient__Utilities.cmj : src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql.cmj src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql.cmi src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_GetFromAst.cmj src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_GetFromAst.cmi src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables.cmj src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables.cmi src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies.cmj src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql.ast b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql.ast
new file mode 100644
index 0000000..565bcff
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql.cmi b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql.cmi
new file mode 100644
index 0000000..3868945
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql.cmj b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql.cmj
new file mode 100644
index 0000000..3f4bff9
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql.cmt b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql.cmt
new file mode 100644
index 0000000..8a74fb4
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql.d b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql.d
new file mode 100644
index 0000000..d5a848b
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql.d
@@ -0,0 +1 @@
+src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql.cmj : src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_Fragments.cmj src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_Fragments.cmi src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_GetFromAst.cmj src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_GetFromAst.cmi src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_StoreUtils.cmj src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_StoreUtils.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_Fragments.ast b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_Fragments.ast
new file mode 100644
index 0000000..43f3041
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_Fragments.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_Fragments.cmi b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_Fragments.cmi
new file mode 100644
index 0000000..85049ac
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_Fragments.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_Fragments.cmj b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_Fragments.cmj
new file mode 100644
index 0000000..beb6ae6
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_Fragments.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_Fragments.cmt b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_Fragments.cmt
new file mode 100644
index 0000000..546253d
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_Fragments.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_Fragments.d b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_Fragments.d
new file mode 100644
index 0000000..7e5eeb1
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_Fragments.d
@@ -0,0 +1 @@
+src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_Fragments.cmj : src/graphql/ApolloClient__Graphql.cmj src/graphql/ApolloClient__Graphql.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_GetFromAst.ast b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_GetFromAst.ast
new file mode 100644
index 0000000..b74c248
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_GetFromAst.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_GetFromAst.cmi b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_GetFromAst.cmi
new file mode 100644
index 0000000..f6903a5
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_GetFromAst.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_GetFromAst.cmj b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_GetFromAst.cmj
new file mode 100644
index 0000000..3f4bff9
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_GetFromAst.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_GetFromAst.cmt b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_GetFromAst.cmt
new file mode 100644
index 0000000..889a49c
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_GetFromAst.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_GetFromAst.d b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_GetFromAst.d
new file mode 100644
index 0000000..1b11488
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_GetFromAst.d
@@ -0,0 +1 @@
+src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_GetFromAst.cmj : src/graphql/ApolloClient__Graphql.cmj src/graphql/ApolloClient__Graphql.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_StoreUtils.ast b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_StoreUtils.ast
new file mode 100644
index 0000000..dfda340
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_StoreUtils.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_StoreUtils.cmi b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_StoreUtils.cmi
new file mode 100644
index 0000000..28252a1
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_StoreUtils.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_StoreUtils.cmj b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_StoreUtils.cmj
new file mode 100644
index 0000000..e2efc2a
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_StoreUtils.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_StoreUtils.cmt b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_StoreUtils.cmt
new file mode 100644
index 0000000..45542c1
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_StoreUtils.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_StoreUtils.d b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_StoreUtils.d
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables.ast b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables.ast
new file mode 100644
index 0000000..f307dfb
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables.cmi b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables.cmi
new file mode 100644
index 0000000..f4468d3
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables.cmj b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables.cmj
new file mode 100644
index 0000000..55077cd
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables.cmt b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables.cmt
new file mode 100644
index 0000000..4d2d666
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables.d b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables.d
new file mode 100644
index 0000000..2b71002
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables.d
@@ -0,0 +1 @@
+src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables.cmj : src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables_Observable.cmj src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables_Observable.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables_Observable.ast b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables_Observable.ast
new file mode 100644
index 0000000..d4c5f41
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables_Observable.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables_Observable.cmi b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables_Observable.cmi
new file mode 100644
index 0000000..27a6cee
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables_Observable.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables_Observable.cmj b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables_Observable.cmj
new file mode 100644
index 0000000..55077cd
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables_Observable.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables_Observable.cmt b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables_Observable.cmt
new file mode 100644
index 0000000..d3581f7
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables_Observable.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables_Observable.d b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables_Observable.d
new file mode 100644
index 0000000..9c00a43
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables_Observable.d
@@ -0,0 +1 @@
+src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables_Observable.cmj : src/zen-observable/ApolloClient__ZenObservable.cmj src/zen-observable/ApolloClient__ZenObservable.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies.ast b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies.ast
new file mode 100644
index 0000000..5ba6c71
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies.cmi b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies.cmi
new file mode 100644
index 0000000..37d29d2
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies.cmj b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies.cmj
new file mode 100644
index 0000000..64b1177
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies.cmt b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies.cmt
new file mode 100644
index 0000000..ecaf2e7
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies.d b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies.d
new file mode 100644
index 0000000..f6a997d
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies.d
@@ -0,0 +1 @@
+src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies.cmj : src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies_Pagination.cmj src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies_Pagination.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies_Pagination.ast b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies_Pagination.ast
new file mode 100644
index 0000000..22e516d
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies_Pagination.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies_Pagination.cmi b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies_Pagination.cmi
new file mode 100644
index 0000000..8431c08
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies_Pagination.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies_Pagination.cmj b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies_Pagination.cmj
new file mode 100644
index 0000000..45e2ceb
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies_Pagination.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies_Pagination.cmt b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies_Pagination.cmt
new file mode 100644
index 0000000..5fa503d
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies_Pagination.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies_Pagination.d b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies_Pagination.d
new file mode 100644
index 0000000..8ad6a95
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies_Pagination.d
@@ -0,0 +1 @@
+src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies_Pagination.cmj : src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies_FieldPolicy.cmj src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies_FieldPolicy.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/ApolloClient.ast b/node_modules/rescript-apollo-client/lib/bs/src/ApolloClient.ast
new file mode 100644
index 0000000..11514bd
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/ApolloClient.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/ApolloClient.cmi b/node_modules/rescript-apollo-client/lib/bs/src/ApolloClient.cmi
new file mode 100644
index 0000000..b4fc7e4
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/ApolloClient.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/ApolloClient.cmj b/node_modules/rescript-apollo-client/lib/bs/src/ApolloClient.cmj
new file mode 100644
index 0000000..1b38476
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/ApolloClient.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/ApolloClient.cmt b/node_modules/rescript-apollo-client/lib/bs/src/ApolloClient.cmt
new file mode 100644
index 0000000..e583fe6
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/ApolloClient.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/ApolloClient.d b/node_modules/rescript-apollo-client/lib/bs/src/ApolloClient.d
new file mode 100644
index 0000000..d87512f
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/ApolloClient.d
@@ -0,0 +1 @@
+src/ApolloClient.cmj : src/ReasonMLCommunity__ApolloClient.cmj src/ReasonMLCommunity__ApolloClient.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/ApolloClient__Types.ast b/node_modules/rescript-apollo-client/lib/bs/src/ApolloClient__Types.ast
new file mode 100644
index 0000000..8ce73c2
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/ApolloClient__Types.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/ApolloClient__Types.cmi b/node_modules/rescript-apollo-client/lib/bs/src/ApolloClient__Types.cmi
new file mode 100644
index 0000000..6e8689c
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/ApolloClient__Types.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/ApolloClient__Types.cmj b/node_modules/rescript-apollo-client/lib/bs/src/ApolloClient__Types.cmj
new file mode 100644
index 0000000..48cc0c3
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/ApolloClient__Types.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/ApolloClient__Types.cmt b/node_modules/rescript-apollo-client/lib/bs/src/ApolloClient__Types.cmt
new file mode 100644
index 0000000..3ea43fd
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/ApolloClient__Types.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/ApolloClient__Types.d b/node_modules/rescript-apollo-client/lib/bs/src/ApolloClient__Types.d
new file mode 100644
index 0000000..e58ccfd
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/ApolloClient__Types.d
@@ -0,0 +1 @@
+src/ApolloClient__Types.cmj : src/graphql/ApolloClient__Graphql.cmj src/graphql/ApolloClient__Graphql.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/ApolloClient__Utils.ast b/node_modules/rescript-apollo-client/lib/bs/src/ApolloClient__Utils.ast
new file mode 100644
index 0000000..8c8507a
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/ApolloClient__Utils.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/ApolloClient__Utils.cmi b/node_modules/rescript-apollo-client/lib/bs/src/ApolloClient__Utils.cmi
new file mode 100644
index 0000000..5833df3
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/ApolloClient__Utils.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/ApolloClient__Utils.cmj b/node_modules/rescript-apollo-client/lib/bs/src/ApolloClient__Utils.cmj
new file mode 100644
index 0000000..3cfdf77
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/ApolloClient__Utils.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/ApolloClient__Utils.cmt b/node_modules/rescript-apollo-client/lib/bs/src/ApolloClient__Utils.cmt
new file mode 100644
index 0000000..67e37e1
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/ApolloClient__Utils.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/ApolloClient__Utils.d b/node_modules/rescript-apollo-client/lib/bs/src/ApolloClient__Utils.d
new file mode 100644
index 0000000..ae46128
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/ApolloClient__Utils.d
@@ -0,0 +1 @@
+src/ApolloClient__Utils.cmj : src/@apollo/client/errors/ApolloClient__Errors_ApolloError.cmj src/@apollo/client/errors/ApolloClient__Errors_ApolloError.cmi src/graphql/ApolloClient__Graphql.cmj src/graphql/ApolloClient__Graphql.cmi src/ApolloClient__Types.cmj src/ApolloClient__Types.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/ReasonMLCommunity__ApolloClient.ast b/node_modules/rescript-apollo-client/lib/bs/src/ReasonMLCommunity__ApolloClient.ast
new file mode 100644
index 0000000..137821b
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/ReasonMLCommunity__ApolloClient.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/ReasonMLCommunity__ApolloClient.cmi b/node_modules/rescript-apollo-client/lib/bs/src/ReasonMLCommunity__ApolloClient.cmi
new file mode 100644
index 0000000..bf41461
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/ReasonMLCommunity__ApolloClient.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/ReasonMLCommunity__ApolloClient.cmj b/node_modules/rescript-apollo-client/lib/bs/src/ReasonMLCommunity__ApolloClient.cmj
new file mode 100644
index 0000000..c4a7b6c
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/ReasonMLCommunity__ApolloClient.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/ReasonMLCommunity__ApolloClient.cmt b/node_modules/rescript-apollo-client/lib/bs/src/ReasonMLCommunity__ApolloClient.cmt
new file mode 100644
index 0000000..a9ed558
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/ReasonMLCommunity__ApolloClient.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/ReasonMLCommunity__ApolloClient.d b/node_modules/rescript-apollo-client/lib/bs/src/ReasonMLCommunity__ApolloClient.d
new file mode 100644
index 0000000..49163ef
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/ReasonMLCommunity__ApolloClient.d
@@ -0,0 +1 @@
+src/ReasonMLCommunity__ApolloClient.cmj : src/@apollo/client/cache/core/ApolloClient__Cache_Core_Cache.cmj src/@apollo/client/cache/core/ApolloClient__Cache_Core_Cache.cmi src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types.cmj src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types.cmi src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_InMemoryCache.cmj src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_InMemoryCache.cmi src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies.cmj src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies.cmi src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies_FieldPolicy.cmj src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies_FieldPolicy.cmi src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_ReactiveVars.cmj src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_ReactiveVars.cmi src/@apollo/client/ApolloClient__Client.cmj src/@apollo/client/ApolloClient__Client.cmi src/@apollo/client/core/ApolloClient__Core_ApolloClient.cmj src/@apollo/client/core/ApolloClient__Core_ApolloClient.cmi src/@apollo/client/core/ApolloClient__Core_LocalState.cmj src/@apollo/client/core/ApolloClient__Core_LocalState.cmi src/@apollo/client/core/ApolloClient__Core_ObservableQuery.cmj src/@apollo/client/core/ApolloClient__Core_ObservableQuery.cmi src/@apollo/client/core/ApolloClient__Core_Types.cmj src/@apollo/client/core/ApolloClient__Core_Types.cmi src/@apollo/client/core/ApolloClient__Core_WatchQueryOptions.cmj src/@apollo/client/core/ApolloClient__Core_WatchQueryOptions.cmi src/@apollo/client/errors/ApolloClient__Errors_ApolloError.cmj src/@apollo/client/errors/ApolloClient__Errors_ApolloError.cmi src/graphql/ApolloClient__Graphql.cmj src/graphql/ApolloClient__Graphql.cmi src/graphql/error/ApolloClient__Graphql_Error_GraphQLError.cmj src/graphql/error/ApolloClient__Graphql_Error_GraphQLError.cmi src/@apollo/client/link/context/ApolloClient__Link_Context.cmj src/@apollo/client/link/context/ApolloClient__Link_Context.cmi src/@apollo/client/link/core/ApolloClient__Link_Core_ApolloLink.cmj src/@apollo/client/link/core/ApolloClient__Link_Core_ApolloLink.cmi src/@apollo/client/link/core/ApolloClient__Link_Core_Types.cmj src/@apollo/client/link/core/ApolloClient__Link_Core_Types.cmi src/@apollo/client/link/error/ApolloClient__Link_Error.cmj src/@apollo/client/link/error/ApolloClient__Link_Error.cmi src/@apollo/client/link/http/ApolloClient__Link_Http_HttpLink.cmj src/@apollo/client/link/http/ApolloClient__Link_Http_HttpLink.cmi src/@apollo/client/link/http/ApolloClient__Link_Http_SelectHttpOptionsAndBody.cmj src/@apollo/client/link/http/ApolloClient__Link_Http_SelectHttpOptionsAndBody.cmi src/@apollo/client/link/ws/ApolloClient__Link_Ws.cmj src/@apollo/client/link/ws/ApolloClient__Link_Ws.cmi src/@apollo/client/react/context/ApolloClient__React_Context_ApolloProvider.cmj src/@apollo/client/react/context/ApolloClient__React_Context_ApolloProvider.cmi src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseApolloClient.cmj src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseApolloClient.cmi src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseLazyQuery.cmj src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseLazyQuery.cmi src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseMutation.cmj src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseMutation.cmi src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.cmj src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.cmi src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseSubscription.cmj src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseSubscription.cmi src/@apollo/client/react/types/ApolloClient__React_Types.cmj src/@apollo/client/react/types/ApolloClient__React_Types.cmi src/subscriptions-transport-ws/ApolloClient__SubscriptionsTransportWs.cmj src/subscriptions-transport-ws/ApolloClient__SubscriptionsTransportWs.cmi src/@apollo/client/utilities/ApolloClient__Utilities.cmj src/@apollo/client/utilities/ApolloClient__Utilities.cmi src/zen-observable/ApolloClient__ZenObservable.cmj src/zen-observable/ApolloClient__ZenObservable.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/graphql-tag/ApolloClient__GraphqlTag.ast b/node_modules/rescript-apollo-client/lib/bs/src/graphql-tag/ApolloClient__GraphqlTag.ast
new file mode 100644
index 0000000..2f80862
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/graphql-tag/ApolloClient__GraphqlTag.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/graphql-tag/ApolloClient__GraphqlTag.cmi b/node_modules/rescript-apollo-client/lib/bs/src/graphql-tag/ApolloClient__GraphqlTag.cmi
new file mode 100644
index 0000000..652281a
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/graphql-tag/ApolloClient__GraphqlTag.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/graphql-tag/ApolloClient__GraphqlTag.cmj b/node_modules/rescript-apollo-client/lib/bs/src/graphql-tag/ApolloClient__GraphqlTag.cmj
new file mode 100644
index 0000000..7cb3716
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/graphql-tag/ApolloClient__GraphqlTag.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/graphql-tag/ApolloClient__GraphqlTag.cmt b/node_modules/rescript-apollo-client/lib/bs/src/graphql-tag/ApolloClient__GraphqlTag.cmt
new file mode 100644
index 0000000..48f2847
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/graphql-tag/ApolloClient__GraphqlTag.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/graphql-tag/ApolloClient__GraphqlTag.d b/node_modules/rescript-apollo-client/lib/bs/src/graphql-tag/ApolloClient__GraphqlTag.d
new file mode 100644
index 0000000..507bb66
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/graphql-tag/ApolloClient__GraphqlTag.d
@@ -0,0 +1 @@
+src/graphql-tag/ApolloClient__GraphqlTag.cmj : src/graphql/ApolloClient__Graphql.cmj src/graphql/ApolloClient__Graphql.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/graphql/ApolloClient__Graphql.ast b/node_modules/rescript-apollo-client/lib/bs/src/graphql/ApolloClient__Graphql.ast
new file mode 100644
index 0000000..3925487
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/graphql/ApolloClient__Graphql.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/graphql/ApolloClient__Graphql.cmi b/node_modules/rescript-apollo-client/lib/bs/src/graphql/ApolloClient__Graphql.cmi
new file mode 100644
index 0000000..415eebf
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/graphql/ApolloClient__Graphql.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/graphql/ApolloClient__Graphql.cmj b/node_modules/rescript-apollo-client/lib/bs/src/graphql/ApolloClient__Graphql.cmj
new file mode 100644
index 0000000..8b3192a
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/graphql/ApolloClient__Graphql.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/graphql/ApolloClient__Graphql.cmt b/node_modules/rescript-apollo-client/lib/bs/src/graphql/ApolloClient__Graphql.cmt
new file mode 100644
index 0000000..fb42c25
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/graphql/ApolloClient__Graphql.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/graphql/ApolloClient__Graphql.d b/node_modules/rescript-apollo-client/lib/bs/src/graphql/ApolloClient__Graphql.d
new file mode 100644
index 0000000..5c42b0a
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/graphql/ApolloClient__Graphql.d
@@ -0,0 +1 @@
+src/graphql/ApolloClient__Graphql.cmj : src/graphql/error/ApolloClient__Graphql_Error.cmj src/graphql/error/ApolloClient__Graphql_Error.cmi src/graphql/error/ApolloClient__Graphql_Error_GraphQLError.cmj src/graphql/error/ApolloClient__Graphql_Error_GraphQLError.cmi src/graphql/execution/ApolloClient__Graphql_Execution.cmj src/graphql/execution/ApolloClient__Graphql_Execution.cmi src/graphql/language/ApolloClient__Graphql_Language.cmj src/graphql/language/ApolloClient__Graphql_Language.cmi src/graphql/location/ApolloClient__Graphql_Location.cmj src/graphql/location/ApolloClient__Graphql_Location.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/graphql/error/ApolloClient__Graphql_Error.ast b/node_modules/rescript-apollo-client/lib/bs/src/graphql/error/ApolloClient__Graphql_Error.ast
new file mode 100644
index 0000000..a2979f2
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/graphql/error/ApolloClient__Graphql_Error.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/graphql/error/ApolloClient__Graphql_Error.cmi b/node_modules/rescript-apollo-client/lib/bs/src/graphql/error/ApolloClient__Graphql_Error.cmi
new file mode 100644
index 0000000..bdc16f4
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/graphql/error/ApolloClient__Graphql_Error.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/graphql/error/ApolloClient__Graphql_Error.cmj b/node_modules/rescript-apollo-client/lib/bs/src/graphql/error/ApolloClient__Graphql_Error.cmj
new file mode 100644
index 0000000..8ba12b7
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/graphql/error/ApolloClient__Graphql_Error.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/graphql/error/ApolloClient__Graphql_Error.cmt b/node_modules/rescript-apollo-client/lib/bs/src/graphql/error/ApolloClient__Graphql_Error.cmt
new file mode 100644
index 0000000..feb1435
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/graphql/error/ApolloClient__Graphql_Error.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/graphql/error/ApolloClient__Graphql_Error.d b/node_modules/rescript-apollo-client/lib/bs/src/graphql/error/ApolloClient__Graphql_Error.d
new file mode 100644
index 0000000..509c077
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/graphql/error/ApolloClient__Graphql_Error.d
@@ -0,0 +1 @@
+src/graphql/error/ApolloClient__Graphql_Error.cmj : src/graphql/error/ApolloClient__Graphql_Error_GraphQLError.cmj src/graphql/error/ApolloClient__Graphql_Error_GraphQLError.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/graphql/error/ApolloClient__Graphql_Error_GraphQLError.ast b/node_modules/rescript-apollo-client/lib/bs/src/graphql/error/ApolloClient__Graphql_Error_GraphQLError.ast
new file mode 100644
index 0000000..1d3bfd9
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/graphql/error/ApolloClient__Graphql_Error_GraphQLError.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/graphql/error/ApolloClient__Graphql_Error_GraphQLError.cmi b/node_modules/rescript-apollo-client/lib/bs/src/graphql/error/ApolloClient__Graphql_Error_GraphQLError.cmi
new file mode 100644
index 0000000..efbc68f
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/graphql/error/ApolloClient__Graphql_Error_GraphQLError.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/graphql/error/ApolloClient__Graphql_Error_GraphQLError.cmj b/node_modules/rescript-apollo-client/lib/bs/src/graphql/error/ApolloClient__Graphql_Error_GraphQLError.cmj
new file mode 100644
index 0000000..8ba12b7
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/graphql/error/ApolloClient__Graphql_Error_GraphQLError.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/graphql/error/ApolloClient__Graphql_Error_GraphQLError.cmt b/node_modules/rescript-apollo-client/lib/bs/src/graphql/error/ApolloClient__Graphql_Error_GraphQLError.cmt
new file mode 100644
index 0000000..b56426c
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/graphql/error/ApolloClient__Graphql_Error_GraphQLError.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/graphql/error/ApolloClient__Graphql_Error_GraphQLError.d b/node_modules/rescript-apollo-client/lib/bs/src/graphql/error/ApolloClient__Graphql_Error_GraphQLError.d
new file mode 100644
index 0000000..e20bc66
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/graphql/error/ApolloClient__Graphql_Error_GraphQLError.d
@@ -0,0 +1 @@
+src/graphql/error/ApolloClient__Graphql_Error_GraphQLError.cmj : src/graphql/language/ApolloClient__Graphql_Language_Ast.cmj src/graphql/language/ApolloClient__Graphql_Language_Ast.cmi src/graphql/language/ApolloClient__Graphql_Language_Source.cmj src/graphql/language/ApolloClient__Graphql_Language_Source.cmi src/graphql/location/ApolloClient__Graphql_Location.cmj src/graphql/location/ApolloClient__Graphql_Location.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/graphql/execution/ApolloClient__Graphql_Execution.ast b/node_modules/rescript-apollo-client/lib/bs/src/graphql/execution/ApolloClient__Graphql_Execution.ast
new file mode 100644
index 0000000..6975c79
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/graphql/execution/ApolloClient__Graphql_Execution.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/graphql/execution/ApolloClient__Graphql_Execution.cmi b/node_modules/rescript-apollo-client/lib/bs/src/graphql/execution/ApolloClient__Graphql_Execution.cmi
new file mode 100644
index 0000000..541bd4a
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/graphql/execution/ApolloClient__Graphql_Execution.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/graphql/execution/ApolloClient__Graphql_Execution.cmj b/node_modules/rescript-apollo-client/lib/bs/src/graphql/execution/ApolloClient__Graphql_Execution.cmj
new file mode 100644
index 0000000..626c95b
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/graphql/execution/ApolloClient__Graphql_Execution.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/graphql/execution/ApolloClient__Graphql_Execution.cmt b/node_modules/rescript-apollo-client/lib/bs/src/graphql/execution/ApolloClient__Graphql_Execution.cmt
new file mode 100644
index 0000000..92ddab4
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/graphql/execution/ApolloClient__Graphql_Execution.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/graphql/execution/ApolloClient__Graphql_Execution.d b/node_modules/rescript-apollo-client/lib/bs/src/graphql/execution/ApolloClient__Graphql_Execution.d
new file mode 100644
index 0000000..5050f6e
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/graphql/execution/ApolloClient__Graphql_Execution.d
@@ -0,0 +1 @@
+src/graphql/execution/ApolloClient__Graphql_Execution.cmj : src/graphql/execution/ApolloClient__Graphql_Execution_Execute.cmj src/graphql/execution/ApolloClient__Graphql_Execution_Execute.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/graphql/execution/ApolloClient__Graphql_Execution_Execute.ast b/node_modules/rescript-apollo-client/lib/bs/src/graphql/execution/ApolloClient__Graphql_Execution_Execute.ast
new file mode 100644
index 0000000..5c86196
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/graphql/execution/ApolloClient__Graphql_Execution_Execute.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/graphql/execution/ApolloClient__Graphql_Execution_Execute.cmi b/node_modules/rescript-apollo-client/lib/bs/src/graphql/execution/ApolloClient__Graphql_Execution_Execute.cmi
new file mode 100644
index 0000000..23528b1
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/graphql/execution/ApolloClient__Graphql_Execution_Execute.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/graphql/execution/ApolloClient__Graphql_Execution_Execute.cmj b/node_modules/rescript-apollo-client/lib/bs/src/graphql/execution/ApolloClient__Graphql_Execution_Execute.cmj
new file mode 100644
index 0000000..30caf93
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/graphql/execution/ApolloClient__Graphql_Execution_Execute.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/graphql/execution/ApolloClient__Graphql_Execution_Execute.cmt b/node_modules/rescript-apollo-client/lib/bs/src/graphql/execution/ApolloClient__Graphql_Execution_Execute.cmt
new file mode 100644
index 0000000..c307bb9
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/graphql/execution/ApolloClient__Graphql_Execution_Execute.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/graphql/execution/ApolloClient__Graphql_Execution_Execute.d b/node_modules/rescript-apollo-client/lib/bs/src/graphql/execution/ApolloClient__Graphql_Execution_Execute.d
new file mode 100644
index 0000000..60c35ee
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/graphql/execution/ApolloClient__Graphql_Execution_Execute.d
@@ -0,0 +1 @@
+src/graphql/execution/ApolloClient__Graphql_Execution_Execute.cmj : src/graphql/error/ApolloClient__Graphql_Error_GraphQLError.cmj src/graphql/error/ApolloClient__Graphql_Error_GraphQLError.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/graphql/language/ApolloClient__Graphql_Language.ast b/node_modules/rescript-apollo-client/lib/bs/src/graphql/language/ApolloClient__Graphql_Language.ast
new file mode 100644
index 0000000..e09dcb6
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/graphql/language/ApolloClient__Graphql_Language.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/graphql/language/ApolloClient__Graphql_Language.cmi b/node_modules/rescript-apollo-client/lib/bs/src/graphql/language/ApolloClient__Graphql_Language.cmi
new file mode 100644
index 0000000..7316c5a
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/graphql/language/ApolloClient__Graphql_Language.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/graphql/language/ApolloClient__Graphql_Language.cmj b/node_modules/rescript-apollo-client/lib/bs/src/graphql/language/ApolloClient__Graphql_Language.cmj
new file mode 100644
index 0000000..8f63fa9
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/graphql/language/ApolloClient__Graphql_Language.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/graphql/language/ApolloClient__Graphql_Language.cmt b/node_modules/rescript-apollo-client/lib/bs/src/graphql/language/ApolloClient__Graphql_Language.cmt
new file mode 100644
index 0000000..0572bbb
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/graphql/language/ApolloClient__Graphql_Language.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/graphql/language/ApolloClient__Graphql_Language.d b/node_modules/rescript-apollo-client/lib/bs/src/graphql/language/ApolloClient__Graphql_Language.d
new file mode 100644
index 0000000..9bb926f
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/graphql/language/ApolloClient__Graphql_Language.d
@@ -0,0 +1 @@
+src/graphql/language/ApolloClient__Graphql_Language.cmj : src/graphql/language/ApolloClient__Graphql_Language_Ast.cmj src/graphql/language/ApolloClient__Graphql_Language_Ast.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/graphql/language/ApolloClient__Graphql_Language_Ast.ast b/node_modules/rescript-apollo-client/lib/bs/src/graphql/language/ApolloClient__Graphql_Language_Ast.ast
new file mode 100644
index 0000000..ceac2f6
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/graphql/language/ApolloClient__Graphql_Language_Ast.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/graphql/language/ApolloClient__Graphql_Language_Ast.cmi b/node_modules/rescript-apollo-client/lib/bs/src/graphql/language/ApolloClient__Graphql_Language_Ast.cmi
new file mode 100644
index 0000000..6746c9a
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/graphql/language/ApolloClient__Graphql_Language_Ast.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/graphql/language/ApolloClient__Graphql_Language_Ast.cmj b/node_modules/rescript-apollo-client/lib/bs/src/graphql/language/ApolloClient__Graphql_Language_Ast.cmj
new file mode 100644
index 0000000..37ac42a
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/graphql/language/ApolloClient__Graphql_Language_Ast.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/graphql/language/ApolloClient__Graphql_Language_Ast.cmt b/node_modules/rescript-apollo-client/lib/bs/src/graphql/language/ApolloClient__Graphql_Language_Ast.cmt
new file mode 100644
index 0000000..2fb669b
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/graphql/language/ApolloClient__Graphql_Language_Ast.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/graphql/language/ApolloClient__Graphql_Language_Ast.d b/node_modules/rescript-apollo-client/lib/bs/src/graphql/language/ApolloClient__Graphql_Language_Ast.d
new file mode 100644
index 0000000..082beda
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/bs/src/graphql/language/ApolloClient__Graphql_Language_Ast.d
@@ -0,0 +1 @@
+src/graphql/language/ApolloClient__Graphql_Language_Ast.cmj : src/graphql/language/ApolloClient__Graphql_Language_Source.cmj src/graphql/language/ApolloClient__Graphql_Language_Source.cmi
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/graphql/language/ApolloClient__Graphql_Language_Source.ast b/node_modules/rescript-apollo-client/lib/bs/src/graphql/language/ApolloClient__Graphql_Language_Source.ast
new file mode 100644
index 0000000..cd0fe94
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/graphql/language/ApolloClient__Graphql_Language_Source.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/graphql/language/ApolloClient__Graphql_Language_Source.cmi b/node_modules/rescript-apollo-client/lib/bs/src/graphql/language/ApolloClient__Graphql_Language_Source.cmi
new file mode 100644
index 0000000..0e06fae
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/graphql/language/ApolloClient__Graphql_Language_Source.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/graphql/language/ApolloClient__Graphql_Language_Source.cmj b/node_modules/rescript-apollo-client/lib/bs/src/graphql/language/ApolloClient__Graphql_Language_Source.cmj
new file mode 100644
index 0000000..8f63fa9
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/graphql/language/ApolloClient__Graphql_Language_Source.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/graphql/language/ApolloClient__Graphql_Language_Source.cmt b/node_modules/rescript-apollo-client/lib/bs/src/graphql/language/ApolloClient__Graphql_Language_Source.cmt
new file mode 100644
index 0000000..987d191
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/graphql/language/ApolloClient__Graphql_Language_Source.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/graphql/language/ApolloClient__Graphql_Language_Source.d b/node_modules/rescript-apollo-client/lib/bs/src/graphql/language/ApolloClient__Graphql_Language_Source.d
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/graphql/location/ApolloClient__Graphql_Location.ast b/node_modules/rescript-apollo-client/lib/bs/src/graphql/location/ApolloClient__Graphql_Location.ast
new file mode 100644
index 0000000..fc374ce
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/graphql/location/ApolloClient__Graphql_Location.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/graphql/location/ApolloClient__Graphql_Location.cmi b/node_modules/rescript-apollo-client/lib/bs/src/graphql/location/ApolloClient__Graphql_Location.cmi
new file mode 100644
index 0000000..0bd8079
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/graphql/location/ApolloClient__Graphql_Location.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/graphql/location/ApolloClient__Graphql_Location.cmj b/node_modules/rescript-apollo-client/lib/bs/src/graphql/location/ApolloClient__Graphql_Location.cmj
new file mode 100644
index 0000000..4616095
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/graphql/location/ApolloClient__Graphql_Location.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/graphql/location/ApolloClient__Graphql_Location.cmt b/node_modules/rescript-apollo-client/lib/bs/src/graphql/location/ApolloClient__Graphql_Location.cmt
new file mode 100644
index 0000000..7969aa1
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/graphql/location/ApolloClient__Graphql_Location.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/graphql/location/ApolloClient__Graphql_Location.d b/node_modules/rescript-apollo-client/lib/bs/src/graphql/location/ApolloClient__Graphql_Location.d
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/subscriptions-transport-ws/ApolloClient__SubscriptionsTransportWs.ast b/node_modules/rescript-apollo-client/lib/bs/src/subscriptions-transport-ws/ApolloClient__SubscriptionsTransportWs.ast
new file mode 100644
index 0000000..5a02d93
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/subscriptions-transport-ws/ApolloClient__SubscriptionsTransportWs.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/subscriptions-transport-ws/ApolloClient__SubscriptionsTransportWs.cmi b/node_modules/rescript-apollo-client/lib/bs/src/subscriptions-transport-ws/ApolloClient__SubscriptionsTransportWs.cmi
new file mode 100644
index 0000000..4f1f6ad
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/subscriptions-transport-ws/ApolloClient__SubscriptionsTransportWs.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/subscriptions-transport-ws/ApolloClient__SubscriptionsTransportWs.cmj b/node_modules/rescript-apollo-client/lib/bs/src/subscriptions-transport-ws/ApolloClient__SubscriptionsTransportWs.cmj
new file mode 100644
index 0000000..8949d6c
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/subscriptions-transport-ws/ApolloClient__SubscriptionsTransportWs.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/subscriptions-transport-ws/ApolloClient__SubscriptionsTransportWs.cmt b/node_modules/rescript-apollo-client/lib/bs/src/subscriptions-transport-ws/ApolloClient__SubscriptionsTransportWs.cmt
new file mode 100644
index 0000000..bf650cc
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/subscriptions-transport-ws/ApolloClient__SubscriptionsTransportWs.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/subscriptions-transport-ws/ApolloClient__SubscriptionsTransportWs.d b/node_modules/rescript-apollo-client/lib/bs/src/subscriptions-transport-ws/ApolloClient__SubscriptionsTransportWs.d
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/zen-observable/ApolloClient__ZenObservable.ast b/node_modules/rescript-apollo-client/lib/bs/src/zen-observable/ApolloClient__ZenObservable.ast
new file mode 100644
index 0000000..89ea6ab
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/zen-observable/ApolloClient__ZenObservable.ast differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/zen-observable/ApolloClient__ZenObservable.cmi b/node_modules/rescript-apollo-client/lib/bs/src/zen-observable/ApolloClient__ZenObservable.cmi
new file mode 100644
index 0000000..4707d38
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/zen-observable/ApolloClient__ZenObservable.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/zen-observable/ApolloClient__ZenObservable.cmj b/node_modules/rescript-apollo-client/lib/bs/src/zen-observable/ApolloClient__ZenObservable.cmj
new file mode 100644
index 0000000..9f504dd
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/zen-observable/ApolloClient__ZenObservable.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/zen-observable/ApolloClient__ZenObservable.cmt b/node_modules/rescript-apollo-client/lib/bs/src/zen-observable/ApolloClient__ZenObservable.cmt
new file mode 100644
index 0000000..d7c009c
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/bs/src/zen-observable/ApolloClient__ZenObservable.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/bs/src/zen-observable/ApolloClient__ZenObservable.d b/node_modules/rescript-apollo-client/lib/bs/src/zen-observable/ApolloClient__ZenObservable.d
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/.compiler.log b/node_modules/rescript-apollo-client/lib/ocaml/.compiler.log
new file mode 100644
index 0000000..e965b00
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/.compiler.log
@@ -0,0 +1,2 @@
+#Start(1613154581974)
+#Done(1613154582905)
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/.ninja_log b/node_modules/rescript-apollo-client/lib/ocaml/.ninja_log
new file mode 100644
index 0000000..d6e9d0b
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/.ninja_log
@@ -0,0 +1,282 @@
+# ninja log v6
+5	22	1613154581000000000	ApolloClient.cmi	e6bb90881c6e2dbb
+7	24	1613154581000000000	ApolloClient.cmj	214fd4aec98b5260
+9	28	1613154582000000000	ApolloClient.cmt	bbef9c25d65a585d
+10	30	1613154582000000000	ApolloClient.res	8e8669c77536fb25
+12	31	1613154582000000000	ApolloClient__Types.cmi	564a9c94f6459f8a
+14	37	1613154582000000000	ApolloClient__Types.cmj	948a013f14d5806
+22	42	1613154582000000000	ApolloClient__Types.cmt	38dbc280fc54376
+24	45	1613154582000000000	ApolloClient__Types.res	f08fde9ec5fb0eef
+28	47	1613154582000000000	ApolloClient__Utils.cmi	327b7007e3b860fb
+30	49	1613154582000000000	ApolloClient__Utils.cmj	accd239f81da908b
+32	52	1613154582000000000	ApolloClient__Utils.cmt	b0ad1c2435f2e498
+37	58	1613154582000000000	ApolloClient__Utils.res	70fb903cdd369d85
+42	60	1613154582000000000	ReasonMLCommunity__ApolloClient.cmi	4b60a45ade9ec4d5
+45	64	1613154582000000000	ReasonMLCommunity__ApolloClient.cmj	795e1e8fb3d7f039
+47	66	1613154582000000000	ReasonMLCommunity__ApolloClient.cmt	2e4fcf0557962933
+52	70	1613154582000000000	ApolloClient__ZenObservable.cmi	5f129ce851f1db67
+50	72	1613154582000000000	ReasonMLCommunity__ApolloClient.res	d680c8a8edcd755e
+58	73	1613154582000000000	ApolloClient__ZenObservable.cmj	5925fa5963c432ec
+64	83	1613154582000000000	ApolloClient__ZenObservable.res	694be72182345217
+61	87	1613154582000000000	ApolloClient__ZenObservable.cmt	2a6dcf8cfbad5124
+66	89	1613154582000000000	ApolloClient__SubscriptionsTransportWs.cmi	68bcf41b5b47ff23
+70	91	1613154582000000000	ApolloClient__SubscriptionsTransportWs.cmj	1d6ea913691e4e74
+72	93	1613154582000000000	ApolloClient__SubscriptionsTransportWs.cmt	94f0aa2587c90990
+74	94	1613154582000000000	ApolloClient__SubscriptionsTransportWs.res	53dafa0b075fc44f
+83	102	1613154582000000000	ApolloClient__GraphqlTag.cmi	b4bb4643f23078b8
+87	104	1613154582000000000	ApolloClient__GraphqlTag.cmj	d304108fa9654db5
+89	106	1613154582000000000	ApolloClient__GraphqlTag.cmt	d20e1e52d541b90e
+91	107	1613154582000000000	ApolloClient__GraphqlTag.res	4346fc2136db6890
+93	111	1613154582000000000	ApolloClient__Graphql.cmi	eb38558743bbfd44
+94	113	1613154582000000000	ApolloClient__Graphql.cmj	e9207c07e9ed98a0
+102	122	1613154582000000000	ApolloClient__Graphql.cmt	be7e1d42e8998242
+104	123	1613154582000000000	ApolloClient__Graphql.res	cb0f64754845d568
+106	125	1613154582000000000	ApolloClient__Graphql_Location.cmi	5df3645a579a2d7
+111	129	1613154582000000000	ApolloClient__Graphql_Location.cmj	9c0cc1ea7b376a89
+108	131	1613154582000000000	ApolloClient__Client.cmj	3bfa8f422a109eb3
+113	134	1613154582000000000	ApolloClient__Graphql_Location.cmt	a41af6ff6d20a8b4
+122	138	1613154582000000000	ApolloClient__Graphql_Location.res	ed0d4ae96ee8e0f2
+124	140	1613154582000000000	ApolloClient__Graphql_Language.cmi	1daa85fd9c89a8b9
+125	143	1613154582000000000	ApolloClient__Graphql_Language.cmj	7fc6ad2fac19c17b
+129	145	1613154582000000000	ApolloClient__Graphql_Language.cmt	30fd736c2a881f75
+131	150	1613154582000000000	ApolloClient__Graphql_Language.res	1fa4519cdfde180c
+134	153	1613154582000000000	ApolloClient__Graphql_Language_Ast.cmi	3ab8152c28668bff
+139	157	1613154582000000000	ApolloClient__Graphql_Language_Ast.cmj	c00a8395ff5e0512
+140	161	1613154582000000000	ApolloClient__Graphql_Language_Ast.cmt	66885810376dddfe
+143	165	1613154582000000000	ApolloClient__Graphql_Language_Ast.res	4e800dd84485f806
+145	167	1613154582000000000	ApolloClient__Graphql_Language_Source.cmi	83f474c21cfaabb8
+150	169	1613154582000000000	ApolloClient__Graphql_Language_Source.cmj	ae86b37bc7926905
+153	172	1613154582000000000	ApolloClient__Graphql_Language_Source.cmt	5fb6638ca9e05108
+157	174	1613154582000000000	ApolloClient__Graphql_Language_Source.res	46c8bf04dba2e860
+162	181	1613154582000000000	ApolloClient__Graphql_Execution.cmi	3f2fc5591933fc6d
+165	189	1613154582000000000	ApolloClient__Graphql_Execution.cmj	c6a7cae371bcd53a
+167	191	1613154582000000000	ApolloClient__Graphql_Execution.cmt	79a150e44011742
+169	192	1613154582000000000	ApolloClient__Graphql_Execution.res	44c19fcb7beabf84
+172	196	1613154582000000000	ApolloClient__Graphql_Execution_Execute.cmi	3796d7a871003c69
+174	207	1613154582000000000	ApolloClient__Graphql_Execution_Execute.cmj	cdedfbd0ffc43f0e
+188	210	1613154582000000000	ApolloClient__Graphql_Execution_Execute.cmt	3fce9c69d1399df3
+189	215	1613154582000000000	ApolloClient__Graphql_Execution_Execute.res	2a65c1ed2acc1c10
+191	223	1613154582000000000	ApolloClient__Graphql_Error.cmi	bd17d763fad19c81
+192	224	1613154582000000000	ApolloClient__Graphql_Error.cmj	9afc523404c9646a
+196	228	1613154582000000000	ApolloClient__Graphql_Error.cmt	7ab180b376d408b7
+207	231	1613154582000000000	ApolloClient__Graphql_Error.res	e991c44cffdbff59
+211	232	1613154582000000000	ApolloClient__Graphql_Error_GraphQLError.cmi	3b358f6cb9cb01d7
+215	235	1613154582000000000	ApolloClient__Graphql_Error_GraphQLError.cmj	549825784a5db08d
+223	236	1613154582000000000	ApolloClient__Graphql_Error_GraphQLError.cmt	8baf9189dce2ab19
+224	241	1613154582000000000	ApolloClient__Graphql_Error_GraphQLError.res	411abf4a707f7f54
+228	243	1613154582000000000	ApolloClient__Client.cmi	f37a308f5a740d3b
+231	251	1613154582000000000	ApolloClient__Client.cmt	d675554d344efe02
+232	253	1613154582000000000	ApolloClient__Client.res	7e676d74c710e79b
+235	255	1613154582000000000	ApolloClient__Utilities.cmi	fa01114923e4ae16
+236	257	1613154582000000000	ApolloClient__Utilities.cmj	ab3b69ba5cfd0b6d
+241	258	1613154582000000000	ApolloClient__Utilities.cmt	fc5e8e835dab98e9
+245	265	1613154582000000000	ApolloClient__Utilities.res	c48c860eaa741c3c
+251	268	1613154582000000000	ApolloClient__Utilities_Policies.cmi	40393736a72da233
+253	272	1613154582000000000	ApolloClient__Utilities_Policies.cmj	eee53253c8a311d9
+255	274	1613154582000000000	ApolloClient__Utilities_Policies.cmt	ba8d3e95cdda0ab1
+257	275	1613154582000000000	ApolloClient__Utilities_Policies.res	2071889d215f493f
+259	277	1613154582000000000	ApolloClient__Utilities_Policies_Pagination.cmi	813e3fefd7ab10ff
+265	288	1613154582000000000	ApolloClient__Utilities_Policies_Pagination.cmj	85034cfe3e722e1b
+268	289	1613154582000000000	ApolloClient__Utilities_Policies_Pagination.cmt	c4009dadb1f19244
+272	291	1613154582000000000	ApolloClient__Utilities_Policies_Pagination.res	29f097ce8e33cc11
+274	292	1613154582000000000	ApolloClient__Utilities_Observables.cmi	54ef5052f9e10739
+275	297	1613154582000000000	ApolloClient__Utilities_Observables.cmj	59443d17783550bd
+277	302	1613154582000000000	ApolloClient__Utilities_Observables.cmt	46acf5ff254c7f87
+288	304	1613154582000000000	ApolloClient__Utilities_Observables.res	9a574c606e001c2a
+289	307	1613154582000000000	ApolloClient__Utilities_Graphql.cmi	bc53d126ddb4d3ed
+291	311	1613154582000000000	ApolloClient__Utilities_Observables_Observable.cmi	8e1f25bc85185b26
+292	315	1613154582000000000	ApolloClient__Utilities_Observables_Observable.cmj	3adcc50d3f38adfb
+298	321	1613154582000000000	ApolloClient__Utilities_Observables_Observable.cmt	3fa546cf836fb5a6
+302	322	1613154582000000000	ApolloClient__Utilities_Observables_Observable.res	6f78ac5e3d004f2a
+304	324	1613154582000000000	ApolloClient__Utilities_Graphql.cmj	f6fbf9facdf00eaf
+307	325	1613154582000000000	ApolloClient__Utilities_Graphql.cmt	531b7de455445e5d
+311	332	1613154582000000000	ApolloClient__Utilities_Graphql.res	81606fc439f3cb51
+315	336	1613154582000000000	ApolloClient__Utilities_Graphql_Fragments.cmi	be92da3506752903
+321	337	1613154582000000000	ApolloClient__Utilities_Graphql_Fragments.cmj	a7208a9b61d6835f
+322	338	1613154582000000000	ApolloClient__Utilities_Graphql_Fragments.cmt	f9e3fa2990ef107d
+324	340	1613154582000000000	ApolloClient__Utilities_Graphql_Fragments.res	ebb3e8cf9de18af5
+325	341	1613154582000000000	ApolloClient__Utilities_Graphql_GetFromAst.cmi	be1d5e9f7d02829a
+334	352	1613154582000000000	ApolloClient__Cache_InMemory_Policies.cmt	c9ba22c211cb17c5
+336	354	1613154582000000000	ApolloClient__Cache_InMemory_Policies.cmj	9a00f044785f6eca
+337	356	1613154582000000000	ApolloClient__Cache_InMemory_Policies.res	199be4dbe84b5fd9
+339	357	1613154582000000000	ApolloClient__Cache_InMemory_ReactiveVars.cmi	e1ad7edb96c0862f
+340	360	1613154582000000000	ApolloClient__Cache_InMemory_ReactiveVars.cmj	2e21d148019ddd38
+341	365	1613154582000000000	ApolloClient__Cache_InMemory_ReactiveVars.cmt	11a58350329188e9
+352	369	1613154582000000000	ApolloClient__Cache_InMemory_ReactiveVars.res	813d253867440575
+354	371	1613154582000000000	ApolloClient__Cache_InMemory_InMemoryCache.cmi	d1704d161f1b483a
+356	376	1613154582000000000	ApolloClient__Cache_InMemory_InMemoryCache.cmj	ab42b045736cf3f0
+357	378	1613154582000000000	ApolloClient__Cache_InMemory_InMemoryCache.cmt	f3b895aa33ab3401
+360	380	1613154582000000000	ApolloClient__Cache_InMemory_InMemoryCache.res	d61395db3f45ae8f
+365	387	1613154582000000000	ApolloClient__Cache_InMemory_Policies_FieldPolicy.cmi	11890fc8e46effa4
+369	390	1613154582000000000	ApolloClient__Cache_InMemory_Policies_FieldPolicy.cmj	bb49ee8da55ae787
+371	392	1613154582000000000	ApolloClient__Cache_InMemory_Policies_FieldPolicy.cmt	c74b6e12d463cd7d
+376	394	1613154582000000000	ApolloClient__Cache_InMemory_Policies_FieldPolicy.res	1ebfaef4480e4a58
+378	396	1613154582000000000	ApolloClient__Cache_Core.cmi	30bc0bdb08df7f83
+380	398	1613154582000000000	ApolloClient__Cache_Core.cmj	87de70dfc70c415
+387	403	1613154582000000000	ApolloClient__Cache_Core.cmt	6e1c261d59f1a0c1
+390	406	1613154582000000000	ApolloClient__Cache_Core.res	76acf62e1a817ec0
+392	408	1613154582000000000	ApolloClient__Cache_Core_Cache.cmi	793c73478f50fc4
+394	414	1613154582000000000	ApolloClient__Cache_Core_Cache.cmj	dba5eb2b9ff9232a
+396	419	1613154582000000000	ApolloClient__Cache_Core_Cache.cmt	364c616dedbe5a5c
+398	420	1613154582000000000	ApolloClient__Cache_Core_Cache.res	ea0308859ae798bb
+403	424	1613154582000000000	ApolloClient__Cache_Core_Types.cmi	552c84e6db85bc52
+406	426	1613154582000000000	ApolloClient__Cache_Core_Types.cmj	de0f7ef990afdd9b
+412	427	1613154582000000000	ApolloClient__Cache_Core_Types.cmt	33cab01eb0646dd6
+414	429	1613154582000000000	ApolloClient__Cache_Core_Types.res	3e407d76e12a366b
+419	435	1613154582000000000	ApolloClient__Cache_Core_Types_Common.cmi	7f4030dbb49b58e1
+422	437	1613154582000000000	ApolloClient__Cache_Core_Types_Common.cmj	958aac79de9a5f47
+425	439	1613154582000000000	ApolloClient__Cache_Core_Types_Common.cmt	5938b67fc5017197
+426	441	1613154582000000000	ApolloClient__Cache_Core_Types_Common.res	aa8e8deb1e68b0
+427	444	1613154582000000000	ApolloClient__Cache_Core_Types_DataProxy.cmi	3c1e2d6bacdfd562
+429	455	1613154582000000000	ApolloClient__Cache_Core_Types_DataProxy.cmj	9ffa9c4899cfc860
+435	456	1613154582000000000	ApolloClient__Cache_Core_Types_DataProxy.cmt	8327282349910a5a
+437	458	1613154582000000000	ApolloClient__Cache_Core_Types_DataProxy.res	2ee6a21d5150665f
+439	460	1613154582000000000	ApolloClient__Utilities_Graphql_GetFromAst.cmt	ac8bfd816629c52a
+442	461	1613154582000000000	ApolloClient__Utilities_Graphql_GetFromAst.cmj	92d21e141acfa563
+444	466	1613154582000000000	ApolloClient__Utilities_Graphql_GetFromAst.res	25da5f11e3eeb0b7
+455	472	1613154582000000000	ApolloClient__Utilities_Graphql_StoreUtils.cmi	b96ea27a76216ff9
+456	473	1613154582000000000	ApolloClient__Utilities_Graphql_StoreUtils.cmj	f24b0c207a06edc5
+458	475	1613154582000000000	ApolloClient__Utilities_Graphql_StoreUtils.cmt	aeb56daf2d59aa4a
+460	478	1613154582000000000	ApolloClient__Utilities_Graphql_StoreUtils.res	e1e5e8355bb0ef33
+462	480	1613154582000000000	ApolloClient__React.cmi	3ed9eef3b33e55ef
+468	488	1613154582000000000	ApolloClient__React.cmj	c369a4beb0e9da8c
+473	490	1613154582000000000	ApolloClient__React.cmt	703e8262087a0548
+473	491	1613154582000000000	ApolloClient__React.res	855baadfaefb3d52
+475	493	1613154582000000000	ApolloClient__React_Types.cmi	36cc1b5e9efabb88
+478	498	1613154582000000000	ApolloClient__React_Types.cmj	becd31f92f68347
+480	501	1613154582000000000	ApolloClient__React_Types.cmt	819da55bc7075f2e
+488	505	1613154582000000000	ApolloClient__React_Types.res	1b745a4a44632583
+490	506	1613154582000000000	ApolloClient__React_Hooks.cmi	e96bc5b4409e455b
+491	510	1613154582000000000	ApolloClient__React_Hooks.cmj	1d7c64fb6fd8741d
+493	518	1613154582000000000	ApolloClient__React_Hooks.cmt	3471769c12f239e6
+498	522	1613154582000000000	ApolloClient__React_Hooks.res	5bdda5af4f52e150
+501	523	1613154582000000000	ApolloClient__React_Hooks_UseQuery.cmi	40798357947ce89b
+505	524	1613154582000000000	ApolloClient__React_Hooks_UseQuery.cmj	86978e96cc141f74
+506	525	1613154582000000000	ApolloClient__React_Hooks_UseQuery.cmt	28c5ab40ff6213d7
+514	533	1613154582000000000	ApolloClient__React_Hooks_UseQuery.res	5ee154c388791b53
+518	535	1613154582000000000	ApolloClient__React_Hooks_UseMutation.cmi	d25c76daf42d04f8
+522	537	1613154582000000000	ApolloClient__React_Hooks_UseMutation.cmj	66da5dcf377a531d
+523	539	1613154582000000000	ApolloClient__React_Hooks_UseMutation.cmt	e893f947040a5b20
+524	541	1613154582000000000	ApolloClient__React_Hooks_UseMutation.res	d2e462e9ce680da
+525	544	1613154582000000000	ApolloClient__React_Hooks_UseLazyQuery.cmi	e859f8d94422fc59
+533	555	1613154582000000000	ApolloClient__React_Hooks_UseLazyQuery.cmj	270dc881d5455f6d
+535	557	1613154582000000000	ApolloClient__React_Hooks_UseLazyQuery.cmt	6fde8a2312db875b
+539	559	1613154582000000000	ApolloClient__React_Hooks_UseApolloClient.cmi	2dd52d2ac95ec1b1
+541	560	1613154582000000000	ApolloClient__React_Hooks_UseApolloClient.cmj	aff609f103a2b2ae
+538	563	1613154582000000000	ApolloClient__React_Hooks_UseLazyQuery.res	e82a1a01c5a45787
+544	568	1613154582000000000	ApolloClient__React_Hooks_UseApolloClient.cmt	a6127ef8bf78a333
+556	572	1613154582000000000	ApolloClient__React_Hooks_UseApolloClient.res	bd10450528f712fb
+557	573	1613154582000000000	ApolloClient__React_Hooks_UseSubscription.cmi	fa8053ec5cde7e5
+559	575	1613154582000000000	ApolloClient__React_Hooks_UseSubscription.cmj	fe7103adfa5395e2
+560	578	1613154582000000000	ApolloClient__React_Hooks_UseSubscription.cmt	f8f2cb5a3266936e
+564	588	1613154582000000000	ApolloClient__React_Hooks_UseSubscription.res	f73797a7e9ef7931
+568	589	1613154582000000000	ApolloClient__React_Context.cmi	c52151ff8ed89c1c
+572	590	1613154582000000000	ApolloClient__React_Context.cmj	1ad50bd54dea7ebe
+573	592	1613154582000000000	ApolloClient__React_Context.cmt	cb9db0f1183888d5
+575	595	1613154582000000000	ApolloClient__React_Context.res	40d004e1c38e6900
+578	597	1613154582000000000	ApolloClient__React_Context_ApolloProvider.cmi	72181666a6acd59
+588	602	1613154582000000000	ApolloClient__React_Context_ApolloProvider.cmj	87f33a9cfad9b73b
+589	603	1613154582000000000	ApolloClient__React_Context_ApolloProvider.cmt	c364f9c66026e923
+590	606	1613154582000000000	ApolloClient__React_Context_ApolloProvider.res	e8b721189b0721e1
+592	608	1613154582000000000	ApolloClient__Link.cmi	fb5e0a20820b6b3c
+595	617	1613154582000000000	ApolloClient__Link.cmj	63521099dc8fd068
+597	621	1613154582000000000	ApolloClient__Link.cmt	4b3f3be7eeda0db2
+602	622	1613154582000000000	ApolloClient__Link.res	ff19004dad166cb5
+603	623	1613154582000000000	ApolloClient__Link_Ws.cmi	37b90dc7949ccfc3
+606	625	1613154582000000000	ApolloClient__Link_Ws.cmj	c2adfd238cb6460f
+608	628	1613154582000000000	ApolloClient__Link_Ws.cmt	3ced4e22016769c2
+617	634	1613154582000000000	ApolloClient__Link_Ws.res	8598e49f83b06723
+621	636	1613154582000000000	ApolloClient__Link_Utils.cmi	a2c709f3bb5c6452
+622	638	1613154582000000000	ApolloClient__Link_Utils.cmj	a9cb78d42a10a9b
+623	641	1613154582000000000	ApolloClient__Link_Utils.cmt	773e62e010d1336e
+625	643	1613154582000000000	ApolloClient__Link_Utils.res	cd6414b70195348b
+628	649	1613154582000000000	ApolloClient__Link_Utils_ThrowServerError.cmi	cf0d67c6e431d67f
+634	653	1613154582000000000	ApolloClient__Link_Utils_ThrowServerError.cmj	242394aafca39e65
+636	655	1613154582000000000	ApolloClient__Link_Utils_ThrowServerError.cmt	ee5cbc0ffd864a37
+639	657	1613154582000000000	ApolloClient__Link_Utils_ThrowServerError.res	166dad6987d1ab91
+641	660	1613154582000000000	ApolloClient__Link_Http.cmi	b7277b0f5ee22bfc
+643	664	1613154582000000000	ApolloClient__Link_Http.cmj	9e494e7df035358e
+649	668	1613154582000000000	ApolloClient__Link_Http.cmt	db760310b6068fb2
+653	671	1613154582000000000	ApolloClient__Link_Http.res	2530e17522edb9a
+655	674	1613154582000000000	ApolloClient__Link_Http_HttpLink.cmi	92639b4c93ea1eee
+657	677	1613154582000000000	ApolloClient__Link_Http_HttpLink.cmj	c3ae2719ac9b4f87
+660	678	1613154582000000000	ApolloClient__Link_Http_HttpLink.cmt	fb764c5f4d4875cb
+665	680	1613154582000000000	ApolloClient__Link_Http_HttpLink.res	d3d11390bc19c950
+668	689	1613154582000000000	ApolloClient__Link_Http_CreateHttpLink.cmi	149cca5ce6ace069
+671	690	1613154582000000000	ApolloClient__Link_Http_CreateHttpLink.cmj	95451255d79490bb
+674	691	1613154582000000000	ApolloClient__Link_Http_CreateHttpLink.cmt	56c5d1ec45e26f05
+677	693	1613154582000000000	ApolloClient__Link_Http_CreateHttpLink.res	a310d991b2ae71df
+679	696	1613154582000000000	ApolloClient__Link_Http_SelectHttpOptionsAndBody.cmi	3cc80e4429bdd8a
+680	702	1613154582000000000	ApolloClient__Link_Http_SelectHttpOptionsAndBody.cmj	e3ea1903d768edaa
+689	704	1613154582000000000	ApolloClient__Link_Http_SelectHttpOptionsAndBody.cmt	8909afacf1e436e3
+690	707	1613154582000000000	ApolloClient__Link_Http_SelectHttpOptionsAndBody.res	74013741ac2d398a
+691	712	1613154582000000000	ApolloClient__Link_Http_ParseAndCheckHttpResponse.cmi	62304d15b4a6d74b
+693	716	1613154582000000000	ApolloClient__Link_Http_ParseAndCheckHttpResponse.cmj	9c6d8427bcc777c8
+696	722	1613154582000000000	ApolloClient__Link_Http_ParseAndCheckHttpResponse.cmt	9b06e1f575523889
+702	723	1613154582000000000	ApolloClient__Link_Http_ParseAndCheckHttpResponse.res	87a2b3751b376ced
+705	724	1613154582000000000	ApolloClient__Link_Error.cmi	6f00b1eb0fbb05f7
+708	726	1613154582000000000	ApolloClient__Link_Error.cmj	d1918e0172448126
+712	731	1613154582000000000	ApolloClient__Link_Error.cmt	f4cc3cac3ed8418e
+717	734	1613154582000000000	ApolloClient__Link_Error.res	50e80fdb5511e774
+722	736	1613154582000000000	ApolloClient__Link_Core.cmi	1b5d037d43a6f52a
+723	739	1613154582000000000	ApolloClient__Link_Core.cmj	bfa2cef6a4b504e3
+724	742	1613154582000000000	ApolloClient__Link_Core.cmt	bcb7af39aec6bc33
+727	746	1613154582000000000	ApolloClient__Link_Core.res	532a17a5578feedf
+732	748	1613154582000000000	ApolloClient__Link_Core_Types.cmi	3c153e0ea35a1244
+734	756	1613154582000000000	ApolloClient__Link_Core_Types.cmj	a51736338343b2b4
+736	758	1613154582000000000	ApolloClient__Link_Core_Types.cmt	74210c1cbf9e47f0
+740	759	1613154582000000000	ApolloClient__Link_Core_Types.res	819a2db43bdedbfe
+742	763	1613154582000000000	ApolloClient__Link_Core_ApolloLink.cmi	95bfbd32a9b4eb7a
+746	767	1613154582000000000	ApolloClient__Link_Core_ApolloLink.cmj	ef2a5ae4c3fa6b43
+749	769	1613154582000000000	ApolloClient__Link_Core_ApolloLink.cmt	700999f4dc4425c9
+756	774	1613154582000000000	ApolloClient__Link_Core_ApolloLink.res	ee71409cf325d848
+758	776	1613154582000000000	ApolloClient__Link_Context.cmi	704ab02e3738e513
+759	777	1613154582000000000	ApolloClient__Link_Context.cmj	f029cd2ef042d385
+763	778	1613154582000000000	ApolloClient__Link_Context.cmt	3a36e22932f80ad3
+768	789	1613154582000000000	ApolloClient__Link_Context.res	28e965ecb45512f3
+769	790	1613154582000000000	ApolloClient__Errors.cmi	d479ad6aef5bf82a
+774	791	1613154582000000000	ApolloClient__Errors.cmj	7acf76d26c13797b
+776	793	1613154582000000000	ApolloClient__Errors.cmt	42866d8105bc07f0
+777	797	1613154582000000000	ApolloClient__Errors.res	56392d89aa3ca084
+778	802	1613154582000000000	ApolloClient__Errors_ApolloError.cmi	5b282c33758c17b8
+789	804	1613154582000000000	ApolloClient__Errors_ApolloError.cmj	241f9dc0f5c0b8ab
+790	808	1613154582000000000	ApolloClient__Errors_ApolloError.cmt	965a5cad5fff3650
+792	811	1613154582000000000	ApolloClient__Errors_ApolloError.res	34b92cf347f10f8c
+793	815	1613154582000000000	ApolloClient__Core.cmi	629c921ed293f674
+797	822	1613154582000000000	ApolloClient__Core.cmj	acd2c295ca9d5060
+802	824	1613154582000000000	ApolloClient__Core.cmt	af341491473ea1d3
+806	825	1613154582000000000	ApolloClient__Core.res	a92db542ffe15c70
+808	826	1613154582000000000	ApolloClient__Core_Types.cmi	c27e00767554a925
+811	830	1613154582000000000	ApolloClient__Core_Types.cmj	5af16a1d803c7eaf
+817	836	1613154582000000000	ApolloClient__Core_Types.cmt	369e160dc7fb29a1
+822	839	1613154582000000000	ApolloClient__Core_Types.res	9b7af56dc346b0e2
+824	840	1613154582000000000	ApolloClient__Core_LocalState.cmi	b54b5a362c97baff
+825	843	1613154582000000000	ApolloClient__Core_LocalState.cmj	63adc6e0c909d99c
+827	845	1613154582000000000	ApolloClient__Core_LocalState.cmt	bc1c70ba6a577e03
+831	855	1613154582000000000	ApolloClient__Core_LocalState.res	b05fd36882363978
+836	857	1613154582000000000	ApolloClient__Core_ApolloClient.cmi	5c577940be217528
+839	858	1613154582000000000	ApolloClient__Core_ApolloClient.cmj	797e1354463dced2
+841	860	1613154582000000000	ApolloClient__Core_ApolloClient.cmt	1a747fc6d8415516
+844	863	1613154582000000000	ApolloClient__Core_ApolloClient.res	356b687f8970fb76
+845	869	1613154582000000000	ApolloClient__Core_NetworkStatus.cmi	bdc4ac9f858f393c
+855	872	1613154582000000000	ApolloClient__Core_NetworkStatus.cmj	75ce4137e9903953
+857	875	1613154582000000000	ApolloClient__Core_NetworkStatus.cmt	dc69ac1625658cf
+858	877	1613154582000000000	ApolloClient__Core_NetworkStatus.res	ecfd20ad55b92a42
+860	879	1613154582000000000	ApolloClient__Core_ObservableQuery.cmi	38f4912f319816db
+863	882	1613154582000000000	ApolloClient__Core_ObservableQuery.cmj	d6f5bde789bcb902
+869	888	1613154582000000000	ApolloClient__Core_ObservableQuery.cmt	c1de18af699b390b
+872	890	1613154582000000000	ApolloClient__Core_ObservableQuery.res	909d6331e07ffe2f
+875	892	1613154582000000000	ApolloClient__Core_WatchQueryOptions.cmi	fd4fecaa8e2fbdbb
+877	896	1613154582000000000	ApolloClient__Core_WatchQueryOptions.cmj	ec52f28645c76139
+879	898	1613154582000000000	ApolloClient__Core_WatchQueryOptions.cmt	9dbdd879e019167c
+882	903	1613154582000000000	ApolloClient__Core_WatchQueryOptions.res	a0c5b043e150eaf2
+889	905	1613154582000000000	ApolloClient__Cache.cmi	c7b29f4ffaa93a62
+890	908	1613154582000000000	ApolloClient__Cache.cmj	9de12ecd927e322f
+894	912	1613154582000000000	ApolloClient__Cache.cmt	5a543a60fbdc01b9
+896	918	1613154582000000000	ApolloClient__Cache.res	b8a807edeeec3058
+898	919	1613154582000000000	ApolloClient__Cache_InMemory.cmi	e7a69a29f141a6a0
+904	919	1613154582000000000	ApolloClient__Cache_InMemory.cmj	fb7276c002dca744
+905	921	1613154582000000000	ApolloClient__Cache_InMemory.cmt	3639acaaaef8b4d8
+909	924	1613154582000000000	ApolloClient__Cache_InMemory.res	327ed73eb932f03a
+914	926	1613154582000000000	ApolloClient__Cache_InMemory_Policies.cmi	d4fe3aea3317367b
+926	931	1613154582000000000	install.stamp	cff5a5b4c02d30cf
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient.cmi
new file mode 100644
index 0000000..b4fc7e4
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient.cmj
new file mode 100644
index 0000000..1b38476
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient.cmt
new file mode 100644
index 0000000..e583fe6
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient.res
new file mode 100644
index 0000000..d9467db
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient.res
@@ -0,0 +1,2 @@
+//  We provide this file as a convenience but the main module is namespaced so you can do what you want
+include ReasonMLCommunity__ApolloClient
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache.cmi
new file mode 100644
index 0000000..08b74f4
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache.cmj
new file mode 100644
index 0000000..e77dc7c
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache.cmt
new file mode 100644
index 0000000..0e238ed
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache.res
new file mode 100644
index 0000000..828f82f
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache.res
@@ -0,0 +1,2 @@
+module Core = ApolloClient__Cache_Core
+module InMemory = ApolloClient__Cache_InMemory
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core.cmi
new file mode 100644
index 0000000..04b5cb8
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core.cmj
new file mode 100644
index 0000000..22ee44c
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core.cmt
new file mode 100644
index 0000000..08e11a0
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core.res
new file mode 100644
index 0000000..362728a
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core.res
@@ -0,0 +1,2 @@
+module Cache = ApolloClient__Cache_Core_Cache
+module Types = ApolloClient__Cache_Core_Types
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core_Cache.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core_Cache.cmi
new file mode 100644
index 0000000..9d5586a
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core_Cache.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core_Cache.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core_Cache.cmj
new file mode 100644
index 0000000..fe16f17
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core_Cache.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core_Cache.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core_Cache.cmt
new file mode 100644
index 0000000..769d221
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core_Cache.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core_Cache.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core_Cache.res
new file mode 100644
index 0000000..d69a07e
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core_Cache.res
@@ -0,0 +1,227 @@
+module DataProxy = ApolloClient__Cache_Core_Types.DataProxy
+module Types = ApolloClient__Types
+module Utils = ApolloClient__Utils
+
+module type Fragment = Types.Fragment
+module type Operation = Types.Operation
+module type OperationNoRequiredVars = Types.OperationNoRequiredVars
+
+module ApolloCache = {
+  module Js_ = {
+    // export declare abstract class ApolloCache<TSerialized> implements DataProxy {
+    //     abstract read<T, TVariables = any>(query: Cache.ReadOptions<TVariables>): T | null;
+    //     abstract write<TResult = any, TVariables = any>(write: Cache.WriteOptions<TResult, TVariables>): Reference | undefined;
+    //     abstract diff<T>(query: Cache.DiffOptions): Cache.DiffResult<T>;
+    //     abstract watch(watch: Cache.WatchOptions): () => void;
+    //     abstract reset(): Promise<void>;
+    //     abstract evict(options: Cache.EvictOptions): boolean;
+    //     abstract restore(serializedState: TSerialized): ApolloCache<TSerialized>;
+    //     abstract extract(optimistic?: boolean): TSerialized;
+    //     abstract removeOptimistic(id: string): void;
+    //     abstract performTransaction(transaction: Transaction<TSerialized>, optimisticId?: string | null): void;
+    //     recordOptimisticTransaction(transaction: Transaction<TSerialized>, optimisticId: string): void;
+    //     transformDocument(document: DocumentNode): DocumentNode;
+    //     identify(object: StoreObject | Reference): string | undefined;
+    //     gc(): string[];
+    //     modify(options: Cache.ModifyOptions): boolean;
+    //     transformForLink(document: DocumentNode): DocumentNode;
+    //     readQuery<QueryType, TVariables = any>(options: DataProxy.Query<TVariables>, optimistic?: boolean): QueryType | null;
+    //     private getFragmentDoc;
+    //     readFragment<FragmentType, TVariables = any>(options: DataProxy.Fragment<TVariables>, optimistic?: boolean): FragmentType | null;
+    //     writeQuery<TData = any, TVariables = any>(options: Cache.WriteQueryOptions<TData, TVariables>): Reference | undefined;
+    //     writeFragment<TData = any, TVariables = any>(options: Cache.WriteFragmentOptions<TData, TVariables>): Reference | undefined;
+    // }
+    type t<'tSerialized>
+
+    type reference
+
+    // readFragment<FragmentType, TVariables = any>(options: DataProxy.Fragment<TVariables>, optimistic?: boolean): FragmentType | null;
+    @bs.send
+    external readFragment: (
+      t<'tSerialized>,
+      ~options: DataProxy.Fragment.Js_.t,
+      ~optimistic: bool=?,
+      unit,
+    ) => Js.nullable<'jsData> = "readFragment"
+
+    // readQuery<QueryType, TVariables = any>(options: DataProxy.Query<TVariables>, optimistic?: boolean): QueryType | null;
+    @bs.send
+    external readQuery: (
+      t<'tSerialized>,
+      ~options: DataProxy.Query.Js_.t<'jsVariables>,
+      ~optimistic: option<bool>,
+    ) => Js.nullable<'jsData> = "readQuery"
+
+    // writeFragment<TData = any, TVariables = any>(options: Cache.WriteFragmentOptions<TData, TVariables>): Reference | undefined;
+    @bs.send
+    external writeFragment: (
+      t<'tSerialized>,
+      ~options: DataProxy.WriteFragmentOptions.Js_.t<'jsData, 'jsVariables>,
+    ) => option<reference> = "writeFragment"
+
+    // writeQuery<TData = any, TVariables = any>(options: Cache.WriteQueryOptions<TData, TVariables>): Reference | undefined;
+    @bs.send
+    external writeQuery: (
+      t<'tSerialized>,
+      ~options: DataProxy.WriteQueryOptions.Js_.t<'jsData, 'jsVariables>,
+    ) => option<reference> = "writeQuery"
+  }
+
+  type reference = Js_.reference
+
+  type t<'tSerialized> = {
+    @bs.as("rescript_readFragment")
+    readFragment: 'data. (
+      ~fragment: module(Fragment with type t = 'data),
+      ~id: string,
+      ~optimistic: bool=?,
+      ~fragmentName: string=?,
+      unit,
+    ) => option<Types.parseResult<'data>>,
+    @bs.as("rescript_readQuery")
+    readQuery: 'data 'variables 'jsVariables. (
+      ~query: module(Operation with
+        type t = 'data
+        and type t_variables = 'variables
+        and type Raw.t_variables = 'jsVariables
+      ),
+      ~id: string=?,
+      ~mapJsVariables: 'jsVariables => 'jsVariables=?,
+      ~optimistic: bool=?,
+      'variables,
+    ) => option<Types.parseResult<'data>>,
+    @bs.as("rescript_writeFragment")
+    writeFragment: 'data. (
+      ~fragment: module(Fragment with type t = 'data),
+      ~data: 'data,
+      ~broadcast: bool=?,
+      ~id: string,
+      ~fragmentName: string=?,
+      unit,
+    ) => option<reference>,
+    @bs.as("rescript_writeQuery")
+    writeQuery: 'data 'variables 'jsVariables. (
+      ~query: module(Operation with
+        type t = 'data
+        and type t_variables = 'variables
+        and type Raw.t_variables = 'jsVariables
+      ),
+      ~broadcast: bool=?,
+      ~data: 'data,
+      ~id: string=?,
+      ~mapJsVariables: 'jsVariables => 'jsVariables=?,
+      'variables,
+    ) => option<reference>,
+  }
+
+  let preserveJsPropsAndContext: (Js_.t<'a>, t<'a>) => t<'a> = (js, t) =>
+    %bs.raw(`
+          function (js, t) {
+            return Object.assign(js, t)
+          }
+        `)(js, t)
+
+  let fromJs: Js_.t<'serialized> => t<'serialized> = js => {
+    let readFragment = (
+      type data,
+      ~fragment as module(Fragment: Fragment with type t = data),
+      ~id,
+      ~optimistic=?,
+      ~fragmentName=?,
+      (),
+    ) => {
+      let safeParse = Utils.safeParse(Fragment.parse)
+
+      js
+      ->Js_.readFragment(
+        ~options={id: id, fragment: Fragment.query, fragmentName: fragmentName},
+        ~optimistic?,
+        (),
+      )
+      ->Js.toOption
+      ->Belt.Option.map(safeParse)
+    }
+
+    let readQuery = (
+      type data variables jsVariables,
+      ~query as module(Operation: Operation with
+        type t = data
+        and type t_variables = variables
+        and type Raw.t_variables = jsVariables
+      ),
+      ~id=?,
+      ~mapJsVariables=Utils.identity,
+      ~optimistic=?,
+      variables,
+    ) => {
+      let safeParse = Utils.safeParse(Operation.parse)
+
+      js
+      ->Js_.readQuery(
+        ~options=DataProxy.Query.toJs(
+          {id: id, query: Operation.query, variables: variables},
+          ~mapJsVariables,
+          ~serializeVariables=Operation.serializeVariables,
+        ),
+        ~optimistic,
+      )
+      ->Js.toOption
+      ->Belt.Option.map(safeParse)
+    }
+
+    let writeFragment = (
+      type data,
+      ~fragment as module(Fragment: Fragment with type t = data),
+      ~data: data,
+      ~broadcast=?,
+      ~id,
+      ~fragmentName=?,
+      // variables,
+      (),
+    ) =>
+      js->Js_.writeFragment(
+        ~options=DataProxy.WriteFragmentOptions.toJs(
+          {
+            broadcast: broadcast,
+            data: data,
+            id: id,
+            fragment: Fragment.query,
+            fragmentName: fragmentName,
+          },
+          ~serialize=Fragment.serialize,
+        ),
+      )
+
+    let writeQuery = (
+      type data variables jsVariables,
+      ~query as module(Operation: Operation with
+        type t = data
+        and type t_variables = variables
+        and type Raw.t_variables = jsVariables
+      ),
+      ~broadcast=?,
+      ~data,
+      ~id=?,
+      ~mapJsVariables=Utils.identity,
+      variables,
+    ) =>
+      js->Js_.writeQuery(
+        ~options=DataProxy.WriteQueryOptions.toJs(
+          {broadcast: broadcast, data: data, id: id, query: Operation.query, variables: variables},
+          ~mapJsVariables,
+          ~serialize=Operation.serialize,
+          ~serializeVariables=Operation.serializeVariables,
+        ),
+      )
+
+    preserveJsPropsAndContext(
+      js,
+      {
+        readFragment: readFragment,
+        readQuery: readQuery,
+        writeFragment: writeFragment,
+        writeQuery: writeQuery,
+      },
+    )
+  }
+}
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core_Types.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core_Types.cmi
new file mode 100644
index 0000000..1455ff1
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core_Types.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core_Types.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core_Types.cmj
new file mode 100644
index 0000000..08ca6cf
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core_Types.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core_Types.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core_Types.cmt
new file mode 100644
index 0000000..1a00944
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core_Types.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core_Types.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core_Types.res
new file mode 100644
index 0000000..5f71367
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core_Types.res
@@ -0,0 +1,2 @@
+module DataProxy = ApolloClient__Cache_Core_Types_DataProxy
+module Common = ApolloClient__Cache_Core_Types_Common
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core_Types_Common.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core_Types_Common.cmi
new file mode 100644
index 0000000..cc33070
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core_Types_Common.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core_Types_Common.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core_Types_Common.cmj
new file mode 100644
index 0000000..79324a4
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core_Types_Common.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core_Types_Common.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core_Types_Common.cmt
new file mode 100644
index 0000000..6507ffa
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core_Types_Common.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core_Types_Common.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core_Types_Common.res
new file mode 100644
index 0000000..518eafe
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core_Types_Common.res
@@ -0,0 +1,28 @@
+module StoreValue = ApolloClient__Utilities_Graphql_StoreUtils.StoreValue
+
+module CanReadFunction = {
+  type t = StoreValue.Js_.t => bool
+  module Js_ = {
+    // export declare type CanReadFunction = (value: StoreValue) => boolean;
+    type t = t
+  }
+}
+
+module ReadFieldFunction = {
+  type t
+  module Js_ = {
+    // export interface ReadFieldFunction {
+    //     <V = StoreValue>(options: ReadFieldOptions): SafeReadonly<V> | undefined;
+    //     <V = StoreValue>(fieldName: string, from?: StoreObject | Reference): SafeReadonly<V> | undefined;
+    // }
+    type t = t // Please contribute if you need this!
+  }
+}
+
+module ToReferenceFunction = {
+  type t
+  module Js_ = {
+    // export declare type ToReferenceFunction = (objOrIdOrRef: StoreObject | string | Reference, mergeIntoStore?: boolean) => Reference | undefined;
+    type t = t // Please contribute if you need this!
+  }
+}
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core_Types_DataProxy.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core_Types_DataProxy.cmi
new file mode 100644
index 0000000..76f0a39
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core_Types_DataProxy.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core_Types_DataProxy.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core_Types_DataProxy.cmj
new file mode 100644
index 0000000..075b68c
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core_Types_DataProxy.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core_Types_DataProxy.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core_Types_DataProxy.cmt
new file mode 100644
index 0000000..d84e52d
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core_Types_DataProxy.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core_Types_DataProxy.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core_Types_DataProxy.res
new file mode 100644
index 0000000..ae6f7d8
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_Core_Types_DataProxy.res
@@ -0,0 +1,143 @@
+module Graphql = ApolloClient__Graphql
+module Utils = ApolloClient__Utils
+
+module Query = {
+  module Js_ = {
+    // interface Query<TVariables> {
+    //   query: DocumentNode;
+    //   variables?: TVariables;
+    //   id?: string;
+    // }
+    type t<'jsVariables> = {
+      query: Graphql.documentNode,
+      // We don't allow optional variables because it's not typesafe
+      variables: 'jsVariables,
+      id: option<string>,
+    }
+  }
+
+  type t<'jsVariables> = Js_.t<'jsVariables>
+
+  let toJs: (
+    t<'variables>,
+    ~mapJsVariables: 'jsVariables => 'jsVariables=?,
+    ~serializeVariables: 'variables => 'jsVariables,
+  ) => Js_.t<'jsVariables> = (t, ~mapJsVariables=Utils.identity, ~serializeVariables) => {
+    query: t.query,
+    variables: t.variables->serializeVariables->mapJsVariables,
+    id: t.id,
+  }
+}
+
+module Fragment = {
+  module Js_ = {
+    // interface Fragment<TVariables> {
+    //   id: string;
+    //   fragment: DocumentNode;
+    //   fragmentName?: string;
+    //   variables?: TVariables;
+    // }
+    type t = {
+      id: string,
+      fragment: Graphql.documentNode,
+      // We don't allow optional variables because it's not typesafe
+      // variables: 'jsVariables,
+      fragmentName: option<string>,
+    }
+  }
+
+  type t = Js_.t = {
+    id: string,
+    fragment: Graphql.documentNode,
+    // We don't allow optional variables because it's not typesafe
+    // variables: 'jsVariables,
+    fragmentName: option<string>,
+  }
+}
+
+module WriteQueryOptions = {
+  module Js_ = {
+    // interface WriteQueryOptions<TData, TVariables> extends Query<TVariables> {
+    //   data: TData;
+    //   broadcast?: boolean;
+    // }
+    type t<'jsData, 'jsVariables> = {
+      data: 'jsData,
+      broadcast: option<bool>,
+      // ...extends Query
+      query: Graphql.documentNode,
+      // We don't allow optional variables because it's not typesafe
+      variables: 'jsVariables,
+      id: option<string>,
+    }
+  }
+
+  type t<'data, 'variables> = {
+    data: 'data,
+    broadcast: option<bool>,
+    query: Graphql.documentNode,
+    variables: 'variables,
+    id: option<string>,
+  }
+
+  let toJs: (
+    t<'data, 'variables>,
+    ~mapJsVariables: 'jsVariables => 'jsVariables=?,
+    ~serialize: 'data => 'jsData,
+    ~serializeVariables: 'variables => 'jsVariables,
+  ) => Js_.t<'jsData, 'jsVariables> = (
+    t,
+    ~mapJsVariables=Utils.identity,
+    ~serialize,
+    ~serializeVariables,
+  ) => {
+    data: t.data->serialize,
+    broadcast: t.broadcast,
+    query: t.query,
+    variables: t.variables->serializeVariables->mapJsVariables,
+    id: t.id,
+  }
+}
+
+module WriteFragmentOptions = {
+  module Js_ = {
+    // interface WriteFragmentOptions<TData, TVariables> extends Fragment<TVariables> {
+    //    data: TData;
+    //    broadcast?: boolean;
+    // }
+    type t<'jsData, 'jsVariables> = {
+      data: 'jsData,
+      broadcast: option<bool>,
+      // ...extends Fragment
+      id: string,
+      fragment: Graphql.documentNode,
+      fragmentName: option<string>,
+      // I think fragment variables are still experimental?
+      // // We don't allow optional variables because it's not typesafe
+      // variables: 'jsVariables,
+    }
+  }
+
+  type t<'data, 'variables> = {
+    data: 'data,
+    broadcast: option<bool>,
+    id: string,
+    fragment: Graphql.documentNode,
+    fragmentName: option<string>,
+    // variables: 'variables,
+  }
+
+  let toJs: (
+    t<'data, 'variables>,
+    ~serialize: // ~mapJsVariables: 'jsVariables => 'jsVariables=?,
+    'data => 'jsData,
+  ) => // ~serializeVariables: 'variables => 'jsVariables
+  Js_.t<'jsData, 'jsVariables> = (t, ~serialize) => {
+    data: t.data->serialize,
+    broadcast: t.broadcast,
+    id: t.id,
+    fragment: t.fragment,
+    fragmentName: t.fragmentName,
+    // variables: t.variables->serializeVariables->mapJsVariables,
+  }
+}
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory.cmi
new file mode 100644
index 0000000..6014b9c
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory.cmj
new file mode 100644
index 0000000..16d88b7
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory.cmt
new file mode 100644
index 0000000..b1beb94
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory.res
new file mode 100644
index 0000000..3414663
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory.res
@@ -0,0 +1,2 @@
+module InMemoryCache = ApolloClient__Cache_InMemory_InMemoryCache
+module Policies = ApolloClient__Cache_InMemory_Policies
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory_InMemoryCache.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory_InMemoryCache.cmi
new file mode 100644
index 0000000..9977045
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory_InMemoryCache.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory_InMemoryCache.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory_InMemoryCache.cmj
new file mode 100644
index 0000000..df27b69
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory_InMemoryCache.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory_InMemoryCache.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory_InMemoryCache.cmt
new file mode 100644
index 0000000..9a65230
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory_InMemoryCache.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory_InMemoryCache.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory_InMemoryCache.res
new file mode 100644
index 0000000..220fa90
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory_InMemoryCache.res
@@ -0,0 +1,100 @@
+module ApolloCache = ApolloClient__Cache_Core_Cache.ApolloCache
+module KeyFieldsFunction = ApolloClient__Cache_InMemory_Policies.KeyFieldsFunction
+module PossibleTypesMap = ApolloClient__Cache_InMemory_Policies.PossibleTypesMap
+module TypePolicy = ApolloClient__Cache_InMemory_Policies.TypePolicy
+module TypePolicies = ApolloClient__Cache_InMemory_Policies.TypePolicies
+
+module InMemoryCacheConfig = {
+  module Js_ = {
+    // export interface InMemoryCacheConfig extends ApolloReducerConfig {
+    //     resultCaching?: boolean;
+    //     possibleTypes?: PossibleTypesMap;
+    //     typePolicies?: TypePolicies;
+    // }
+    // NOTE: Using deriving abstract here because passing properties that are undefined has effects
+    @bs.deriving(abstract)
+    type t = {
+      @bs.optional
+      resultCaching: bool,
+      @bs.optional
+      possibleTypes: PossibleTypesMap.Js_.t,
+      @bs.optional
+      typePolicies: TypePolicies.Js_.t,
+      // ...extends ApolloReducerConfig
+      @bs.optional
+      dataIdFromObject: KeyFieldsFunction.Js_.t,
+      @bs.optional
+      addTypename: bool,
+    }
+  }
+  type t = Js_.t
+  let make = Js_.t
+}
+
+module Js_ = {
+  // export declare class InMemoryCache extends ApolloCache<NormalizedCacheObject> {
+  //     private data;
+  //     private optimisticData;
+  //     protected config: InMemoryCacheConfig;
+  //     private watches;
+  //     private addTypename;
+  //     private typenameDocumentCache;
+  //     private storeReader;
+  //     private storeWriter;
+  //     readonly policies: Policies;
+  //     constructor(config?: InMemoryCacheConfig);
+  //     restore(data: NormalizedCacheObject): this;
+  //     extract(optimistic?: boolean): NormalizedCacheObject;
+  //     read<T>(options: Cache.ReadOptions): T | null;
+  //     write(options: Cache.WriteOptions): void;
+  //     diff<T>(options: Cache.DiffOptions): Cache.DiffResult<T>;
+  //     watch(watch: Cache.WatchOptions): () => void;
+  //     gc(): string[];
+  //     retain(rootId: string, optimistic?: boolean): number;
+  //     release(rootId: string, optimistic?: boolean): number;
+  //     identify(object: StoreObject): string | undefined;
+  //     evict(idOrOptions: string | Cache.EvictOptions, fieldName?: string, args?: Record<string, any>): boolean;
+  //     reset(): Promise<void>;
+  //     removeOptimistic(idToRemove: string): void;
+  //     private txCount;
+  //     performTransaction(transaction: (cache: InMemoryCache) => any, optimisticId?: string): void;
+  //     recordOptimisticTransaction(transaction: Transaction<NormalizedCacheObject>, id: string): void;
+  //     transformDocument(document: DocumentNode): DocumentNode;
+  //     protected broadcastWatches(): void;
+  //     private maybeBroadcastWatch;
+  //     private varDep;
+  //     makeVar<T>(value: T): ReactiveVar<T>;
+  // }
+  type t = ApolloCache.Js_.t<Js.Json.t>
+
+  @bs.module("@apollo/client") @bs.new
+  external make: InMemoryCacheConfig.Js_.t => t = "InMemoryCache"
+}
+
+type t = ApolloCache.t<Js.Json.t>
+
+let make: (
+  ~addTypename: bool=?,
+  ~dataIdFromObject: KeyFieldsFunction.t=?,
+  ~possibleTypes: PossibleTypesMap.t=?,
+  ~resultCaching: bool=?,
+  ~typePolicies: TypePolicies.t=?,
+  unit,
+) => t = (
+  ~addTypename=?,
+  ~dataIdFromObject=?,
+  ~possibleTypes=?,
+  ~resultCaching=?,
+  ~typePolicies=?,
+  (),
+) =>
+  Js_.make(
+    InMemoryCacheConfig.make(
+      ~addTypename?,
+      ~dataIdFromObject?,
+      ~possibleTypes?,
+      ~resultCaching?,
+      ~typePolicies=?typePolicies->Belt.Option.map(TypePolicies.toJs),
+      (),
+    ),
+  )->ApolloCache.fromJs
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory_Policies.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory_Policies.cmi
new file mode 100644
index 0000000..7f6f6b7
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory_Policies.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory_Policies.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory_Policies.cmj
new file mode 100644
index 0000000..ceab3b5
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory_Policies.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory_Policies.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory_Policies.cmt
new file mode 100644
index 0000000..2154c41
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory_Policies.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory_Policies.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory_Policies.res
new file mode 100644
index 0000000..cd69aea
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory_Policies.res
@@ -0,0 +1,161 @@
+module FragmentMap = ApolloClient__Utilities_Graphql_Fragments.FragmentMap
+module FieldPolicy = ApolloClient__Cache_InMemory_Policies_FieldPolicy.FieldPolicy
+module FieldReadFunction = ApolloClient__Cache_InMemory_Policies_FieldPolicy.FieldReadFunction
+module FieldMergeFunction = ApolloClient__Cache_InMemory_Policies_FieldPolicy.FieldMergeFunction
+module KeyArgs = ApolloClient__Cache_InMemory_Policies_FieldPolicy.FieldPolicy_KeyArgs
+module KeySpecifier = ApolloClient__Cache_InMemory_Policies_FieldPolicy.KeySpecifier
+module Pagination = ApolloClient__Utilities_Policies_Pagination
+module SelectionSetNode = ApolloClient__Graphql.Language.Ast.SelectionSetNode
+
+module KeyFieldsContext = {
+  type t = {
+    typename: option<string>,
+    selectionSet: option<SelectionSetNode.t>,
+    fragment: option<FragmentMap.t>,
+    keyObject: option<Js.Json.t>,
+  }
+  module Js_ = {
+    // declare type KeyFieldsContext = {
+    //     typename?: string;
+    //     selectionSet?: SelectionSetNode;
+    //     fragmentMap?: FragmentMap;
+    //     keyObject?: Record<string, any>;
+    // };
+    type t = t = {
+      typename: option<string>,
+      selectionSet: option<SelectionSetNode.t>,
+      fragment: option<FragmentMap.Js_.t>,
+      keyObject: option<Js.Json.t>,
+    }
+  }
+}
+
+module KeyFieldsFunction = {
+  type t = (Js.Json.t, KeyFieldsContext.t) => string
+  module Js_ = {
+    // export declare type KeyFieldsFunction = (object: Readonly<StoreObject>, context: KeyFieldsContext) => KeySpecifier | ReturnType<IdGetter>;
+    type t = t
+  }
+}
+
+// export declare const defaultDataIdFromObject: KeyFieldsFunction;
+@bs.module("@apollo/client")
+external defaultDataIdFromObject: KeyFieldsFunction.t = "defaultDataIdFromObject"
+
+module TypePolicy = {
+  module Js_ = {
+    module FieldsUnion: {
+      type t
+      let fieldPolicy: FieldPolicy.Js_.t<'existing> => t
+      let fieldReadFunction: FieldReadFunction.Js_.t<'existing> => t
+    } = {
+      @unboxed
+      type rec t = Any('a): t
+      let fieldPolicy = (v: FieldPolicy.Js_.t<'existing>) => Any(v)
+      let fieldReadFunction = (v: FieldReadFunction.Js_.t<'existing>) => Any(v)
+    }
+
+    // export declare type TypePolicy = {
+    //     keyFields?: KeySpecifier | KeyFieldsFunction | false;
+    //     queryType?: true;
+    //     mutationType?: true;
+    //     subscriptionType?: true;
+    //     fields?: {
+    //         [fieldName: string]: FieldPolicy<any> | FieldReadFunction<any>;
+    //     };
+    // };
+    type t = {
+      keyFields: option<KeyArgs.Js_.t>,
+      queryType: option<bool>,
+      mutationType: option<bool>,
+      subscriptionType: option<bool>,
+      fields: option<Js.Dict.t<FieldsUnion.t>>,
+    }
+  }
+
+  type rec t_field =
+    | ConcatPagination(KeyArgs.t)
+    | OffsetLimitPagination(KeyArgs.t)
+    | RelayStylePagination(KeyArgs.t)
+    | FieldPolicy(FieldPolicy.t<'existing>): t_field
+    | FieldReadFunction(FieldReadFunction.t<'existing>): t_field
+
+  type fieldKey = string
+
+  type t_fields = array<(fieldKey, t_field)>
+
+  type t = {
+    keyFields: option<KeyArgs.t>,
+    queryType: option<bool>,
+    mutationType: option<bool>,
+    subscriptionType: option<bool>,
+    fields: option<t_fields>,
+  }
+
+  let toJs: (. t) => Js_.t = (. t) => {
+    keyFields: t.keyFields->Belt.Option.map(KeyArgs.toJs),
+    queryType: t.queryType,
+    mutationType: t.mutationType,
+    subscriptionType: t.subscriptionType,
+    fields: t.fields->Belt.Option.map(fields =>
+      fields
+      ->Belt.Array.map(((fieldKey, t_field)) => (
+        fieldKey,
+        switch t_field {
+        | ConcatPagination(keyArgs) =>
+          Pagination.concatPagination(keyArgs)->Js_.FieldsUnion.fieldPolicy
+        | OffsetLimitPagination(keyArgs) =>
+          Pagination.offsetLimitPagination(keyArgs)->Js_.FieldsUnion.fieldPolicy
+        | RelayStylePagination(keyArgs) =>
+          Pagination.relayStylePagination(keyArgs)->Js_.FieldsUnion.fieldPolicy
+
+        | FieldPolicy(fieldPolicy) => fieldPolicy->FieldPolicy.toJs->Js_.FieldsUnion.fieldPolicy
+        | FieldReadFunction(fieldReadFunction) =>
+          fieldReadFunction->FieldReadFunction.toJs->Js_.FieldsUnion.fieldReadFunction
+        },
+      ))
+      ->Js.Dict.fromArray
+    ),
+  }
+
+  let make: (
+    ~fields: t_fields=?,
+    ~keyFields: KeyArgs.t=?,
+    ~mutationType: bool=?,
+    ~queryType: bool=?,
+    ~subscriptionType: bool=?,
+    unit,
+  ) => t = (~fields=?, ~keyFields=?, ~mutationType=?, ~queryType=?, ~subscriptionType=?, ()) => {
+    fields: fields,
+    keyFields: keyFields,
+    mutationType: mutationType,
+    queryType: queryType,
+    subscriptionType: subscriptionType,
+  }
+}
+
+module TypePolicies = {
+  module Js_ = {
+    // export declare type TypePolicies = {
+    //     [__typename: string]: TypePolicy;
+    // };
+    type t = Js.Dict.t<TypePolicy.Js_.t>
+  }
+
+  type typename = string
+
+  type t = array<(typename, TypePolicy.t)>
+
+  let toJs: t => Js_.t = t =>
+    t->Belt.Array.map(((key, policy)) => (key, TypePolicy.toJs(. policy)))->Js.Dict.fromArray
+}
+
+module PossibleTypesMap = {
+  type t = Js.Dict.t<array<string>>
+  module Js_ = {
+    // export declare type PossibleTypesMap = {
+    //     [supertype: string]: string[];
+    // };
+    type t = t
+  }
+}
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory_Policies_FieldPolicy.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory_Policies_FieldPolicy.cmi
new file mode 100644
index 0000000..320e4f7
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory_Policies_FieldPolicy.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory_Policies_FieldPolicy.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory_Policies_FieldPolicy.cmj
new file mode 100644
index 0000000..954e60b
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory_Policies_FieldPolicy.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory_Policies_FieldPolicy.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory_Policies_FieldPolicy.cmt
new file mode 100644
index 0000000..fc53bda
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory_Policies_FieldPolicy.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory_Policies_FieldPolicy.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory_Policies_FieldPolicy.res
new file mode 100644
index 0000000..9f7f455
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory_Policies_FieldPolicy.res
@@ -0,0 +1,190 @@
+module ApolloCache = ApolloClient__Cache_Core_Cache.ApolloCache
+module CanReadFunction = ApolloClient__Cache_Core_Types_Common.CanReadFunction
+module FieldNode = ApolloClient__Graphql.Language.Ast.FieldNode
+module ReadFieldFunction = ApolloClient__Cache_Core_Types_Common.ReadFieldFunction
+module ToReferenceFunction = ApolloClient__Cache_Core_Types_Common.ToReferenceFunction
+
+module FieldMergeFunction = {
+  module Js_ = {
+    type t
+  }
+  type t = Js_.t
+}
+
+module StorageType = {
+  type t = Js.Dict.t<Js.Json.t>
+  module Js_ = {
+    type t = t
+  }
+}
+
+module FieldFunctionOptions = {
+  type unimplemented
+
+  module Js_ = {
+    // export interface FieldFunctionOptions<TArgs = Record<string, any>, TVars = Record<string, any>> {
+    //     args: TArgs | null;
+    //     fieldName: string;
+    //     storeFieldName: string;
+    //     field: FieldNode | null;
+    //     variables?: TVars;
+    //     isReference: typeof isReference;
+    //     toReference: ToReferenceFunction;
+    //     storage: StorageType | null;
+    //     cache: InMemoryCache;
+    //     readField: ReadFieldFunction;
+    //     canRead: CanReadFunction;
+    //     mergeObjects<T extends StoreObject | Reference>(existing: T, incoming: T): T | undefined;
+    // }
+    type t = {
+      args: Js.nullable<Js.Dict.t<Js.Json.t>>,
+      fieldName: string,
+      storeFieldName: string,
+      field: Js.nullable<FieldNode.t>,
+      variables: option<Js.Dict.t<Js.Json.t>>,
+      isReference: bool,
+      toReference: unimplemented,
+      readField: unimplemented,
+      canRead: unimplemented,
+      storage: Js.nullable<StorageType.Js_.t>,
+      cache: ApolloCache.t<Js.Json.t>, // Non-Js_ ApolloCache is correct here
+    }
+    @bs.send external canRead: t => CanReadFunction.Js_.t = "canRead"
+    @bs.send
+    external mergeObjects: (t, ~existing: Js.Json.t, ~incoming: Js.Json.t) => option<Js.Json.t> =
+      "canRead"
+    @bs.send external readField: t => ReadFieldFunction.Js_.t = "readField"
+    @bs.send
+    external toReference: t => ToReferenceFunction.t = "toReference"
+  }
+
+  type t = {
+    args: Js.nullable<Js.Dict.t<Js.Json.t>>,
+    fieldName: string,
+    storeFieldName: string,
+    field: Js.nullable<FieldNode.t>,
+    variables: option<Js.Dict.t<Js.Json.t>>,
+    isReference: bool,
+    toReference: unimplemented,
+    storage: Js.nullable<StorageType.t>,
+    cache: ApolloCache.t<Js.Json.t>,
+    readField: unimplemented,
+    canRead: unimplemented,
+    mergeObjects: (~existing: Js.Json.t, ~incoming: Js.Json.t) => option<Js.Json.t>,
+  }
+
+  let fromJs: Js_.t => t = js => {
+    args: js.args,
+    fieldName: js.fieldName,
+    storeFieldName: js.storeFieldName,
+    field: js.field,
+    variables: js.variables,
+    isReference: js.isReference,
+    toReference: js.toReference,
+    storage: js.storage,
+    cache: js.cache,
+    readField: js.readField,
+    canRead: js.canRead,
+    mergeObjects: (~existing: Js.Json.t, ~incoming: Js.Json.t) =>
+      js->Js_.mergeObjects(~existing, ~incoming),
+  }
+}
+
+module FieldReadFunction = {
+  type t<'existing> = (option<'existing>, FieldFunctionOptions.t) => 'existing
+
+  module Js_ = {
+    // export declare type FieldReadFunction<TExisting = any, TReadResult = TExisting> = (existing: SafeReadonly<TExisting> | undefined, options: FieldFunctionOptions) => TReadResult | undefined;
+    type t<'existing> = (option<'existing>, FieldFunctionOptions.Js_.t) => 'existing
+  }
+
+  let toJs: t<'existing> => Js_.t<'existing> = (t, existing, jsFieldFunctionOptions) =>
+    t(existing, jsFieldFunctionOptions->FieldFunctionOptions.fromJs)
+}
+
+module KeySpecifier = {
+  type t = array<string>
+  module Js_ = {
+    // declare type KeySpecifier = (string | any[])[];
+    type t = t
+  }
+}
+
+module KeyArgsFunction = {
+  type t_context = {
+    typename: string,
+    fieldName: string,
+    field: Js.null<FieldNode.t>,
+    variables: option<Js.Json.t>,
+  }
+
+  type t = (Js.nullable<Js.Json.t>, t_context) => KeySpecifier.t
+
+  module Js_ = {
+    // export declare type KeyArgsFunction = (args: Record<string, any> | null, context: {
+    //     typename: string;
+    //     fieldName: string;
+    //     field: FieldNode | null;
+    //     variables?: Record<string, any>;
+    // }) => KeySpecifier | ReturnType<IdGetter>;
+    type t = t
+  }
+}
+
+module FieldPolicy_KeyArgs = {
+  type t =
+    | KeySpecifier(KeySpecifier.t)
+    | KeyArgsFunction(KeyArgsFunction.t)
+    | False
+
+  module Js_ = {
+    module KeyArgsUnion: {
+      type t
+      let keySpecifier: KeySpecifier.Js_.t => t
+      let keyArgsFunction: KeyArgsFunction.Js_.t => t
+      let false_: t
+    } = {
+      @unboxed
+      type rec t = Any('a): t
+      let keySpecifier = (v: KeySpecifier.Js_.t) => Any(v)
+      let keyArgsFunction = (v: KeyArgsFunction.Js_.t) => Any(v)
+      let false_ = Any(false)
+    }
+
+    type t = KeyArgsUnion.t
+  }
+
+  let toJs: t => Js_.t = x =>
+    switch x {
+    | KeySpecifier(keySpecifier) => keySpecifier->Js_.KeyArgsUnion.keySpecifier
+    | KeyArgsFunction(keyArgsFunction) => keyArgsFunction->Js_.KeyArgsUnion.keyArgsFunction
+    | False => Js_.KeyArgsUnion.false_
+    }
+}
+
+module FieldPolicy = {
+  type t<'existing> = {
+    keyArgs: option<FieldPolicy_KeyArgs.t>,
+    read: option<FieldReadFunction.t<'existing>>,
+    merge: option<FieldMergeFunction.t>,
+  }
+
+  module Js_ = {
+    // export declare type FieldPolicy<TExisting = any, TIncoming = TExisting, TReadResult = TExisting> = {
+    //     keyArgs?: KeySpecifier | KeyArgsFunction | false;
+    //     read?: FieldReadFunction<TExisting, TReadResult>;
+    //     merge?: FieldMergeFunction<TExisting, TIncoming> | boolean;
+    // };
+    type t<'existing> = {
+      keyArgs: option<FieldPolicy_KeyArgs.Js_.t>,
+      read: option<FieldReadFunction.Js_.t<'existing>>,
+      merge: option<FieldMergeFunction.Js_.t>,
+    }
+  }
+
+  let toJs: t<'existing> => Js_.t<'existing> = t => {
+    keyArgs: t.keyArgs->Belt.Option.map(FieldPolicy_KeyArgs.toJs),
+    read: t.read->Belt.Option.map(FieldReadFunction.toJs),
+    merge: t.merge,
+  }
+}
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory_ReactiveVars.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory_ReactiveVars.cmi
new file mode 100644
index 0000000..7366d54
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory_ReactiveVars.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory_ReactiveVars.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory_ReactiveVars.cmj
new file mode 100644
index 0000000..94223cd
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory_ReactiveVars.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory_ReactiveVars.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory_ReactiveVars.cmt
new file mode 100644
index 0000000..34f0907
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory_ReactiveVars.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory_ReactiveVars.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory_ReactiveVars.res
new file mode 100644
index 0000000..9273c4f
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Cache_InMemory_ReactiveVars.res
@@ -0,0 +1,14 @@
+module ReactiveVar = {
+  type t<'value> = (~newValue: 'value=?, unit) => 'value
+
+  module Js_ = {
+    type t<'value> = t<'value>
+  }
+}
+
+module Js_ = {
+  @bs.module("@apollo/client")
+  external makeVar: 'value => ReactiveVar.Js_.t<'value> = "makeVar"
+}
+
+let makeVar: 'value => ReactiveVar.t<'value> = Js_.makeVar
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Client.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Client.cmi
new file mode 100644
index 0000000..de7d2d0
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Client.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Client.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Client.cmj
new file mode 100644
index 0000000..7f9da0c
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Client.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Client.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Client.cmt
new file mode 100644
index 0000000..f8a0012
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Client.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Client.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Client.res
new file mode 100644
index 0000000..454c60e
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Client.res
@@ -0,0 +1,68 @@
+// export { default as Observable } from 'zen-observable';
+module Observable = ApolloClient__ZenObservable.Observable
+// export { isReference, makeReference } from './utilities/graphql/storeUtils.js';
+// export { ApolloLink } from './link/core/ApolloLink.js';
+module ApolloLink = ApolloClient__Link_Core_ApolloLink
+// export { execute } from './link/core/execute.js';
+let execute = ApolloClient__Link_Core_ApolloLink.Static.execute
+// export { ApolloError, isApolloError } from './errors/ApolloError.js';
+module ApolloError = ApolloClient__Errors_ApolloError
+// export { NetworkStatus } from './core/networkStatus.js';
+module NetworkStatus = ApolloClient__Core_NetworkStatus.NetworkStatus
+// export { ObservableQuery } from './core/ObservableQuery.js';
+// export { serializeFetchParameter } from './link/http/serializeFetchParameter.js';
+// export { selectURI } from './link/http/selectURI.js';
+// export { throwServerError } from './link/utils/throwServerError.js';
+// export { parseAndCheckHttpResponse } from './link/http/parseAndCheckHttpResponse.js';
+// export { checkFetcher } from './link/http/checkFetcher.js';
+// export { fallbackHttpConfig, selectHttpOptionsAndBody } from './link/http/selectHttpOptionsAndBody.js';
+// export { createSignalIfSupported } from './link/http/createSignalIfSupported.js';
+// export { fromError } from './link/utils/fromError.js';
+// export { createHttpLink } from './link/http/createHttpLink.js';
+let createHttpLink = ApolloClient__Link_Http_CreateHttpLink.createHttpLink
+// export { HttpLink } from './link/http/HttpLink.js';
+module HttpLink = ApolloClient__Link_Http_HttpLink
+// export { ApolloClient } from './ApolloClient.js';
+module ApolloClient = ApolloClient__Core_ApolloClient
+// export { ApolloCache } from './cache/core/cache.js';
+module ApolloCache = ApolloClient__Cache_Core_Cache.ApolloCache
+// export { Cache } from './cache/core/types/Cache.js';
+// export { MissingFieldError } from './cache/core/types/common.js';
+// export { defaultDataIdFromObject } from './cache/inmemory/policies.js';
+let defaultDataIdFromObject = ApolloClient__Cache_InMemory_Policies.defaultDataIdFromObject
+// export { InMemoryCache } from './cache/inmemory/inMemoryCache.js';
+module InMemoryCache = ApolloClient__Cache_InMemory_InMemoryCache
+// export { empty } from './link/core/empty.js';
+let empty = ApolloClient__Link_Core_ApolloLink.Static.empty
+// export { from } from './link/core/from.js';
+let from = ApolloClient__Link_Core_ApolloLink.Static.from
+// export { split } from './link/core/split.js';
+let split = ApolloClient__Link_Core_ApolloLink.Static.split
+// export { concat } from './link/core/concat.js';
+let concat = ApolloClient__Link_Core_ApolloLink.Static.concat
+// export { toPromise } from './link/utils/toPromise.js';
+// export { fromPromise } from './link/utils/fromPromise.js';
+// export { default as gql } from 'graphql-tag';
+let gql = ApolloClient__GraphqlTag.gql
+// export { disableExperimentalFragmentVariables, disableFragmentWarnings, enableExperimentalFragmentVariables, resetCaches } from './core/index.js';
+// export { getApolloContext, resetApolloContext } from './react/context/ApolloContext.js';
+// export { ApolloProvider } from './react/context/ApolloProvider.js';
+module ApolloProvider = ApolloClient__React_Context_ApolloProvider
+// export { ApolloConsumer } from './react/context/ApolloConsumer.js';
+// export { DocumentType, operationName, parser } from './react/parser/parser.js';
+// export { useQuery } from './react/hooks/useQuery.js';
+let useQuery = ApolloClient__React_Hooks_UseQuery.useQuery
+// export { useLazyQuery } from './react/hooks/useLazyQuery.js';
+// export { useMutation } from './react/hooks/useMutation.js';
+let useMutation = ApolloClient__React_Hooks_UseMutation.useMutation
+// export { useSubscription } from './react/hooks/useSubscription.js';
+let useSubscription = ApolloClient__React_Hooks_UseSubscription.useSubscription
+// export { useApolloClient } from './react/hooks/useApolloClient.js';
+// export { RenderPromises } from './react/ssr/RenderPromises.js';
+
+module Core = ApolloClient__Core
+module Cache = ApolloClient__Cache
+module Errors = ApolloClient__Errors
+module Link = ApolloClient__Link
+module React = ApolloClient__React
+module Utilities = ApolloClient__Utilities
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core.cmi
new file mode 100644
index 0000000..6ddc4db
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core.cmj
new file mode 100644
index 0000000..9f609e5
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core.cmt
new file mode 100644
index 0000000..5f569a1
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core.res
new file mode 100644
index 0000000..3c513aa
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core.res
@@ -0,0 +1,6 @@
+module ApolloClient = ApolloClient__Core_ApolloClient
+module LocalState = ApolloClient__Core_LocalState
+module NetworkStatus = ApolloClient__Core_NetworkStatus.NetworkStatus
+module ObservableQuery = ApolloClient__Core_ObservableQuery
+module Types = ApolloClient__Core_Types
+module WatchQueryOptions = ApolloClient__Core_WatchQueryOptions
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_ApolloClient.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_ApolloClient.cmi
new file mode 100644
index 0000000..d5301fe
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_ApolloClient.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_ApolloClient.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_ApolloClient.cmj
new file mode 100644
index 0000000..2bbd58f
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_ApolloClient.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_ApolloClient.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_ApolloClient.cmt
new file mode 100644
index 0000000..1570c94
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_ApolloClient.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_ApolloClient.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_ApolloClient.res
new file mode 100644
index 0000000..e58067d
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_ApolloClient.res
@@ -0,0 +1,903 @@
+module ApolloCache = ApolloClient__Cache_Core_Cache.ApolloCache
+module ApolloError = ApolloClient__Errors_ApolloError
+module ApolloLink = ApolloClient__Link_Core_ApolloLink
+module ApolloQueryResult = ApolloClient__Core_Types.ApolloQueryResult
+module DataProxy = ApolloClient__Cache_Core_Types.DataProxy
+module ErrorPolicy = ApolloClient__Core_WatchQueryOptions.ErrorPolicy
+module FetchPolicy = ApolloClient__Core_WatchQueryOptions.FetchPolicy
+module FetchPolicy__noCacheExtracted = ApolloClient__Core_WatchQueryOptions.FetchPolicy__noCacheExtracted
+module FetchResult = ApolloClient__Link_Core_Types.FetchResult
+module FragmentMatcher = ApolloClient__Core_LocalState.FragmentMatcher
+module Graphql = ApolloClient__Graphql
+module MutationOptions = ApolloClient__Core_WatchQueryOptions.MutationOptions
+module MutationQueryReducersMap = ApolloClient__Core_WatchQueryOptions.MutationQueryReducersMap
+module MutationUpdaterFn = ApolloClient__Core_WatchQueryOptions.MutationUpdaterFn
+module Observable = ApolloClient__ZenObservable.Observable
+module ObservableQuery = ApolloClient__Core_ObservableQuery.ObservableQuery
+module QueryOptions = ApolloClient__Core_WatchQueryOptions.QueryOptions
+module PureQueryOptions = ApolloClient__Core_Types.PureQueryOptions
+module RefetchQueryDescription = ApolloClient__Core_WatchQueryOptions.RefetchQueryDescription
+module Resolvers = ApolloClient__Core_Types.Resolvers
+module SubscriptionOptions = ApolloClient__Core_WatchQueryOptions.SubscriptionOptions
+module Types = ApolloClient__Types
+module UriFunction = ApolloClient__Link_Http_SelectHttpOptionsAndBody.UriFunction
+module Utils = ApolloClient__Utils
+module WatchQueryFetchPolicy = ApolloClient__Core_WatchQueryOptions.WatchQueryFetchPolicy
+module WatchQueryOptions = ApolloClient__Core_WatchQueryOptions.WatchQueryOptions
+
+module type Fragment = Types.Fragment
+module type Operation = Types.Operation
+module type OperationNoRequiredVars = Types.OperationNoRequiredVars
+
+module DefaultWatchQueryOptions = {
+  module Js_ = {
+    // Partial<QueryOptions>;
+    type t = {
+      fetchPolicy: option<WatchQueryFetchPolicy.Js_.t>,
+      // query: GraphQL.Language.documentNode,
+      // variables: option('jsVariables),
+      errorPolicy: option<ErrorPolicy.Js_.t>,
+      context: option<Js.Json.t>,
+    }
+  }
+
+  type t = {
+    fetchPolicy: option<WatchQueryFetchPolicy.t>,
+    errorPolicy: option<ErrorPolicy.t>,
+    context: option<Js.Json.t>,
+  }
+
+  let toJs: t => Js_.t = t => {
+    fetchPolicy: t.fetchPolicy->Belt.Option.map(WatchQueryFetchPolicy.toJs),
+    errorPolicy: t.errorPolicy->Belt.Option.map(ErrorPolicy.toJs),
+    context: t.context,
+  }
+
+  let make = (~fetchPolicy=?, ~errorPolicy=?, ~context=?, ()) => {
+    fetchPolicy: fetchPolicy,
+    errorPolicy: errorPolicy,
+    context: context,
+  }
+}
+
+module DefaultQueryOptions = {
+  module Js_ = {
+    // Partial<QueryOptions>;
+    type t = {
+      fetchPolicy: option<FetchPolicy.Js_.t>,
+      // query: GraphQL.Language.documentNode,
+      // variables: option('jsVariables),
+      errorPolicy: option<ErrorPolicy.Js_.t>,
+      context: option<Js.Json.t>,
+    }
+  }
+
+  type t = {
+    fetchPolicy: option<FetchPolicy.t>,
+    errorPolicy: option<ErrorPolicy.t>,
+    context: option<Js.Json.t>,
+  }
+
+  let toJs: t => Js_.t = t => {
+    fetchPolicy: t.fetchPolicy->Belt.Option.map(FetchPolicy.toJs),
+    errorPolicy: t.errorPolicy->Belt.Option.map(ErrorPolicy.toJs),
+    context: t.context,
+  }
+
+  let make = (~fetchPolicy=?, ~errorPolicy=?, ~context=?, ()) => {
+    fetchPolicy: fetchPolicy,
+    errorPolicy: errorPolicy,
+    context: context,
+  }
+}
+
+module DefaultMutateOptions = {
+  module Js_ = {
+    // Partial<MutationOptions>;
+    type t = {
+      context: option<Js.Json.t>,
+      fetchPolicy: option<FetchPolicy__noCacheExtracted.Js_.t>,
+      awaitRefetchQueries: option<bool>,
+      errorPolicy: option<ErrorPolicy.Js_.t>,
+      // optimisticResponse: option('jsVariables => 'jsData),
+      // update: option(MutationUpdaterFn.Js_.t('jsData)),
+      // updateQueries: option(MutationQueryReducersMap.Js_.t('jsData)),
+      refetchQueries: option<RefetchQueryDescription.Js_.t>,
+      // variables: option('jsVariables),
+    }
+  }
+
+  type t = {
+    context: option<Js.Json.t>,
+    fetchPolicy: option<FetchPolicy__noCacheExtracted.t>,
+    awaitRefetchQueries: option<bool>,
+    errorPolicy: option<ErrorPolicy.t>,
+    refetchQueries: option<RefetchQueryDescription.t>,
+  }
+
+  let toJs: t => Js_.t = t => {
+    context: t.context,
+    fetchPolicy: t.fetchPolicy->Belt.Option.map(FetchPolicy__noCacheExtracted.toJs),
+    awaitRefetchQueries: t.awaitRefetchQueries,
+    errorPolicy: t.errorPolicy->Belt.Option.map(ErrorPolicy.toJs),
+    refetchQueries: t.refetchQueries->Belt.Option.map(RefetchQueryDescription.toJs),
+  }
+
+  let make = (
+    ~context=?,
+    ~fetchPolicy=?,
+    ~awaitRefetchQueries=?,
+    ~errorPolicy=?,
+    ~refetchQueries=?,
+    (),
+  ) => {
+    context: context,
+    fetchPolicy: fetchPolicy,
+    awaitRefetchQueries: awaitRefetchQueries,
+    errorPolicy: errorPolicy,
+    refetchQueries: refetchQueries,
+  }
+}
+
+module DefaultOptions = {
+  module Js_ = {
+    // export interface DefaultOptions {
+    //     watchQuery?: Partial<WatchQueryOptions>;
+    //     query?: Partial<QueryOptions>;
+    //     mutate?: Partial<MutationOptions>;
+    // }
+    type t = {
+      watchQuery: option<DefaultWatchQueryOptions.Js_.t>,
+      query: option<DefaultQueryOptions.Js_.t>,
+      mutate: option<DefaultMutateOptions.Js_.t>,
+    }
+  }
+
+  type t = {
+    watchQuery: option<DefaultWatchQueryOptions.t>,
+    query: option<DefaultQueryOptions.t>,
+    mutate: option<DefaultMutateOptions.t>,
+  }
+
+  let toJs: t => Js_.t = t => {
+    watchQuery: t.watchQuery->Belt.Option.map(DefaultWatchQueryOptions.toJs),
+    query: t.query->Belt.Option.map(DefaultQueryOptions.toJs),
+    mutate: t.mutate->Belt.Option.map(DefaultMutateOptions.toJs),
+  }
+
+  let make: (
+    ~mutate: DefaultMutateOptions.t=?,
+    ~query: DefaultQueryOptions.t=?,
+    ~watchQuery: DefaultWatchQueryOptions.t=?,
+    unit,
+  ) => t = (~mutate=?, ~query=?, ~watchQuery=?, ()) => {
+    watchQuery: watchQuery,
+    query: query,
+    mutate: mutate,
+  }
+}
+
+module ApolloClientOptions = {
+  module Js_ = {
+    // export declare type ApolloClientOptions<TCacheShape> = {
+    //     uri?: string | UriFunction;
+    //     credentials?: string;
+    //     headers?: Record<string, string>;
+    //     link?: ApolloLink;
+    //     cache: ApolloCache<TCacheShape>;
+    //     ssrForceFetchDelay?: number;
+    //     ssrMode?: boolean;
+    //     connectToDevTools?: boolean;
+    //     queryDeduplication?: boolean;
+    //     defaultOptions?: DefaultOptions;
+    //     assumeImmutableResults?: boolean;
+    //     resolvers?: Resolvers | Resolvers[];
+    //     typeDefs?: string | string[] | DocumentNode | DocumentNode[];
+    //     fragmentMatcher?: FragmentMatcher;
+    //     name?: string;
+    //     version?: string;
+    // };
+    type t = {
+      uri: option<UriFunction.Js_.t>,
+      credentials: option<string>,
+      headers: option<Js.Dict.t<string>>,
+      link: option<ApolloLink.Js_.t>,
+      cache: ApolloCache.t<Js.Json.t>, // Non-Js_ ApolloCache is correct here
+      ssrForceFetchDelay: option<int>,
+      ssrMode: option<bool>,
+      connectToDevTools: option<bool>,
+      queryDeduplication: option<bool>,
+      defaultOptions: option<DefaultOptions.Js_.t>,
+      assumeImmutableResults: option<bool>,
+      resolvers: option<array<Resolvers.Js_.t>>,
+      typeDefs: option<array<Graphql.documentNode>>,
+      fragmentMatcher: option<FragmentMatcher.Js_.t>,
+      name: option<string>,
+      version: option<string>,
+    }
+  }
+
+  type t = {
+    uri: option<UriFunction.t>,
+    credentials: option<string>,
+    headers: option<Js.Dict.t<string>>,
+    link: option<ApolloLink.t>,
+    cache: ApolloCache.t<Js.Json.t>,
+    ssrForceFetchDelay: option<int>,
+    ssrMode: option<bool>,
+    connectToDevTools: option<bool>,
+    queryDeduplication: option<bool>,
+    defaultOptions: option<DefaultOptions.t>,
+    assumeImmutableResults: option<bool>,
+    resolvers: option<array<Resolvers.t>>,
+    typeDefs: option<array<Graphql.documentNode>>,
+    fragmentMatcher: option<FragmentMatcher.t>,
+    name: option<string>,
+    version: option<string>,
+  }
+
+  let toJs: t => Js_.t = t => {
+    uri: t.uri,
+    credentials: t.credentials,
+    headers: t.headers,
+    link: t.link,
+    cache: t.cache,
+    ssrForceFetchDelay: t.ssrForceFetchDelay,
+    ssrMode: t.ssrMode,
+    connectToDevTools: t.connectToDevTools,
+    queryDeduplication: t.queryDeduplication,
+    defaultOptions: t.defaultOptions->Belt.Option.map(DefaultOptions.toJs),
+    assumeImmutableResults: t.assumeImmutableResults,
+    resolvers: t.resolvers,
+    typeDefs: t.typeDefs,
+    fragmentMatcher: t.fragmentMatcher,
+    name: t.name,
+    version: t.version,
+  }
+}
+
+module Js_ = {
+  module Cast = {
+    external asRescriptCache: ApolloCache.Js_.t<'a> => ApolloCache.t<'a> = "%identity"
+  }
+
+  // export declare class ApolloClient<TCacheShape> implements DataProxy {
+  //     link: ApolloLink;
+  //     cache: ApolloCache<TCacheShape>;
+  //     disableNetworkFetches: boolean;
+  //     version: string;
+  //     queryDeduplication: boolean;
+  //     defaultOptions: DefaultOptions;
+  //     readonly typeDefs: ApolloClientOptions<TCacheShape>['typeDefs'];
+  //     private queryManager;
+  //     private devToolsHookCb;
+  //     private resetStoreCallbacks;
+  //     private clearStoreCallbacks;
+  //     private localState;
+  //     constructor(options: ApolloClientOptions<TCacheShape>);
+  //     stop(): void;
+  //     watchQuery<T = any, TVariables = OperationVariables>(options: WatchQueryOptions<TVariables, T>): ObservableQuery<T, TVariables>;
+  //     query<T = any, TVariables = OperationVariables>(options: QueryOptions<TVariables, T>): Promise<ApolloQueryResult<T>>;
+  //     mutate<T = any, TVariables = OperationVariables>(options: MutationOptions<T, TVariables>): Promise<FetchResult<T>>;
+  //     subscribe<T = any, TVariables = OperationVariables>(options: SubscriptionOptions<TVariables, T>): Observable<FetchResult<T>>;
+  //     readQuery<T = any, TVariables = OperationVariables>(options: DataProxy.Query<TVariables, T>, optimistic?: boolean): T | null;
+  //     readFragment<T = any, TVariables = OperationVariables>(options: DataProxy.Fragment<TVariables, T>, optimistic?: boolean): T | null;
+  //     writeQuery<TData = any, TVariables = OperationVariables>(options: DataProxy.WriteQueryOptions<TData, TVariables>): void;
+  //     writeFragment<TData = any, TVariables = OperationVariables>(options: DataProxy.WriteFragmentOptions<TData, TVariables>): void;
+  //     __actionHookForDevTools(cb: () => any): void;
+  //     __requestRaw(payload: GraphQLRequest): Observable<ExecutionResult>;
+  //     resetStore(): Promise<ApolloQueryResult<any>[] | null>;
+  //     clearStore(): Promise<any[]>;
+  //     onResetStore(cb: () => Promise<any>): () => void;
+  //     onClearStore(cb: () => Promise<any>): () => void;
+  //     reFetchObservableQueries(includeStandby?: boolean): Promise<ApolloQueryResult<any>[]>;
+  //     extract(optimistic?: boolean): TCacheShape;
+  //     restore(serializedState: TCacheShape): ApolloCache<TCacheShape>;
+  //     addResolvers(resolvers: Resolvers | Resolvers[]): void;
+  //     setResolvers(resolvers: Resolvers | Resolvers[]): void;
+  //     getResolvers(): Resolvers;
+  //     setLocalStateFragmentMatcher(fragmentMatcher: FragmentMatcher): void;
+  //     setLink(newLink: ApolloLink): void;
+  // }
+  type t
+
+  // clearStore(): Promise<any[]>;
+  @bs.send
+  external clearStore: t => Js.Promise.t<array<Js.Json.t>> = "clearStore"
+
+  // mutate<T = any, TVariables = OperationVariables>(options: MutationOptions<T, TVariables>): Promise<FetchResult<T>>;
+  @bs.send
+  external mutate: (
+    t,
+    ~options: MutationOptions.Js_.t<'jsData, 'jsVariables>,
+  ) => Js.Promise.t<FetchResult.Js_.t<'jsData>> = "mutate"
+
+  // onClearStore(cb: () => Promise<any>): () => void;
+  @bs.send
+  external onClearStore: (t, ~cb: unit => Js.Promise.t<unit>, unit) => unit = "onClearStore"
+
+  // onResetStore(cb: () => Promise<any>): () => void;
+  @bs.send
+  external onResetStore: (t, ~cb: unit => Js.Promise.t<unit>, unit) => unit = "onResetStore"
+
+  // query<T = any, TVariables = OperationVariables>(options: QueryOptions<TVariables>): Promise<ApolloQueryResult<T>>;
+  @bs.send
+  external query: (
+    t,
+    ~options: QueryOptions.Js_.t<'jsVariables>,
+  ) => Js.Promise.t<ApolloQueryResult.Js_.t<'jsData>> = "query"
+
+  // readFragment<T = any, TVariables = OperationVariables>(options: DataProxy.Fragment<TVariables>, optimistic?: boolean): T | null;
+  @bs.send
+  external readFragment: (
+    t,
+    ~options: DataProxy.Fragment.Js_.t,
+    ~optimistic: bool=?,
+    unit,
+  ) => Js.nullable<'jsData> = "readFragment"
+
+  // readQuery<T = any, TVariables = OperationVariables>(options: DataProxy.Query<TVariables>, optimistic?: boolean): T | null;
+  @bs.send
+  external readQuery: (
+    t,
+    ~options: DataProxy.Query.Js_.t<'jsVariables>,
+    ~optimistic: option<bool>,
+  ) => Js.nullable<'jsData> = "readQuery"
+
+  // resetStore(): Promise<ApolloQueryResult<any>[] | null>;
+  @bs.send
+  external resetStore: t => Js.Promise.t<Js.nullable<array<ApolloQueryResult.Js_.t<Js.Json.t>>>> =
+    "resetStore"
+
+  // restore(serializedState: TCacheShape): ApolloCache<TCacheShape>;
+  @bs.send
+  external restore: (t, Js.Json.t) => ApolloCache.Js_.t<Js.Json.t> = "restore"
+
+  // setLink(newLink: ApolloLink): void;
+  @bs.send external setLink: (t, ApolloLink.Js_.t) => unit = "setLink"
+
+  // subscribe<T = any, TVariables = OperationVariables>(options: SubscriptionOptions<TVariables>): Observable<FetchResult<T>>;
+
+  @bs.send
+  external subscribe: (
+    t,
+    ~options: SubscriptionOptions.Js_.t<'jsVariables>,
+  ) => Observable.Js_.t<FetchResult.Js_.t<'jsData>, 'error> = "subscribe"
+
+  // <T = any, TVariables = OperationVariables>(options: WatchQueryOptions<TVariables>): ObservableQuery<T, TVariables>;
+  @bs.send
+  external watchQuery: (
+    t,
+    ~options: WatchQueryOptions.Js_.t<'jsVariables>,
+  ) => ObservableQuery.Js_.t<'jsData> = "watchQuery"
+
+  // writeFragment<TData = any, TVariables = OperationVariables>(options: DataProxy.WriteFragmentOptions<TData, TVariables>): void;
+  @bs.send
+  external writeFragment: (
+    t,
+    ~options: DataProxy.WriteFragmentOptions.Js_.t<'jsData, 'jsVariables>,
+  ) => unit = "writeFragment"
+
+  // writeQuery<TData = any, TVariables = OperationVariables>(options: DataProxy.WriteQueryOptions<TData, TVariables>): void;
+  @bs.send
+  external writeQuery: (
+    t,
+    ~options: DataProxy.WriteQueryOptions.Js_.t<'jsData, 'jsVariables>,
+  ) => unit = "writeQuery"
+
+  @bs.module("@apollo/client") @bs.new
+  external make: ApolloClientOptions.Js_.t => t = "ApolloClient"
+}
+
+type t = {
+  @bs.as("rescript_clearStore")
+  clearStore: unit => Js.Promise.t<Belt.Result.t<array<Js.Json.t>, Js.Exn.t>>,
+  @bs.as("rescript_mutate")
+  mutate: 'data 'variables 'jsVariables. (
+    ~mutation: module(Operation with
+      type t = 'data
+      and type t_variables = 'variables
+      and type Raw.t_variables = 'jsVariables
+    ),
+    ~awaitRefetchQueries: bool=?,
+    ~context: Js.Json.t=?,
+    ~errorPolicy: ErrorPolicy.t=?,
+    ~fetchPolicy: FetchPolicy__noCacheExtracted.t=?,
+    ~mapJsVariables: 'jsVariables => 'jsVariables=?,
+    ~optimisticResponse: 'jsVariables => 'data=?,
+    ~refetchQueries: RefetchQueryDescription.t=?,
+    ~updateQueries: MutationQueryReducersMap.t<'data>=?,
+    ~update: MutationUpdaterFn.t<'data>=?,
+    'variables,
+  ) => Js.Promise.t<Belt.Result.t<FetchResult.t__ok<'data>, ApolloError.t>>,
+  @bs.as("rescript_onClearStore")
+  onClearStore: (~cb: unit => Js.Promise.t<unit>, unit) => unit,
+  @bs.as("rescript_onResetStore")
+  onResetStore: (~cb: unit => Js.Promise.t<unit>, unit) => unit,
+  @bs.as("rescript_query")
+  query: 'data 'variables 'jsVariables. (
+    ~query: module(Operation with
+      type t = 'data
+      and type t_variables = 'variables
+      and type Raw.t_variables = 'jsVariables
+    ),
+    ~context: Js.Json.t=?,
+    ~errorPolicy: ErrorPolicy.t=?,
+    ~fetchPolicy: FetchPolicy.t=?,
+    ~mapJsVariables: 'jsVariables => 'jsVariables=?,
+    'variables,
+  ) => Js.Promise.t<Belt.Result.t<ApolloQueryResult.t__ok<'data>, ApolloError.t>>,
+  @bs.as("rescript_readFragment")
+  readFragment: 'data. (
+    ~fragment: module(Fragment with type t = 'data),
+    ~id: string,
+    ~optimistic: bool=?,
+    ~fragmentName: string=?,
+    unit,
+  ) => option<Types.parseResult<'data>>,
+  @bs.as("rescript_readQuery")
+  readQuery: 'data 'variables 'jsVariables. (
+    ~query: module(Operation with
+      type t = 'data
+      and type t_variables = 'variables
+      and type Raw.t_variables = 'jsVariables
+    ),
+    ~id: string=?,
+    ~mapJsVariables: 'jsVariables => 'jsVariables=?,
+    ~optimistic: bool=?,
+    'variables,
+  ) => option<Types.parseResult<'data>>,
+  @bs.as("rescript_resetStore")
+  resetStore: unit => Js.Promise.t<
+    Belt.Result.t<option<array<ApolloQueryResult.Js_.t<Js.Json.t>>>, Js.Exn.t>,
+  >,
+  @bs.as("rescript_restore")
+  restore: (~serializedState: Js.Json.t) => ApolloCache.t<Js.Json.t>,
+  @bs.as("rescript_setLink")
+  setLink: ApolloLink.t => unit,
+  @bs.as("rescript_subscribe")
+  subscribe: 'data 'variables 'jsVariables. (
+    ~subscription: module(Operation with
+      type t = 'data
+      and type t_variables = 'variables
+      and type Raw.t_variables = 'jsVariables
+    ),
+    ~context: Js.Json.t=?,
+    ~errorPolicy: ErrorPolicy.t=?,
+    ~fetchPolicy: FetchPolicy.t=?,
+    ~mapJsVariables: 'jsVariables => 'jsVariables=?,
+    'variables,
+  ) => Observable.t<FetchResult.t__ok<'data>, ApolloError.t>,
+  @bs.as("rescript_watchQuery")
+  watchQuery: 'data 'variables 'jsVariables. (
+    ~query: module(Operation with
+      type t = 'data
+      and type t_variables = 'variables
+      and type Raw.t_variables = 'jsVariables
+    ),
+    ~context: Js.Json.t=?,
+    ~errorPolicy: ErrorPolicy.t=?,
+    ~fetchPolicy: WatchQueryFetchPolicy.t=?,
+    ~mapJsVariables: 'jsVariables => 'jsVariables=?,
+    'variables,
+  ) => ObservableQuery.t<'data>,
+  @bs.as("rescript_writeFragment")
+  writeFragment: 'data 'jsVariables. (
+    ~fragment: module(Fragment with type t = 'data),
+    ~data: 'data,
+    ~broadcast: bool=?,
+    ~id: string,
+    ~fragmentName: string=?,
+    unit,
+  ) => unit,
+  @bs.as("rescript_writeQuery")
+  writeQuery: 'data 'variables 'jsVariables. (
+    ~query: module(Operation with
+      type t = 'data
+      and type t_variables = 'variables
+      and type Raw.t_variables = 'jsVariables
+    ),
+    ~broadcast: bool=?,
+    ~data: 'data,
+    ~id: string=?,
+    ~mapJsVariables: 'jsVariables => 'jsVariables=?,
+    'variables,
+  ) => unit,
+}
+
+let preserveJsPropsAndContext: (Js_.t, t) => t = %bs.raw(`
+    function (js, t) {
+      return Object.assign(js, t)
+    }
+  `)
+
+let make: (
+  ~uri: UriFunction.t=?,
+  ~credentials: string=?,
+  ~headers: Js.Dict.t<string>=?,
+  ~link: ApolloLink.t=?,
+  ~cache: ApolloCache.t<Js.Json.t>,
+  ~ssrForceFetchDelay: int=?,
+  ~ssrMode: bool=?,
+  ~connectToDevTools: bool=?,
+  ~queryDeduplication: bool=?,
+  ~defaultOptions: DefaultOptions.t=?,
+  ~assumeImmutableResults: bool=?,
+  ~resolvers: array<Resolvers.t>=?,
+  ~typeDefs: array<Graphql.documentNode>=?,
+  ~fragmentMatcher: FragmentMatcher.t=?,
+  ~name: string=?,
+  ~version: string=?,
+  unit,
+) => t = (
+  ~uri=?,
+  ~credentials=?,
+  ~headers=?,
+  ~link=?,
+  ~cache,
+  ~ssrForceFetchDelay=?,
+  ~ssrMode=?,
+  ~connectToDevTools=?,
+  ~queryDeduplication=?,
+  ~defaultOptions=?,
+  ~assumeImmutableResults=?,
+  ~resolvers=?,
+  ~typeDefs=?,
+  ~fragmentMatcher=?,
+  ~name=?,
+  ~version=?,
+  (),
+) => {
+  let jsClient = Js_.make(
+    ApolloClientOptions.toJs({
+      uri: uri,
+      credentials: credentials,
+      headers: headers,
+      link: link,
+      cache: cache,
+      ssrForceFetchDelay: ssrForceFetchDelay,
+      ssrMode: ssrMode,
+      connectToDevTools: connectToDevTools,
+      queryDeduplication: queryDeduplication,
+      defaultOptions: defaultOptions,
+      assumeImmutableResults: assumeImmutableResults,
+      resolvers: resolvers,
+      typeDefs: typeDefs,
+      fragmentMatcher: fragmentMatcher,
+      name: name,
+      version: version,
+    }),
+  )
+
+  let clearStore = () =>
+    jsClient
+    ->Js_.clearStore
+    ->Js.Promise.then_(value => Js.Promise.resolve(Ok(value)), _)
+    ->Js.Promise.catch(e => Js.Promise.resolve(Error(Utils.ensureError(Any(e)))), _)
+
+  let mutate = (
+    type data variables jsVariables,
+    ~mutation as module(Operation: Operation with
+      type t = data
+      and type t_variables = variables
+      and type Raw.t_variables = jsVariables
+    ),
+    ~awaitRefetchQueries=?,
+    ~context=?,
+    ~errorPolicy=?,
+    ~fetchPolicy=?,
+    ~mapJsVariables=Utils.identity,
+    ~optimisticResponse=?,
+    ~refetchQueries=?,
+    ~updateQueries=?,
+    ~update=?,
+    variables,
+  ) => {
+    let safeParse = Utils.safeParse(Operation.parse)
+
+    Js_.mutate(
+      jsClient,
+      ~options=MutationOptions.toJs(
+        {
+          awaitRefetchQueries: awaitRefetchQueries,
+          context: context,
+          errorPolicy: errorPolicy,
+          fetchPolicy: fetchPolicy,
+          mutation: Operation.query,
+          optimisticResponse: optimisticResponse,
+          updateQueries: updateQueries,
+          refetchQueries: refetchQueries,
+          update: update,
+          variables: variables,
+        },
+        ~mapJsVariables,
+        ~safeParse,
+        ~serialize=Operation.serialize,
+        ~serializeVariables=Operation.serializeVariables,
+      ),
+    )
+    ->Js.Promise.then_(
+      jsFetchResult =>
+        Js.Promise.resolve(jsFetchResult->FetchResult.fromJs(~safeParse)->FetchResult.toResult),
+      _,
+    )
+    ->Js.Promise.catch(error =>
+      Js.Promise.resolve(
+        Error(
+          ApolloError.make(
+            ~networkError=FetchFailure({
+              open Utils
+              ensureError(Any(error))
+            }),
+            (),
+          ),
+        ),
+      )
+    , _)
+  }
+
+  let onClearStore = (~cb) => jsClient->Js_.onClearStore(~cb)
+
+  let onResetStore = (~cb) => jsClient->Js_.onResetStore(~cb)
+
+  let query = (
+    type data variables jsVariables,
+    ~query as module(Operation: Operation with
+      type t = data
+      and type t_variables = variables
+      and type Raw.t_variables = jsVariables
+    ),
+    ~context=?,
+    ~errorPolicy=?,
+    ~fetchPolicy=?,
+    ~mapJsVariables=Utils.identity,
+    variables,
+  ) => {
+    let safeParse = Utils.safeParse(Operation.parse)
+
+    Js_.query(
+      jsClient,
+      ~options=QueryOptions.toJs(
+        {
+          fetchPolicy: fetchPolicy,
+          query: Operation.query,
+          variables: variables,
+          errorPolicy: errorPolicy,
+          context: context,
+        },
+        ~mapJsVariables,
+        ~serializeVariables=Operation.serializeVariables,
+      ),
+    )
+    ->Js.Promise.then_(
+      jsApolloQueryResult =>
+        Js.Promise.resolve(
+          jsApolloQueryResult->ApolloQueryResult.fromJs(~safeParse)->ApolloQueryResult.toResult,
+        ),
+      _,
+    )
+    ->Js.Promise.catch(error =>
+      Js.Promise.resolve(
+        Error(
+          ApolloError.make(
+            ~networkError=FetchFailure({
+              open Utils
+              ensureError(Any(error))
+            }),
+            (),
+          ),
+        ),
+      )
+    , _)
+  }
+
+  let readFragment = (
+    type data,
+    ~fragment as module(Fragment: Fragment with type t = data),
+    ~id,
+    ~optimistic=?,
+    ~fragmentName=?,
+    (),
+  ) => {
+    let safeParse = Utils.safeParse(Fragment.parse)
+
+    jsClient
+    ->Js_.readFragment(
+      ~options={id: id, fragment: Fragment.query, fragmentName: fragmentName},
+      ~optimistic?,
+      (),
+    )
+    ->Js.toOption
+    ->Belt.Option.map(safeParse)
+  }
+
+  let readQuery = (
+    type data variables jsVariables,
+    ~query as module(Operation: Operation with
+      type t = data
+      and type t_variables = variables
+      and type Raw.t_variables = jsVariables
+    ),
+    ~id=?,
+    ~mapJsVariables=Utils.identity,
+    ~optimistic=?,
+    variables,
+  ) => {
+    let safeParse = Utils.safeParse(Operation.parse)
+
+    Js_.readQuery(
+      jsClient,
+      ~options=DataProxy.Query.toJs(
+        {id: id, query: Operation.query, variables: variables},
+        ~mapJsVariables,
+        ~serializeVariables=Operation.serializeVariables,
+      ),
+      ~optimistic,
+    )
+    ->Js.toOption
+    ->Belt.Option.map(safeParse)
+  }
+
+  let resetStore: unit => Js.Promise.t<
+    Belt.Result.t<option<array<ApolloQueryResult.Js_.t<Js.Json.t>>>, Js.Exn.t>,
+  > = () =>
+    jsClient
+    ->Js_.resetStore
+    ->Js.Promise.then_(value => Js.Promise.resolve(Ok(value->Js.toOption)), _)
+    ->Js.Promise.catch(e => Js.Promise.resolve(Error(Utils.ensureError(Any(e)))), _)
+
+  let restore = (~serializedState) =>
+    jsClient->Js_.restore(serializedState)->Js_.Cast.asRescriptCache
+
+  let setLink = link => jsClient->Js_.setLink(link)
+
+  let subscribe = (
+    type data variables jsVariables,
+    ~subscription as module(Operation: Operation with
+      type t = data
+      and type t_variables = variables
+      and type Raw.t_variables = jsVariables
+    ),
+    ~context=?,
+    ~errorPolicy=?,
+    ~fetchPolicy=?,
+    ~mapJsVariables=Utils.identity,
+    variables,
+  ) => {
+    let safeParse = Utils.safeParse(Operation.parse)
+
+    let jsObservable = Js_.subscribe(
+      jsClient,
+      ~options=SubscriptionOptions.toJs(
+        {
+          fetchPolicy: fetchPolicy,
+          query: Operation.query,
+          variables: variables,
+          errorPolicy: errorPolicy,
+          context: context,
+        },
+        ~mapJsVariables,
+        ~serializeVariables=Operation.serializeVariables,
+      ),
+    )
+
+    {
+      Observable.subscribe: (~onNext, ~onError=?, ~onComplete=?, ()) => {
+        let onNext' = jsFetchResult =>
+          switch jsFetchResult->FetchResult.fromJs(~safeParse)->FetchResult.toResult {
+          | Ok(ok) => onNext(ok)
+          | Error(error) =>
+            switch onError {
+            | Some(onError) => onError(error)
+            | None => ()
+            }
+          }
+
+        let onError' = onError->Belt.Option.map(onError => {
+          let return = unknown =>
+            Obj.magic(unknown)->ApolloError.Js_.ensureApolloError->ApolloError.fromJs->onError
+          return
+        })
+
+        let observable = jsObservable->Observable.fromJs
+        observable.subscribe(~onNext=onNext', ~onError=?onError', ~onComplete?, ())
+      },
+    }
+  }
+
+  let watchQuery = (
+    type data variables jsVariables,
+    ~query as module(Operation: Operation with
+      type t = data
+      and type t_variables = variables
+      and type Raw.t_variables = jsVariables
+    ),
+    ~context=?,
+    ~errorPolicy=?,
+    ~fetchPolicy=?,
+    ~mapJsVariables=Utils.identity,
+    variables,
+  ) => {
+    let safeParse = Utils.safeParse(Operation.parse)
+
+    jsClient
+    ->Js_.watchQuery(
+      ~options=WatchQueryOptions.toJs(
+        {
+          fetchPolicy: fetchPolicy,
+          query: Operation.query,
+          variables: variables,
+          errorPolicy: errorPolicy,
+          context: context,
+        },
+        ~mapJsVariables,
+        ~serializeVariables=Operation.serializeVariables,
+      ),
+    )
+    ->ObservableQuery.fromJs(~safeParse)
+  }
+
+  let writeFragment = (
+    type data,
+    ~fragment as module(Fragment: Fragment with type t = data),
+    ~data: data,
+    ~broadcast=?,
+    ~id,
+    ~fragmentName=?,
+    (),
+  ) =>
+    jsClient->Js_.writeFragment(
+      ~options=DataProxy.WriteFragmentOptions.toJs(
+        {
+          broadcast: broadcast,
+          data: data,
+          id: id,
+          fragment: Fragment.query,
+          fragmentName: fragmentName,
+        },
+        ~serialize=Fragment.serialize,
+      ),
+    )
+
+  let writeQuery = (
+    type data variables jsVariables,
+    ~query as module(Operation: Operation with
+      type t = data
+      and type t_variables = variables
+      and type Raw.t_variables = jsVariables
+    ),
+    ~broadcast=?,
+    ~data,
+    ~id=?,
+    ~mapJsVariables=Utils.identity,
+    variables,
+  ) =>
+    jsClient->Js_.writeQuery(
+      ~options=DataProxy.WriteQueryOptions.toJs(
+        {broadcast: broadcast, data: data, id: id, query: Operation.query, variables: variables},
+        ~mapJsVariables,
+        ~serialize=Operation.serialize,
+        ~serializeVariables=Operation.serializeVariables,
+      ),
+    )
+
+  preserveJsPropsAndContext(
+    jsClient,
+    {
+      clearStore: clearStore,
+      mutate: mutate,
+      onClearStore: onClearStore,
+      onResetStore: onResetStore,
+      query: query,
+      readFragment: readFragment,
+      readQuery: readQuery,
+      resetStore: resetStore,
+      restore: restore,
+      setLink: setLink,
+      subscribe: subscribe,
+      watchQuery: watchQuery,
+      writeFragment: writeFragment,
+      writeQuery: writeQuery,
+    },
+  )
+}
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_LocalState.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_LocalState.cmi
new file mode 100644
index 0000000..e4e3846
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_LocalState.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_LocalState.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_LocalState.cmj
new file mode 100644
index 0000000..8d22dca
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_LocalState.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_LocalState.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_LocalState.cmt
new file mode 100644
index 0000000..34f9d94
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_LocalState.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_LocalState.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_LocalState.res
new file mode 100644
index 0000000..f810143
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_LocalState.res
@@ -0,0 +1,37 @@
+module ApolloCache = ApolloClient__Cache_Core_Cache.ApolloCache
+module FieldNode = ApolloClient__Graphql.Language.Ast.FieldNode
+module FragmentMap = ApolloClient__Utilities_Graphql_Fragments.FragmentMap
+
+module FragmentMatcher = {
+  module Js_ = {
+    // export declare type FragmentMatcher = (rootValue: any, typeCondition: string, context: any) => boolean;
+    type t = (Js.Json.t, string, Js.Json.t) => bool
+  }
+
+  type t = Js_.t
+}
+
+// TODO: resolve dependency cycle
+type apolloClient
+
+module Resolver = {
+  module Js_ = {
+    type t_context = {
+      client: apolloClient,
+      cache: ApolloCache.t<Js.Json.t>,
+    }
+
+    type t_info = {
+      field: FieldNode.t,
+      fragmentMap: FragmentMap.t,
+    }
+
+    // export declare type Resolver = (rootValue?: any, args?: any, context?: any, info?: {
+    //     field: FieldNode;
+    //     fragmentMap: FragmentMap;
+    // }) => any;
+    type t = (Js.Json.t, Js.Json.t, t_context, t_info) => Js.Json.t
+  }
+
+  type t = Js_.t
+}
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_NetworkStatus.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_NetworkStatus.cmi
new file mode 100644
index 0000000..969173e
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_NetworkStatus.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_NetworkStatus.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_NetworkStatus.cmj
new file mode 100644
index 0000000..6245393
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_NetworkStatus.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_NetworkStatus.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_NetworkStatus.cmt
new file mode 100644
index 0000000..3724ab6
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_NetworkStatus.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_NetworkStatus.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_NetworkStatus.res
new file mode 100644
index 0000000..31827b6
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_NetworkStatus.res
@@ -0,0 +1,29 @@
+module NetworkStatus = {
+  module Js_ = {
+    type t = int
+  }
+
+  type t =
+    | Loading
+    | SetVariables
+    | FetchMore
+    | Refetch
+    | Poll
+    | Ready
+    | Error
+    | // Apollo types are not accurate. See:
+    // https://github.com/reasonml-community/rescript-apollo-client/issues/68
+    SkippedOrNotPresent
+
+  let fromJs: Js_.t => t = js =>
+    switch js {
+    | 1 => Loading
+    | 2 => SetVariables
+    | 3 => FetchMore
+    | 4 => Refetch
+    | 6 => Poll
+    | 7 => Ready
+    | 8 => Error
+    | _ => SkippedOrNotPresent
+    }
+}
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_ObservableQuery.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_ObservableQuery.cmi
new file mode 100644
index 0000000..4cf6a97
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_ObservableQuery.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_ObservableQuery.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_ObservableQuery.cmj
new file mode 100644
index 0000000..4afd1f9
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_ObservableQuery.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_ObservableQuery.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_ObservableQuery.cmt
new file mode 100644
index 0000000..15fa4e7
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_ObservableQuery.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_ObservableQuery.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_ObservableQuery.res
new file mode 100644
index 0000000..4618f81
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_ObservableQuery.res
@@ -0,0 +1,142 @@
+module Types = ApolloClient__Types
+
+module ObservableQuery = {
+  module ApolloQueryResult = ApolloClient__Core_Types.ApolloQueryResult
+  module Subscription = ApolloClient__ZenObservable.Subscription
+  module Observer = ApolloClient__ZenObservable.Observer
+
+  module Js_ = {
+    // export declare class ObservableQuery<TData = any, TVariables = OperationVariables> extends Observable<ApolloQueryResult<TData>> {
+    //     readonly options: WatchQueryOptions<TVariables>;
+    //     readonly queryId: string;
+    //     readonly queryName?: string;
+    //     get variables(): TVariables | undefined;
+    //     private isTornDown;
+    //     private queryManager;
+    //     private observers;
+    //     private subscriptions;
+    //     private lastResult;
+    //     private lastResultSnapshot;
+    //     private lastError;
+    //     constructor({ queryManager, options, }: {
+    //         queryManager: QueryManager<any>;
+    //         options: WatchQueryOptions<TVariables>;
+    //     });
+    //     result(): Promise<ApolloQueryResult<TData>>;
+    //     getCurrentResult(): ApolloCurrentQueryResult<TData>;
+    //     isDifferentFromLastResult(newResult: ApolloQueryResult<TData>): boolean;
+    //     getLastResult(): ApolloQueryResult<TData>;
+    //     getLastError(): ApolloError;
+    //     resetLastResults(): void;
+    //     resetQueryStoreErrors(): void;
+    //     refetch(variables?: Partial<TVariables>): Promise<ApolloQueryResult<TData>>;
+    //     fetchMore<K extends keyof TVariables>(fetchMoreOptions: FetchMoreQueryOptions<TVariables, K> & FetchMoreOptions<TData, TVariables>): Promise<ApolloQueryResult<TData>>;
+    //     subscribeToMore<TSubscriptionData = TData, TSubscriptionVariables = TVariables>(options: SubscribeToMoreOptions<TData, TSubscriptionVariables, TSubscriptionData>): () => void;
+    //     setOptions(newOptions: Partial<WatchQueryOptions<TVariables>>): Promise<ApolloQueryResult<TData>>;
+    //     setVariables(variables: TVariables): Promise<ApolloQueryResult<TData> | void>;
+    //     updateQuery<TVars = TVariables>(mapFn: (previousQueryResult: TData, options: Pick<WatchQueryOptions<TVars>, "variables">) => TData): void;
+    //     private getCurrentQueryResult;
+    //     startPolling(pollInterval: number): void;
+    //     stopPolling(): void;
+    //     private updateLastResult;
+    //     private onSubscribe;
+    //     private reobserver?;
+    //     private getReobserver;
+    //     private newReobserver;
+    //     reobserve(newOptions?: Partial<WatchQueryOptions<TVariables>>, newNetworkStatus?: NetworkStatus): Promise<ApolloQueryResult<TData>>;
+    //     private observer;
+    //     private tearDownQuery;
+    // }
+    type t<'jsData>
+
+    // ...extends Observable<ApolloQueryResult<TData>>
+    // <R>(callback: (value: T) => R): Observable<R>;
+    @bs.send external map: (t<'t>, 't => 'r) => t<'r> = "map"
+    let fakeMap: (t<'t>, ('t, Js.Exn.t => unit) => option<'r>) => t<'r> = (js, fn) =>
+      @ocaml.doc("
+          * We should be able to just map, but it's broken:
+          * https://github.com/apollographql/apollo-client/issues/6144
+          * This is not any sort of real map, of course. It just returns an observable
+          * with a subcribe method that builds the transformation into onNext :(
+          ")
+      %raw(`
+            function (js, fn) {
+              var originalSubscribe = js.subscribe.bind(js);
+              js.subscribe = function (onNext, onError, onComplete) {
+                var newOnNext = function (result) {
+                  var parsedData = result.data ? fn(result.data, onError) : undefined;
+                  var transformedResult = parsedData
+                    ? Object.assign({}, result, { data: parsedData })
+                    : result;
+                  return onNext(transformedResult);
+                };
+                return originalSubscribe(newOnNext, onError, onComplete);
+              };
+              return js;
+            }
+          `)(js, fn)
+
+    // ...extends Observable<ApolloQueryResult<TData>>
+    // (onNext: (value: T) => void, onError?: (error: any) => void, onComplete?: () => void): ZenObservable.Subscription;
+    @bs.send
+    external subscribe: (
+      t<'jsData>,
+      ~onNext: ApolloQueryResult.Js_.t<'jsData> => unit,
+      ~onError: Js.Json.t => unit=?,
+      ~onComplete: unit => unit=?,
+      unit,
+    ) => Subscription.Js_.t = "subscribe"
+  }
+
+  type t<'data> = {
+    @bs.as("rescript_subscribe")
+    subscribe: (
+      ~onNext: ApolloQueryResult.t<'data> => unit,
+      ~onError: Js.Json.t => unit=?,
+      ~onComplete: unit => unit=?,
+      unit,
+    ) => Subscription.t,
+  }
+
+  external castFromJs: Js_.t<'data> => t<'data> = "%identity"
+
+  external castToJs: t<'data> => Js_.t<'data> = "%identity"
+
+  let preserveJsPropsAndContext: (Js_.t<'jsData>, t<'data>) => t<'data> = (js, t) =>
+    %bs.raw(`
+          function (js, t) {
+            return Object.assign(js, t)
+          }
+        `)(js, t)
+
+  let fromJs: (Js_.t<'jsData>, ~safeParse: Types.safeParse<'data, 'jsData>) => t<'data> = (
+    js,
+    ~safeParse,
+  ) => {
+    let parseWithOnErrorCall = (jsData, onError) =>
+      switch safeParse(jsData) {
+      | Ok(data) => Some(data)
+      | Error({error}) =>
+        onError(error)
+        None
+      }
+
+    let observableWithParsedData = js->Js_.fakeMap(parseWithOnErrorCall)
+
+    preserveJsPropsAndContext(
+      observableWithParsedData,
+      {
+        subscribe: (~onNext, ~onError=?, ~onComplete=?, ()) =>
+          js
+          ->Js_.subscribe(
+            ~onNext=jsApolloQueryResult =>
+              onNext(jsApolloQueryResult->ApolloQueryResult.fromJs(~safeParse)),
+            ~onError?,
+            ~onComplete?,
+            (),
+          )
+          ->Subscription.fromJs,
+      },
+    )
+  }
+}
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_Types.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_Types.cmi
new file mode 100644
index 0000000..85d047a
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_Types.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_Types.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_Types.cmj
new file mode 100644
index 0000000..3a30486
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_Types.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_Types.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_Types.cmt
new file mode 100644
index 0000000..90d6664
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_Types.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_Types.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_Types.res
new file mode 100644
index 0000000..b3152a8
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_Types.res
@@ -0,0 +1,198 @@
+module ApolloError = ApolloClient__Errors_ApolloError
+module Graphql = ApolloClient__Graphql
+module FetchResult = ApolloClient__Link_Core_Types.FetchResult
+module NetworkStatus = ApolloClient__Core_NetworkStatus.NetworkStatus
+module Resolver = ApolloClient__Core_LocalState.Resolver
+module Types = ApolloClient__Types
+module Utils = ApolloClient__Utils
+
+module OperationVariables = {
+  module Js_ = {
+    // export declare type OperationVariables = Record<string, any>;
+    type t = Js.Json.t
+  }
+  type t = Js_.t
+}
+
+module PureQueryOptions = {
+  module Js_ = {
+    // export declare type PureQueryOptions = {
+    //     query: DocumentNode;
+    //     variables?: {
+    //         [key: string]: any;
+    //     };
+    //     context?: any;
+    // };
+    type t<'jsVariables> = {
+      query: Graphql.documentNode,
+      // We don't allow optional variables because it's not typesafe
+      variables: 'jsVariables,
+      context: option<Js.Json.t>,
+    }
+  }
+
+  type t<'jsVariables> = {
+    query: Graphql.documentNode,
+    variables: 'jsVariables,
+    context: option<Js.Json.t>,
+  }
+
+  let toJs: t<'jsVariables> => Js_.t<'jsVariables> = t => {
+    query: t.query,
+    variables: t.variables,
+    context: t.context,
+  }
+}
+
+module ApolloQueryResult = {
+  module Js_ = {
+    // export declare type ApolloQueryResult<T> = {
+    //     data?: T;
+    //     errors?: ReadonlyArray<GraphQLError>;
+    //     loading: boolean;
+    //     networkStatus: NetworkStatus;
+    // };
+    type t<'jsData> = {
+      data: option<'jsData>,
+      errors: option<array<Graphql.Error.GraphQLError.t>>,
+      loading: bool,
+      networkStatus: int,
+    }
+  }
+
+  type t<'data> = {
+    data: option<'data>,
+    @ocaml.doc("
+     * Intentionally elevated from array(Graphql.Error.GraphQLError.t) to ApolloError.
+     * This allows us to incorporate network and parse failures into a single result.
+     ")
+    error: option<ApolloError.t>,
+    loading: bool,
+    networkStatus: NetworkStatus.t,
+  }
+
+  let fromJs: (Js_.t<'jsData>, ~safeParse: Types.safeParse<'data, 'jsData>) => t<'data> = (
+    js,
+    ~safeParse,
+  ) => {
+    let (data, error) = Utils.safeParseAndLiftToCommonResultProps(
+      ~jsData=js.data,
+      ~graphQLErrors=?js.errors,
+      safeParse,
+    )
+
+    {
+      data: data,
+      error: error,
+      loading: js.loading,
+      networkStatus: js.networkStatus->NetworkStatus.fromJs,
+    }
+  }
+
+  let fromError: ApolloError.t => t<'data> = error => {
+    data: None,
+    error: Some(error),
+    loading: false,
+    networkStatus: Error,
+  }
+
+  type t__ok<'data> = {
+    data: 'data,
+    error: option<ApolloError.t>,
+    loading: bool,
+    networkStatus: NetworkStatus.t,
+  }
+
+  let toResult: t<'data> => Belt.Result.t<t__ok<'data>, ApolloError.t> = apolloQueryResult =>
+    switch apolloQueryResult {
+    | {data: Some(data)} =>
+      Ok({
+        data: data,
+        error: apolloQueryResult.error,
+        loading: apolloQueryResult.loading,
+        networkStatus: apolloQueryResult.networkStatus,
+      })
+    | {error: Some(error)} => Error(error)
+    | {data: None, error: None} =>
+      Error(
+        ApolloError.make(
+          ~errorMessage="No data and no error on ApolloQueryResult.t. Shouldn't this be impossible?",
+          (),
+        ),
+      )
+    }
+}
+
+module MutationQueryReducer = {
+  module Js_ = {
+    // export declare type MutationQueryReducer<T> = (previousResult: Record<string, any>, options: {
+    //     mutationResult: FetchResult<T>;
+    //     queryName: string | undefined;
+    //     queryVariables: Record<string, any>;
+    // }) => Record<string, any>;
+    type options<'jsData> = {
+      mutationResult: FetchResult.Js_.t<'jsData>,
+      queryName: option<string>,
+      queryVariables: Js.Json.t, // ACTUAL: Record<string, any>
+    }
+
+    type t<'jsData> = (. Js.Json.t, options<'jsData>) => Js.Json.t
+  }
+
+  type options<'data> = {
+    mutationResult: FetchResult.t<'data>,
+    queryName: option<string>,
+    queryVariables: Js.Json.t, // ACTUAL: Record<string, any>
+  }
+
+  type t<'data> = (Js.Json.t, options<'data>) => Js.Json.t
+
+  let toJs: (
+    t<'data>,
+    ~safeParse: Types.safeParse<'data, 'jsData>,
+    . Js.Json.t,
+    Js_.options<'jsData>,
+  ) => Js.Json.t = (t, ~safeParse, . previousResult, jsOptions) =>
+    t(
+      previousResult,
+      {
+        mutationResult: jsOptions.mutationResult->FetchResult.fromJs(~safeParse),
+        queryName: jsOptions.queryName,
+        queryVariables: jsOptions.queryVariables,
+      },
+    )
+}
+
+module MutationQueryReducersMap = {
+  module Js_ = {
+    // export declare type MutationQueryReducersMap<T = {
+    //     [key: string]: any;
+    // }> = {
+    //     [queryName: string]: MutationQueryReducer<T>;
+    // };
+    type t<'jsData> = Js.Dict.t<MutationQueryReducer.Js_.t<'jsData>>
+  }
+
+  type t<'data> = Js.Dict.t<MutationQueryReducer.t<'data>>
+
+  let toJs: (t<'data>, ~safeParse: Types.safeParse<'data, 'jsData>) => Js_.t<'jsData> = (
+    t,
+    ~safeParse,
+  ) =>
+    Js.Dict.map(
+      (. mutationQueryReducer) => mutationQueryReducer->MutationQueryReducer.toJs(~safeParse),
+      t,
+    )
+}
+
+module Resolvers = {
+  module Js_ = {
+    // export interface Resolvers {
+    //     [key: string]: {
+    //         [field: string]: Resolver;
+    //     };
+    // }
+    type t = Js.Dict.t<Js.Dict.t<Resolver.Js_.t>>
+  }
+  type t = Js_.t
+}
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_WatchQueryOptions.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_WatchQueryOptions.cmi
new file mode 100644
index 0000000..aa64196
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_WatchQueryOptions.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_WatchQueryOptions.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_WatchQueryOptions.cmj
new file mode 100644
index 0000000..7803158
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_WatchQueryOptions.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_WatchQueryOptions.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_WatchQueryOptions.cmt
new file mode 100644
index 0000000..4fad925
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_WatchQueryOptions.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_WatchQueryOptions.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_WatchQueryOptions.res
new file mode 100644
index 0000000..7f6de73
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Core_WatchQueryOptions.res
@@ -0,0 +1,423 @@
+module ApolloCache = ApolloClient__Cache_Core_Cache.ApolloCache
+module FetchResult = ApolloClient__Link_Core_Types.FetchResult
+module Graphql = ApolloClient__Graphql
+module MutationQueryReducersMap = ApolloClient__Core_Types.MutationQueryReducersMap
+module Types = ApolloClient__Types
+module PureQueryOptions = ApolloClient__Core_Types.PureQueryOptions
+
+module ErrorPolicy = {
+  module Js_ = {
+    // export declare type ErrorPolicy = 'none' | 'ignore' | 'all';
+    type t = string
+  }
+
+  type t =
+    | None
+    | Ignore
+    | All
+
+  let toJs = x =>
+    switch x {
+    | None => "none"
+    | Ignore => "ignore"
+    | All => "all"
+    }
+}
+
+module FetchPolicy = {
+  module Js_ = {
+    // export declare type FetchPolicy = 'cache-first' | 'network-only' | 'cache-only' | 'no-cache' | 'standby';
+    type t = string
+  }
+
+  type t =
+    | CacheFirst
+    | CacheOnly
+    | NetworkOnly
+    | NoCache
+    | Standby
+
+  let toJs = x =>
+    switch x {
+    | CacheFirst => "cache-first"
+    | CacheOnly => "cache-only"
+    | NetworkOnly => "network-only"
+    | NoCache => "no-cache"
+    | Standby => "standby"
+    }
+}
+
+module FetchPolicy__noCacheExtracted = {
+  module Js_ = {
+    // Extract<FetchPolicy, 'no-cache'>
+    type t = string
+  }
+  type t = NoCache
+
+  let toJs = x =>
+    switch x {
+    | NoCache => "no-cache"
+    }
+}
+
+module WatchQueryFetchPolicy = {
+  module Js_ = {
+    // export declare type WatchQueryFetchPolicy = FetchPolicy | 'cache-and-network';
+    type t = string
+  }
+
+  type t =
+    | CacheAndNetwork
+    | CacheFirst
+    | CacheOnly
+    | NetworkOnly
+    | NoCache
+    | Standby
+
+  let toJs = x =>
+    switch x {
+    | CacheAndNetwork => "cache-and-network"
+    | CacheFirst => "cache-first"
+    | CacheOnly => "cache-only"
+    | NetworkOnly => "network-only"
+    | NoCache => "no-cache"
+    | Standby => "standby"
+    }
+}
+
+module QueryOptions = {
+  module Js_ = {
+    type t<'jsVariables> = {
+      fetchPolicy: option<FetchPolicy.Js_.t>,
+      // ...extends QueryBaseOptions
+      query: Graphql.documentNode,
+      // We don't allow optional variables because it's not typesafe
+      variables: 'jsVariables,
+      errorPolicy: option<ErrorPolicy.Js_.t>,
+      context: option<Js.Json.t>,
+    }
+  }
+
+  type t<'jsVariables> = {
+    fetchPolicy: option<FetchPolicy.t>,
+    query: Graphql.documentNode,
+    variables: 'jsVariables,
+    errorPolicy: option<ErrorPolicy.t>,
+    context: option<Js.Json.t>,
+  }
+
+  let toJs: (
+    t<'variables>,
+    ~mapJsVariables: 'jsVariables => 'jsVariables,
+    ~serializeVariables: 'variables => 'jsVariables,
+  ) => Js_.t<'jsVariables> = (t, ~mapJsVariables, ~serializeVariables) => {
+    fetchPolicy: t.fetchPolicy->Belt.Option.map(FetchPolicy.toJs),
+    query: t.query,
+    variables: t.variables->serializeVariables->mapJsVariables,
+    errorPolicy: t.errorPolicy->Belt.Option.map(ErrorPolicy.toJs),
+    context: t.context,
+  }
+}
+
+module WatchQueryOptions = {
+  module Js_ = {
+    type t<'jsVariables> = {
+      fetchPolicy: option<WatchQueryFetchPolicy.Js_.t>,
+      // ...extends QueryBaseOptions
+      query: Graphql.documentNode,
+      // We don't allow optional variables because it's not typesafe
+      variables: 'jsVariables,
+      errorPolicy: option<ErrorPolicy.Js_.t>,
+      context: option<Js.Json.t>,
+    }
+  }
+
+  type t<'jsVariables> = {
+    fetchPolicy: option<WatchQueryFetchPolicy.t>,
+    query: Graphql.documentNode,
+    variables: 'jsVariables,
+    errorPolicy: option<ErrorPolicy.t>,
+    context: option<Js.Json.t>,
+  }
+
+  let toJs: (
+    t<'variables>,
+    ~mapJsVariables: 'jsVariables => 'jsVariables,
+    ~serializeVariables: 'variables => 'jsVariables,
+  ) => Js_.t<'jsVariables> = (t, ~mapJsVariables, ~serializeVariables) => {
+    fetchPolicy: t.fetchPolicy->Belt.Option.map(WatchQueryFetchPolicy.toJs),
+    query: t.query,
+    variables: t.variables->serializeVariables->mapJsVariables,
+    errorPolicy: t.errorPolicy->Belt.Option.map(ErrorPolicy.toJs),
+    context: t.context,
+  }
+}
+
+module UpdateQueryFn = {
+  module Js_ = {
+    type t_options_subscriptionData<'jsSubscriptionData> = {data: 'jsSubscriptionData}
+    type t_options<'jsSubscriptionData, 'jsVariables> = {
+      subscriptionData: t_options_subscriptionData<'jsSubscriptionData>,
+    }
+    // export declare type UpdateQueryFn<TData = any, TSubscriptionVariables = OperationVariables, TSubscriptionData = TData> = (previousQueryResult: TData, options: {
+    //     subscriptionData: {
+    //         data: TSubscriptionData;
+    //     };
+    //     variables?: TSubscriptionVariables;
+    // }) => TData;
+    type t<'jsQueryData, 'subscriptionVariables, 'jsSubscriptionData> = (
+      . 'jsQueryData,
+      t_options<'jsSubscriptionData, 'subscriptionVariables>,
+    ) => 'jsQueryData
+  }
+  type t_options_subscriptionData<'jsSubscriptionData> = {data: 'jsSubscriptionData}
+  type t_options<'jsSubscriptionData, 'jsVariables> = {
+    subscriptionData: t_options_subscriptionData<'jsSubscriptionData>,
+  }
+
+  type t<'queryData, 'subscriptionVariables, 'subscriptionData> = (
+    'queryData,
+    t_options<'subscriptionData, 'subscriptionVariables>,
+  ) => 'queryData
+
+  let toJs: (
+    t<'queryData, 'subscriptionVariables, 'subscriptionData>,
+    ~onParseError: Types.parseError => unit,
+    ~querySafeParse: Types.safeParse<'queryData, 'jsQueryData>,
+    ~querySerialize: 'queryData => 'jsQueryData,
+    ~subscriptionSafeParse: Types.safeParse<'subscriptionData, 'jsSubscriptionData>,
+  ) => Js_.t<'jsQueryData, 'subscriptionVariables, 'jsSubscriptionData> = (
+    t,
+    ~onParseError,
+    ~querySafeParse,
+    ~querySerialize,
+    ~subscriptionSafeParse,
+    . jsQueryData,
+    {subscriptionData: {data}},
+  ) =>
+    switch (jsQueryData->querySafeParse, data->subscriptionSafeParse) {
+    | (Ok(queryData), Ok(subscriptionData)) =>
+      t(
+        queryData,
+        {
+          subscriptionData: {
+            data: subscriptionData,
+          },
+        },
+      )->querySerialize
+    | (Error(parseError), _)
+    | (_, Error(parseError)) =>
+      onParseError(parseError)
+      jsQueryData
+    }
+}
+
+module SubscribeToMoreOptions = {
+  module Js_ = {
+    // export declare type SubscribeToMoreOptions<TData = any, TSubscriptionVariables = OperationVariables, TSubscriptionData = TData> = {
+    //     document: DocumentNode;
+    //     variables?: TSubscriptionVariables;
+    //     updateQuery?: UpdateQueryFn<TData, TSubscriptionVariables, TSubscriptionData>;
+    //     onError?: (error: Error) => void;
+    //     context?: Record<string, any>;
+    // };
+
+    type t<'jsQueryData, 'subscriptionVariables, 'jsSubscriptionData> = {
+      document: Graphql.documentNode,
+      // We don't allow optional variables because it's not typesafe
+      variables: 'subscriptionVariables,
+      updateQuery: option<
+        UpdateQueryFn.Js_.t<'jsQueryData, 'subscriptionVariables, 'jsSubscriptionData>,
+      >,
+      onError: option<Js.Exn.t => unit>,
+      context: option<Js.Json.t>,
+    }
+  }
+
+  type t<'queryData, 'subscriptionVariables, 'subscriptionData> = {
+    document: Graphql.documentNode,
+    variables: 'subscriptionVariables,
+    updateQuery: option<UpdateQueryFn.t<'queryData, 'subscriptionVariables, 'subscriptionData>>,
+    onError: option<Js.Exn.t => unit>,
+    context: option<Js.Json.t>,
+  }
+
+  let toJs: (
+    t<'queryData, 'subscriptionVariables, 'subscriptionData>,
+    ~onUpdateQueryParseError: Types.parseError => unit,
+    ~querySafeParse: Types.safeParse<'queryData, 'jsQueryData>,
+    ~querySerialize: 'queryData => 'jsQueryData,
+    ~subscriptionSafeParse: Types.safeParse<'subscriptionData, 'jsSubscriptionData>,
+  ) => Js_.t<'jsQueryData, 'subscriptionVariables, 'jsSubscriptionData> = (
+    t,
+    ~onUpdateQueryParseError,
+    ~querySafeParse,
+    ~querySerialize,
+    ~subscriptionSafeParse,
+  ) => {
+    document: t.document,
+    variables: t.variables,
+    updateQuery: t.updateQuery->Belt.Option.map(
+      UpdateQueryFn.toJs(
+        ~onParseError=onUpdateQueryParseError,
+        ~querySafeParse,
+        ~querySerialize,
+        ~subscriptionSafeParse,
+      ),
+    ),
+    onError: t.onError,
+    context: t.context,
+  }
+}
+
+module SubscriptionOptions = {
+  module Js_ = {
+    // export interface SubscriptionOptions<TVariables = OperationVariables, TData = any> {
+    //     query: DocumentNode | TypedDocumentNode<TData, TVariables>;
+    //     variables?: TVariables;
+    //     fetchPolicy?: FetchPolicy;
+    //     errorPolicy?: ErrorPolicy;
+    //     context?: Record<string, any>;
+    // }
+    type t<'jsVariables> = {
+      query: Graphql.documentNode,
+      // We don't allow optional variables because it's not typesafe
+      variables: 'jsVariables,
+      fetchPolicy: option<FetchPolicy.Js_.t>,
+      errorPolicy: option<ErrorPolicy.Js_.t>,
+      context: option<Js.Json.t>,
+    }
+  }
+
+  type t<'variables> = {
+    query: Graphql.documentNode,
+    variables: 'variables,
+    fetchPolicy: option<FetchPolicy.t>,
+    errorPolicy: option<ErrorPolicy.t>,
+    context: option<Js.Json.t>,
+  }
+
+  let toJs: (
+    t<'variables>,
+    ~mapJsVariables: 'jsVariables => 'jsVariables,
+    ~serializeVariables: 'varibles => 'jsVariables,
+  ) => Js_.t<'jsVariables> = (t, ~mapJsVariables, ~serializeVariables) => {
+    query: t.query,
+    variables: t.variables->serializeVariables->mapJsVariables,
+    fetchPolicy: t.fetchPolicy->Belt.Option.map(FetchPolicy.toJs),
+    errorPolicy: t.errorPolicy->Belt.Option.map(ErrorPolicy.toJs),
+    context: t.context,
+  }
+}
+
+module MutationUpdaterFn = {
+  module Js_ = {
+    type t<'jsData> = (. ApolloCache.t<Js.Json.t>, FetchResult.Js_.t<'jsData>) => unit // Non-Js_ cache is correct here
+  }
+
+  type t<'data> = (ApolloCache.t<Js.Json.t>, FetchResult.t<'data>) => unit
+
+  let toJs: (t<'data>, ~safeParse: Types.safeParse<'data, 'jsData>) => Js_.t<'jsData> = (
+    mutationUpdaterFn,
+    ~safeParse,
+    . cache,
+    jsFetchResult,
+  ) => mutationUpdaterFn(cache, jsFetchResult->FetchResult.fromJs(~safeParse))
+}
+
+module RefetchQueryDescription = {
+  module Js_ = {
+    module Union: {
+      type t
+      let string: string => t
+      let pureQueryOptions: PureQueryOptions.Js_.t<_> => t
+    } = {
+      @unboxed
+      type rec t = Any('a): t
+      let string = (v: string) => Any(v)
+      let pureQueryOptions = (v: PureQueryOptions.Js_.t<_>) => Any(v)
+    }
+
+    type t = array<Union.t>
+  }
+
+  type rec t_variant =
+    | PureQueryOptions(PureQueryOptions.t<'jsVariables>): t_variant
+    | String(string): t_variant
+
+  type t = array<t_variant>
+
+  let toJs: t => Js_.t = Belt.Array.map(_, x =>
+    switch x {
+    | PureQueryOptions(options) => Js_.Union.pureQueryOptions(options->PureQueryOptions.toJs)
+    | String(string) => Js_.Union.string(string)
+    }
+  )
+}
+
+module MutationOptions = {
+  module Js_ = {
+    // export interface MutationOptions<T = {
+    //     [key: string]: any;
+    // }, TVariables = OperationVariables> extends MutationBaseOptions<T, TVariables> {
+    //     mutation: DocumentNode;
+    //     context?: any;
+    //     fetchPolicy?: Extract<FetchPolicy, 'no-cache'>;
+    // }
+    type t<'jsData, 'jsVariables> = {
+      mutation: Graphql.documentNode,
+      context: option<Js.Json.t>,
+      fetchPolicy: option<FetchPolicy__noCacheExtracted.Js_.t>,
+      // ...extends MutationBaseOption,
+      awaitRefetchQueries: option<bool>,
+      errorPolicy: option<ErrorPolicy.Js_.t>,
+      optimisticResponse: option<(. 'jsVariables) => 'jsData>,
+      update: option<MutationUpdaterFn.Js_.t<'jsData>>,
+      updateQueries: option<MutationQueryReducersMap.Js_.t<'jsData>>,
+      refetchQueries: option<RefetchQueryDescription.Js_.t>,
+      // We don't allow optional variables because it's not typesafe
+      variables: 'jsVariables,
+    }
+  }
+
+  type t<'data, 'variables, 'jsVariables> = {
+    context: option<Js.Json.t>,
+    fetchPolicy: option<FetchPolicy__noCacheExtracted.t>,
+    mutation: Graphql.documentNode,
+    // ...extends MutationBaseOptions,
+    awaitRefetchQueries: option<bool>,
+    errorPolicy: option<ErrorPolicy.t>,
+    optimisticResponse: option<'jsVariables => 'data>,
+    refetchQueries: option<RefetchQueryDescription.t>,
+    update: option<MutationUpdaterFn.t<'data>>,
+    updateQueries: option<MutationQueryReducersMap.t<'data>>,
+    variables: 'variables,
+  }
+
+  let toJs: (
+    t<'data, 'variables, 'jsVariables>,
+    ~mapJsVariables: 'jsVariables => 'jsVariables,
+    ~safeParse: Types.safeParse<'data, 'jsData>,
+    ~serialize: 'data => 'jsData,
+    ~serializeVariables: 'variables => 'jsVariables,
+  ) => Js_.t<'jsData, 'jsVariables> = (
+    t,
+    ~mapJsVariables,
+    ~safeParse,
+    ~serialize,
+    ~serializeVariables,
+  ) => {
+    awaitRefetchQueries: t.awaitRefetchQueries,
+    context: t.context,
+    errorPolicy: t.errorPolicy->Belt.Option.map(ErrorPolicy.toJs),
+    fetchPolicy: t.fetchPolicy->Belt.Option.map(FetchPolicy__noCacheExtracted.toJs),
+    mutation: t.mutation,
+    optimisticResponse: t.optimisticResponse->Belt.Option.map((optimisticResponse, . variables) =>
+      optimisticResponse(variables)->serialize
+    ),
+    refetchQueries: t.refetchQueries->Belt.Option.map(RefetchQueryDescription.toJs),
+    update: t.update->Belt.Option.map(MutationUpdaterFn.toJs(~safeParse)),
+    updateQueries: t.updateQueries->Belt.Option.map(MutationQueryReducersMap.toJs(~safeParse)),
+    variables: t.variables->serializeVariables->mapJsVariables,
+  }
+}
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Errors.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Errors.cmi
new file mode 100644
index 0000000..e8e145d
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Errors.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Errors.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Errors.cmj
new file mode 100644
index 0000000..bb59caf
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Errors.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Errors.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Errors.cmt
new file mode 100644
index 0000000..d38411a
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Errors.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Errors.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Errors.res
new file mode 100644
index 0000000..4f07872
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Errors.res
@@ -0,0 +1 @@
+module ApolloError = ApolloClient__Errors_ApolloError
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Errors_ApolloError.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Errors_ApolloError.cmi
new file mode 100644
index 0000000..27fec92
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Errors_ApolloError.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Errors_ApolloError.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Errors_ApolloError.cmj
new file mode 100644
index 0000000..0be1423
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Errors_ApolloError.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Errors_ApolloError.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Errors_ApolloError.cmt
new file mode 100644
index 0000000..fd699af
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Errors_ApolloError.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Errors_ApolloError.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Errors_ApolloError.res
new file mode 100644
index 0000000..16e2475
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Errors_ApolloError.res
@@ -0,0 +1,171 @@
+module Graphql = ApolloClient__Graphql
+module GraphQLError = ApolloClient__Graphql.Error.GraphQLError
+module ServerError = ApolloClient__Link_Utils_ThrowServerError.ServerError
+module ServerParseError = ApolloClient__Link_Http_ParseAndCheckHttpResponse.ServerParseError
+module Types = ApolloClient__Types
+
+@unboxed
+type rec any = Any('a): any
+
+let ensureError: any => Js.Exn.t = %bs.raw(`
+  function (unknown) {
+    if (unknown instanceof Error) {
+      return unknown;
+    } else {
+      unknown = unknown || {};
+      const message = unknown.message;
+      const errorMessage = unknown.errorMessage;
+      const keys = Object.keys(unknown);
+      const error = new Error(message || errorMessage || "[Non-error exception with keys: " + keys.join(", ") + "]");
+
+      keys.forEach(function(key) {
+        error[key] = unknown[key];
+      });
+
+      return error;
+    }
+  }
+  `)
+
+module Js_ = {
+  module NetworkErrorUnion: {
+    type t
+    let error: Js.Exn.t => t
+    let serverError: ServerError.Js_.t => t
+    let serverParseError: ServerParseError.Js_.t => t
+    type case =
+      | Error(Js.Exn.t)
+      | ServerError(ServerError.Js_.t)
+      | ServerParseError(ServerParseError.Js_.t)
+    let classify: t => case
+  } = {
+    @unboxed
+    type rec t = Any('a): t
+    let error = (v: Js.Exn.t) => Any(v)
+    let serverError = (v: ServerError.Js_.t) => Any(v)
+    let serverParseError = (v: ServerParseError.Js_.t) => Any(v)
+    type case =
+      | Error(Js.Exn.t)
+      | ServerError(ServerError.Js_.t)
+      | ServerParseError(ServerParseError.Js_.t)
+    let classify = (Any(v): t): case =>
+      if %raw(`function (v) { return "bodyText" in v && "response" in v && "statusCode" in v}`)(v) {
+        ServerError((Obj.magic(v): ServerError.Js_.t))
+      } else if (
+        %raw(`function (v) { return "result" in v && "response" in v && "statusCode" in v}`)(v)
+      ) {
+        ServerParseError((Obj.magic(v): ServerParseError.Js_.t))
+      } else {
+        Error((Obj.magic(v): Js.Exn.t))
+      }
+  }
+  // export declare class ApolloError extends Error {
+  //     message: string;
+  //     graphQLErrors: ReadonlyArray<GraphQLError>;
+  //     networkError: Error | ServerParseError | ServerError | null;
+  //     extraInfo: any;
+  // }
+  type t = {
+    extraInfo: Js.Json.t,
+    @ocaml.doc("
+     This is not actually optional, but apollo-client casts an any to ApolloError in
+     SubscriptionData, and doesn't check the error at all which results in GraphQLErrors
+     masquerading as ApolloErrors (no graphqlErrors property).
+     See: https://github.com/apollographql/apollo-client/pull/6894
+     ")
+    graphQLErrors: option<array<Graphql.Error.GraphQLError.t>>,
+    networkError: Js.nullable<NetworkErrorUnion.t>,
+    // ...extends Error
+    name: string,
+    message: string,
+    stack: option<string>,
+  }
+
+  type make_args = {
+    graphQLErrors: option<array<GraphQLError.t>>,
+    networkError: Js.nullable<NetworkErrorUnion.t>,
+    errorMessage: option<string>,
+    extraInfo: option<Js.Json.t>,
+  }
+
+  // constructor({ graphQLErrors, networkError, errorMessage, extraInfo, }: {
+  //     graphQLErrors?: ReadonlyArray<GraphQLError>;
+  //     networkError?: Error | ServerParseError | ServerError | null;
+  //     errorMessage?: string;
+  //     extraInfo?: any;
+  // });
+  @bs.module("@apollo/client") @bs.new
+  external make: make_args => t = "ApolloError"
+
+  // This is not an exhaustive check. It is intended to address the most common subscription error issues only
+  // See: https://github.com/apollographql/apollo-client/pull/6894
+  let ensureApolloError: t => t = error =>
+    %bs.raw(`
+          function (error, makeApolloError, ensureError) {
+            var error = error || {};
+            if (Array.isArray(error.graphQLErrors)) {
+              return error;
+            } else if (error && typeof error.message === "string" && error.extensions) {
+              return makeApolloError({graphQLErrors: [error]});
+            } else {
+              return makeApolloError({networkError: ensureError(error)}) 
+            }
+          }
+        `)(error, make, ensureError)
+}
+
+type t_networkError =
+  /* Fetch threw an error for some reason and we caught it */
+  | FetchFailure(Js.Exn.t)
+  /* Fetch got a response, but the status code was >=300 */
+  | BadStatus(int, ServerError.t)
+  /* Fetch got a response, but it wasn't JSON */
+  | BadBody(ServerParseError.t)
+  /* We got a JSON response, but it wasn't in a shape we could parse */
+  | ParseError(Types.parseError) // ParseError is rescript-apollo-client only
+
+type t = {
+  extraInfo: Js.Json.t,
+  graphQLErrors: array<Graphql.Error.GraphQLError.t>,
+  networkError: option<t_networkError>,
+  name: string,
+  message: string,
+  stack: option<string>,
+}
+
+let fromJs: Js_.t => t = untrustedJs => {
+  let js = Js_.ensureApolloError(untrustedJs)
+  {
+    extraInfo: js.extraInfo,
+    graphQLErrors: js.graphQLErrors->Belt.Option.getWithDefault([]),
+    networkError: js.networkError
+    ->Js.toOption
+    ->Belt.Option.map(networkError =>
+      switch networkError->Js_.NetworkErrorUnion.classify {
+      | Error(error) => FetchFailure(error)
+      | ServerError(error) => BadStatus(error.statusCode, error)
+      | ServerParseError(error) => BadBody(error)
+      }
+    ),
+    name: js.name,
+    message: js.message,
+    stack: js.stack,
+  }
+}
+
+let make: (
+  ~graphQLErrors: array<GraphQLError.t>=?,
+  ~networkError: t_networkError=?,
+  ~errorMessage: string=?,
+  ~extraInfo: Js.Json.t=?,
+  unit,
+) => t = (~graphQLErrors=?, ~networkError=?, ~errorMessage=?, ~extraInfo=?, ()) => {
+  let errorWithoutNetworkError = Js_.make({
+    graphQLErrors: graphQLErrors,
+    networkError: Js.Nullable.undefined,
+    errorMessage: errorMessage,
+    extraInfo: extraInfo,
+  })->fromJs
+
+  {...errorWithoutNetworkError, networkError: networkError}
+}
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql.cmi
new file mode 100644
index 0000000..415eebf
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql.cmj
new file mode 100644
index 0000000..8b3192a
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql.cmt
new file mode 100644
index 0000000..fb42c25
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql.res
new file mode 100644
index 0000000..42a4bad
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql.res
@@ -0,0 +1,7 @@
+module Error = ApolloClient__Graphql_Error
+module Execution = ApolloClient__Graphql_Execution
+module GraphQLError = ApolloClient__Graphql_Error_GraphQLError
+module Language = ApolloClient__Graphql_Language
+module Location = ApolloClient__Graphql_Location
+
+type documentNode = Language.documentNode
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__GraphqlTag.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__GraphqlTag.cmi
new file mode 100644
index 0000000..652281a
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__GraphqlTag.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__GraphqlTag.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__GraphqlTag.cmj
new file mode 100644
index 0000000..7cb3716
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__GraphqlTag.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__GraphqlTag.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__GraphqlTag.cmt
new file mode 100644
index 0000000..48f2847
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__GraphqlTag.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__GraphqlTag.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__GraphqlTag.res
new file mode 100644
index 0000000..4933dea
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__GraphqlTag.res
@@ -0,0 +1,2 @@
+@bs.module("@apollo/client")
+external gql: string => ApolloClient__Graphql.Language.documentNode = "gql"
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Error.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Error.cmi
new file mode 100644
index 0000000..bdc16f4
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Error.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Error.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Error.cmj
new file mode 100644
index 0000000..8ba12b7
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Error.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Error.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Error.cmt
new file mode 100644
index 0000000..feb1435
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Error.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Error.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Error.res
new file mode 100644
index 0000000..e10712e
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Error.res
@@ -0,0 +1 @@
+module GraphQLError = ApolloClient__Graphql_Error_GraphQLError
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Error_GraphQLError.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Error_GraphQLError.cmi
new file mode 100644
index 0000000..efbc68f
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Error_GraphQLError.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Error_GraphQLError.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Error_GraphQLError.cmj
new file mode 100644
index 0000000..8ba12b7
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Error_GraphQLError.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Error_GraphQLError.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Error_GraphQLError.cmt
new file mode 100644
index 0000000..b56426c
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Error_GraphQLError.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Error_GraphQLError.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Error_GraphQLError.res
new file mode 100644
index 0000000..b2a5514
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Error_GraphQLError.res
@@ -0,0 +1,35 @@
+module Ast = ApolloClient__Graphql_Language_Ast
+module Location = ApolloClient__Graphql_Location
+module Source = ApolloClient__Graphql_Language_Source.Source
+
+// export class GraphQLError extends Error {
+//   constructor(
+//     message: string,
+//     nodes?: Maybe<ReadonlyArray<ASTNode> | ASTNode>,
+//     source?: Maybe<Source>,
+//     positions?: Maybe<ReadonlyArray<number>>,
+//     path?: Maybe<ReadonlyArray<string | number>>,
+//     originalError?: Maybe<Error>,
+//     extensions?: Maybe<{ [key: string]: any }>,
+//   );
+//   message: string;
+//   readonly locations: ReadonlyArray<SourceLocation> | undefined;
+//   readonly path: ReadonlyArray<string | number> | undefined;
+//   readonly nodes: ReadonlyArray<ASTNode> | undefined;
+//   readonly source: Source | undefined;
+//   readonly positions: ReadonlyArray<number> | undefined;
+//   readonly originalError: Maybe<Error>;
+//   readonly extensions: { [key: string]: any } | undefined;
+// }
+type stringOrNumber
+
+type t = {
+  message: string,
+  locations: option<array<Location.sourceLocation>>,
+  path: option<array<stringOrNumber>>, // TODO: use union for string | number
+  nodes: option<array<Ast.ASTNode.t>>,
+  source: option<Source.t>,
+  position: option<array<int>>,
+  originalError: Js.nullable<Js.Exn.t>,
+  extensions: option<Js.Dict.t<Js.Json.t>>,
+}
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Execution.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Execution.cmi
new file mode 100644
index 0000000..541bd4a
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Execution.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Execution.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Execution.cmj
new file mode 100644
index 0000000..626c95b
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Execution.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Execution.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Execution.cmt
new file mode 100644
index 0000000..92ddab4
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Execution.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Execution.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Execution.res
new file mode 100644
index 0000000..7d27cdd
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Execution.res
@@ -0,0 +1 @@
+module Execute = ApolloClient__Graphql_Execution_Execute
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Execution_Execute.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Execution_Execute.cmi
new file mode 100644
index 0000000..23528b1
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Execution_Execute.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Execution_Execute.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Execution_Execute.cmj
new file mode 100644
index 0000000..30caf93
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Execution_Execute.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Execution_Execute.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Execution_Execute.cmt
new file mode 100644
index 0000000..c307bb9
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Execution_Execute.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Execution_Execute.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Execution_Execute.res
new file mode 100644
index 0000000..a6c0ffb
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Execution_Execute.res
@@ -0,0 +1,13 @@
+module GraphQLError = ApolloClient__Graphql_Error_GraphQLError
+
+module ExecutionResult = {
+  module Js_ = {
+    type t<'tData> = {
+      errors: option<GraphQLError.t>,
+      data: option<'tData>,
+    }
+  }
+
+  // I don't think we want to parse this?
+  type t<'tData> = Js_.t<'tData>
+}
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Language.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Language.cmi
new file mode 100644
index 0000000..7316c5a
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Language.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Language.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Language.cmj
new file mode 100644
index 0000000..8f63fa9
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Language.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Language.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Language.cmt
new file mode 100644
index 0000000..0572bbb
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Language.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Language.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Language.res
new file mode 100644
index 0000000..715ac44
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Language.res
@@ -0,0 +1,3 @@
+module Ast = ApolloClient__Graphql_Language_Ast
+
+type documentNode
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Language_Ast.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Language_Ast.cmi
new file mode 100644
index 0000000..6746c9a
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Language_Ast.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Language_Ast.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Language_Ast.cmj
new file mode 100644
index 0000000..37ac42a
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Language_Ast.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Language_Ast.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Language_Ast.cmt
new file mode 100644
index 0000000..2fb669b
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Language_Ast.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Language_Ast.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Language_Ast.res
new file mode 100644
index 0000000..9819562
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Language_Ast.res
@@ -0,0 +1,181 @@
+module ASTNode = {
+  type t
+}
+
+module Source = ApolloClient__Graphql_Language_Source.Source
+
+// export interface FieldNode {
+//   readonly kind: 'Field';
+//   readonly loc?: Location;
+//   readonly alias?: NameNode;
+//   readonly name: NameNode;
+//   readonly arguments?: ReadonlyArray<ArgumentNode>;
+//   readonly directives?: ReadonlyArray<DirectiveNode>;
+//   readonly selectionSet?: SelectionSetNode;
+// }
+
+module TokenKindEnum = {
+  @bs.deriving(jsConverter)
+  type t = [
+    | #SOF
+    | #EOF
+    | #BANG
+    | #DOLLAR
+    | #AMP
+    | #PAREN_L
+    | #PAREN_R
+    | #SPREAD
+    | #COLON
+    | #EQUALS
+    | #AT
+    | #BRACKET_L
+    | #BRACKET_R
+    | #BRACE_L
+    | #PIPE
+    | #BRACE_R
+    | #NAME
+    | #INT
+    | #FLOAT
+    | #STRING
+    | #BLOCK_STRING
+    | #COMMENT
+  ]
+}
+
+module Token = {
+  type rec t = {
+    kind: TokenKindEnum.t,
+    start: int,
+    @bs.as("end")
+    end_: int,
+    line: int,
+    column: int,
+    value: option<string>,
+    prev: Js.nullable<t>,
+    next: Js.nullable<t>,
+  }
+}
+
+module Location = {
+  type t = {
+    start: int,
+    @bs.as("end")
+    end_: int,
+    startToken: Token.t,
+    endToken: Token.t,
+    source: Source.t,
+  }
+}
+
+module NameNode = {
+  type t = {
+    kind: string,
+    loc: option<Location.t>,
+    value: string,
+  }
+}
+
+module NamedTypeNode = {
+  type t = {
+    kind: string,
+    loc: option<Location.t>,
+    name: NameNode.t,
+  }
+}
+
+module ValueNode = {
+  type t
+}
+
+module ArgumentNode = {
+  type t = {
+    kind: string,
+    loc: option<Location.t>,
+    name: NameNode.t,
+    value: ValueNode.t,
+  }
+}
+
+module DirectiveNode = {
+  type t = {
+    kind: string,
+    loc: option<Location.t>,
+    name: NameNode.t,
+    arguments: option<array<ArgumentNode.t>>,
+  }
+}
+
+module SelectionNode = {
+  type t
+}
+
+module SelectionSetNode = {
+  type t = {
+    kind: string,
+    loc: option<Location.t>,
+    selections: array<SelectionNode.t>,
+  }
+}
+
+module FieldNode = {
+  type t = {
+    kind: string,
+    loc: option<Location.t>,
+    alias: option<NameNode.t>,
+    name: NameNode.t,
+    arguments: option<array<ArgumentNode.t>>,
+    directives: option<array<DirectiveNode.t>>,
+    selectionSet: option<SelectionSetNode.t>,
+  }
+}
+
+module FragmentDefinitionNode = {
+  type t = {
+    kind: string,
+    loc: option<Location.t>,
+    name: NameNode.t,
+    // // Note: fragment variable definitions are experimental and may be changed
+    // // or removed in the future.
+    // readonly variableDefinitions?: ReadonlyArray<VariableDefinitionNode>;
+    typeCondition: NamedTypeNode.t,
+    directives: option<array<DirectiveNode.t>>,
+    selectionSet: SelectionSetNode.t,
+  }
+}
+
+module VariableNode = {
+  type t = {
+    kind: string,
+    loc: option<Location.t>,
+    name: NameNode.t,
+  }
+}
+
+module VariableDefinitionNode = {
+  type t = {
+    kind: string,
+    loc: option<Location.t>,
+    variable: VariableNode.t,
+    // [@bs.as "type"]
+    // type_: TypeNode.t,
+    defaultValue: option<ValueNode.t>,
+    directives: option<array<DirectiveNode.t>>,
+  }
+}
+
+module OperationTypeNode = {
+  // export type OperationTypeNode = 'query' | 'mutation' | 'subscription';
+  type t = string
+}
+
+module OperationDefinitionNode = {
+  type t = {
+    kind: string,
+    loc: option<Location.t>,
+    name: NameNode.t,
+    operation: OperationTypeNode.t,
+    variableDefinitions: option<array<VariableDefinitionNode.t>>,
+    directives: option<array<DirectiveNode.t>>,
+    selectionSet: SelectionSetNode.t,
+  }
+}
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Language_Source.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Language_Source.cmi
new file mode 100644
index 0000000..0e06fae
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Language_Source.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Language_Source.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Language_Source.cmj
new file mode 100644
index 0000000..8f63fa9
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Language_Source.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Language_Source.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Language_Source.cmt
new file mode 100644
index 0000000..987d191
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Language_Source.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Language_Source.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Language_Source.res
new file mode 100644
index 0000000..6775b4b
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Language_Source.res
@@ -0,0 +1,15 @@
+module Location = {
+  type t = {
+    line: int,
+    column: int,
+  }
+}
+
+module Source = {
+  type t = {
+    body: string,
+    name: string,
+    locationOffset: Location.t,
+    //   constructor(body: string, name?: string, locationOffset?: Location);
+  }
+}
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Location.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Location.cmi
new file mode 100644
index 0000000..0bd8079
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Location.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Location.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Location.cmj
new file mode 100644
index 0000000..4616095
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Location.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Location.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Location.cmt
new file mode 100644
index 0000000..7969aa1
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Location.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Location.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Location.res
new file mode 100644
index 0000000..928a700
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Graphql_Location.res
@@ -0,0 +1,4 @@
+type sourceLocation = {
+  line: int,
+  column: int,
+}
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link.cmi
new file mode 100644
index 0000000..4164bc2
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link.cmj
new file mode 100644
index 0000000..2f08f1e
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link.cmt
new file mode 100644
index 0000000..f8f99d5
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link.res
new file mode 100644
index 0000000..a6d0249
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link.res
@@ -0,0 +1,6 @@
+module Context = ApolloClient__Link_Context
+module Core = ApolloClient__Link_Core
+module Error = ApolloClient__Link_Error
+module Http = ApolloClient__Link_Http
+module Utils = ApolloClient__Link_Utils
+module Ws = ApolloClient__Link_Ws
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Context.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Context.cmi
new file mode 100644
index 0000000..0dd6ba7
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Context.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Context.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Context.cmj
new file mode 100644
index 0000000..80d1dae
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Context.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Context.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Context.cmt
new file mode 100644
index 0000000..7859de2
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Context.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Context.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Context.res
new file mode 100644
index 0000000..5e5b3d2
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Context.res
@@ -0,0 +1,30 @@
+module ApolloLink = ApolloClient__Link_Core_ApolloLink
+module GraphQLRequest = ApolloClient__Link_Core_Types.GraphQLRequest
+
+module Js_ = {
+  // export declare type ContextSetter = (operation: GraphQLRequest, prevContext: any) => Promise<any> | any;
+  // export declare function setContext(setter: ContextSetter): ApolloLink;
+  @bs.module("@apollo/client/link/context")
+  external setContext: (
+    (~operation: GraphQLRequest.t, ~prevContext: Js.Json.t) => Js.Json.t
+  ) => ApolloLink.t = "setContext"
+
+  @bs.module("@apollo/client/link/context")
+  external setContextAsync: (
+    (~operation: GraphQLRequest.t, ~prevContext: Js.Json.t) => Js.Promise.t<Js.Json.t>
+  ) => ApolloLink.t = "setContext"
+
+  type async = (~operation: GraphQLRequest.t, ~prevContext: Js.Json.t) => Js.Promise.t<Js.Json.t>
+}
+
+let setContext = Js_.setContext
+
+let setContextAsync: (
+  (~operation: GraphQLRequest.t, ~prevContext: Js.Json.t) => Js.Promise.t<Js.Json.t>
+) => ApolloLink.t = fn => Js_.setContextAsync(fn)
+
+// rescript-specific
+module ContextLink = {
+  let make = setContext
+  let makeAsync = setContextAsync
+}
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Core.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Core.cmi
new file mode 100644
index 0000000..adb7e9f
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Core.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Core.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Core.cmj
new file mode 100644
index 0000000..9f8ca56
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Core.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Core.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Core.cmt
new file mode 100644
index 0000000..bfc33c8
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Core.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Core.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Core.res
new file mode 100644
index 0000000..aea1996
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Core.res
@@ -0,0 +1,2 @@
+module ApolloLink = ApolloClient__Link_Core_ApolloLink
+module Types = ApolloClient__Link_Core_Types
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Core_ApolloLink.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Core_ApolloLink.cmi
new file mode 100644
index 0000000..a118a28
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Core_ApolloLink.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Core_ApolloLink.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Core_ApolloLink.cmj
new file mode 100644
index 0000000..0c37b60
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Core_ApolloLink.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Core_ApolloLink.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Core_ApolloLink.cmt
new file mode 100644
index 0000000..1cdc3e6
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Core_ApolloLink.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Core_ApolloLink.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Core_ApolloLink.res
new file mode 100644
index 0000000..067e6c9
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Core_ApolloLink.res
@@ -0,0 +1,74 @@
+module FetchResult = ApolloClient__Link_Core_Types.FetchResult
+module GraphQLRequest = ApolloClient__Link_Core_Types.GraphQLRequest
+module Observable = ApolloClient__ZenObservable.Observable
+module Operation = ApolloClient__Link_Core_Types.Operation
+module RequestHandler = ApolloClient__Link_Core_Types.RequestHandler
+
+module Js_ = {
+  // export declare class ApolloLink {
+  //     static empty(): ApolloLink;
+  //     static from(links: (ApolloLink | RequestHandler)[]): ApolloLink;
+  //     static split(test: (op: Operation) => boolean, left: ApolloLink | RequestHandler, right?: ApolloLink | RequestHandler): ApolloLink;
+  //     static execute(link: ApolloLink, operation: GraphQLRequest): Observable<FetchResult>;
+  //     static concat(first: ApolloLink | RequestHandler, second: ApolloLink | RequestHandler): ApolloLink;
+  //     constructor(request?: RequestHandler);
+  //     split(test: (op: Operation) => boolean, left: ApolloLink | RequestHandler, right?: ApolloLink | RequestHandler): ApolloLink;
+  //     concat(next: ApolloLink | RequestHandler): ApolloLink;
+  //     request(operation: Operation, forward?: NextLink): Observable<FetchResult> | null;
+  //     protected onError(reason: any): void;
+  //     setOnError(fn: (reason: any) => any): this;
+  // }
+  type t
+
+  module Static = {
+    // static empty(): ApolloLink;
+    @bs.module("@apollo/client") @bs.scope("ApolloLink")
+    external empty: unit => t = "empty"
+    // static from(links: (ApolloLink | RequestHandler)[]): ApolloLink;
+    @bs.module("@apollo/client") @bs.scope("ApolloLink")
+    external from: array<t> => t = "from"
+    // static split(test: (op: Operation) => boolean, left: ApolloLink | RequestHandler, right?: ApolloLink | RequestHandler): ApolloLink;
+    @bs.module("@apollo/client") @bs.scope("ApolloLink")
+    external split: (~test: Operation.Js_.t => bool, ~whenTrue: t, ~whenFalse: t) => t = "split"
+    // static execute(link: ApolloLink, operation: GraphQLRequest): Observable<FetchResult>;
+    @bs.module("@apollo/client") @bs.scope("ApolloLink")
+    external execute: (
+      t,
+      GraphQLRequest.t,
+    ) => Observable.t<FetchResult.Js_.t<Js.Json.t>, Js.Exn.t> = "execute"
+    // static concat(first: ApolloLink | RequestHandler, second: ApolloLink | RequestHandler): ApolloLink;
+    @bs.module("@apollo/client") @bs.scope("ApolloLink")
+    external concat: (t, t) => t = "concat"
+  }
+
+  @bs.module("@apollo/client") @bs.new
+  external make: RequestHandler.Js_.t => t = "ApolloLink"
+
+  @bs.send external concat: (t, t) => t = "concat"
+
+  @bs.send external from: (t, array<t>) => t = "from"
+
+  @bs.send external setOnError: (t, Js.Json.t => unit) => unit = "onError"
+
+  @bs.send
+  external split: (t, ~test: Operation.Js_.t => bool, ~whenTrue: t, ~whenFalse: t) => t = "split"
+}
+
+module Static = Js_.Static
+
+type t = Js_.t
+
+let make: RequestHandler.t => t = requestHandler => Js_.make(requestHandler->RequestHandler.toJs)
+
+let concat = Js_.concat
+
+let from = Js_.from
+
+let setOnError = Js_.setOnError
+
+let split: (t, ~test: Operation.t => bool, ~whenTrue: t, ~whenFalse: t) => t = (
+  t,
+  ~test,
+  ~whenTrue,
+  ~whenFalse,
+) => t->Js_.split(~test=jsOperation => test(jsOperation->Operation.fromJs), ~whenTrue, ~whenFalse)
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Core_Types.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Core_Types.cmi
new file mode 100644
index 0000000..d6297b3
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Core_Types.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Core_Types.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Core_Types.cmj
new file mode 100644
index 0000000..7c05b72
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Core_Types.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Core_Types.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Core_Types.cmt
new file mode 100644
index 0000000..6eff12e
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Core_Types.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Core_Types.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Core_Types.res
new file mode 100644
index 0000000..9316386
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Core_Types.res
@@ -0,0 +1,184 @@
+module ApolloError = ApolloClient__Errors_ApolloError
+module Graphql = ApolloClient__Graphql
+module GraphQLError = ApolloClient__Graphql.Error.GraphQLError
+module Observable = ApolloClient__ZenObservable.Observable
+module Types = ApolloClient__Types
+module Utils = ApolloClient__Utils
+
+module GraphQLRequest = {
+  module Js_ = {
+    // export interface GraphQLRequest {
+    //   query: DocumentNode;
+    //   variables?: Record<string, any>;
+    //   operationName?: string;
+    //   context?: Record<string, any>;
+    //   extensions?: Record<string, any>;
+    // }
+    type t = {
+      query: Graphql.documentNode,
+      variables: option<Js.Json.t>,
+      operationName: option<string>,
+      context: option<Js.Json.t>,
+      extensions: option<Js.Json.t>,
+    }
+  }
+
+  type t = Js_.t
+}
+
+module Operation = {
+  type useMethodFunctionInThisModuleInstead
+
+  module Js_ = {
+    // export interface Operation {
+    //     query: DocumentNode;
+    //     variables: Record<string, any>;
+    //     operationName: string;
+    //     extensions: Record<string, any>;
+    //     setContext: (context: Record<string, any>) => Record<string, any>;
+    //     getContext: () => Record<string, any>;
+    // }
+    type t = {
+      query: Graphql.documentNode,
+      variables: Js.Json.t,
+      operationName: string,
+      extensions: Js.Json.t,
+    }
+
+    @bs.send external getContext: t => Js.Json.t = "getContext"
+
+    @bs.send external setContext: (t, Js.Json.t) => Js.Json.t = "setContext"
+  }
+
+  type t = {
+    query: Graphql.documentNode,
+    variables: Js.Json.t,
+    operationName: string,
+    extensions: Js.Json.t,
+    @bs.as("rescript_setContext")
+    setContext: Js.Json.t => Js.Json.t,
+    @bs.as("rescript_getContext")
+    getContext: unit => Js.Json.t,
+  }
+
+  let preserveJsPropsAndContext: (Js_.t, t) => t = %bs.raw(`
+      function (js, t) {
+        return Object.assign(js, t)
+      }
+    `)
+
+  let fromJs: Js_.t => t = js =>
+    preserveJsPropsAndContext(
+      js,
+      {
+        query: js.query,
+        variables: js.variables,
+        operationName: js.operationName,
+        extensions: js.extensions,
+        setContext: context => js->Js_.setContext(context),
+        getContext: () => js->Js_.getContext,
+      },
+    )
+
+  external toJs: t => Js_.t = "%identity"
+}
+
+module FetchResult = {
+  module Js_ = {
+    // export interface FetchResult<TData = {
+    //     [key: string]: any;
+    // }, C = Record<string, any>, E = Record<string, any>> extends ExecutionResult {
+    //     data?: TData | null;
+    //     extensions?: E;
+    //     context?: C;
+    // }
+    type t<'jsData> = {
+      data: Js.Nullable.t<'jsData>,
+      extensions: option<Js.Json.t>, // ACTUAL: Record<string, any>
+      context: option<Js.Json.t>, // ACTUAL: Record<string, any>
+      // ...extends ExecutionResult
+      errors: option<array<GraphQLError.t>>,
+    }
+  }
+
+  type t<'data> = {
+    data: option<'data>,
+    extensions: option<Js.Json.t>, // ACTUAL: Record<string, any>
+    context: option<Js.Json.t>, // ACTUAL: Record<string, any>
+    // ...extends ExecutionResult
+    error: option<ApolloError.t>,
+  }
+
+  let fromJs: (Js_.t<'jsData>, ~safeParse: Types.safeParse<'data, 'jsData>) => t<'data> = (
+    js,
+    ~safeParse,
+  ) => {
+    let (data, error) = Utils.safeParseAndLiftToCommonResultProps(
+      ~jsData=js.data->Js.toOption,
+      ~graphQLErrors=?js.errors,
+      safeParse,
+    )
+    {data: data, error: error, extensions: js.extensions, context: js.context}
+  }
+
+  let fromError: ApolloError.t => t<'data> = error => {
+    data: None,
+    extensions: None,
+    context: None,
+    error: Some(error),
+  }
+
+  type t__ok<'data> = {
+    data: 'data,
+    error: option<ApolloError.t>,
+    extensions: option<Js.Json.t>,
+    context: option<Js.Json.t>,
+  }
+
+  let toResult: t<'data> => Belt.Result.t<t__ok<'data>, ApolloError.t> = fetchResult =>
+    switch fetchResult {
+    | {data: Some(data)} =>
+      Ok({
+        data: data,
+        error: fetchResult.error,
+        extensions: fetchResult.extensions,
+        context: fetchResult.context,
+      })
+    | {error: Some(error)} => Error(error)
+    | {data: None, error: None} =>
+      Error(
+        ApolloError.make(
+          ~errorMessage="No data and no error on FetchResult.t. Shouldn't this be impossible?",
+          (),
+        ),
+      )
+    }
+}
+
+module NextLink = {
+  module Js_ = {
+    // export declare type NextLink = (operation: Operation) => Observable<FetchResult>;
+    type t = Operation.Js_.t => Observable.Js_.t<FetchResult.Js_.t<Js.Json.t>, Js.Exn.t>
+  }
+
+  // These are intentionally Js_.t because we can't know what to parse
+  type t = Operation.t => Observable.Js_.t<FetchResult.Js_.t<Js.Json.t>, Js.Exn.t>
+}
+
+module RequestHandler = {
+  module Js_ = {
+    // export declare type RequestHandler = (operation: Operation, forward: NextLink) => Observable<FetchResult> | null;
+    type t = (
+      . Operation.Js_.t,
+      NextLink.Js_.t,
+    ) => Js.Null.t<Observable.t<FetchResult.Js_.t<Js.Json.t>, Js.Exn.t>>
+  }
+
+  // These are intentionally Js_.t because we can't know what to parse
+  type t = (
+    Operation.Js_.t,
+    NextLink.Js_.t,
+  ) => option<Observable.t<FetchResult.Js_.t<Js.Json.t>, Js.Exn.t>>
+
+  let toJs: t => Js_.t = (t, . operation, forward) => t(operation, forward)->Js.Null.fromOption
+}
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Error.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Error.cmi
new file mode 100644
index 0000000..a5c8963
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Error.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Error.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Error.cmj
new file mode 100644
index 0000000..a2a1e0c
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Error.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Error.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Error.cmt
new file mode 100644
index 0000000..ee4488e
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Error.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Error.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Error.res
new file mode 100644
index 0000000..4897c45
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Error.res
@@ -0,0 +1,124 @@
+module ApolloLink = ApolloClient__Link_Core_ApolloLink
+module ApolloError = ApolloClient__Errors_ApolloError
+module GraphQLError = ApolloClient__Graphql.Error.GraphQLError
+module ExecutionResult = ApolloClient__Graphql_Execution_Execute.ExecutionResult
+module FetchResult = ApolloClient__Link_Core_Types.FetchResult
+module NextLink = ApolloClient__Link_Core_Types.NextLink
+module Observable = ApolloClient__ZenObservable.Observable
+module Operation = ApolloClient__Link_Core_Types.Operation
+module ServerError = ApolloClient__Link_Utils_ThrowServerError.ServerError
+module ServerParseError = ApolloClient__Link_Http_ParseAndCheckHttpResponse.ServerParseError
+
+// export declare class ErrorLink extends ApolloLink {
+//     private link;
+//     constructor(errorHandler: ErrorLink.ErrorHandler);
+//     request(operation: Operation, forward: NextLink): Observable<FetchResult> | null;
+// }
+
+module ErrorResponse = {
+  // export interface ErrorResponse {
+  //     graphQLErrors?: ReadonlyArray<GraphQLError>;
+  //     networkError?: Error | ServerError | ServerParseError;
+  //     response?: ExecutionResult;
+  //     operation: Operation;
+  //     forward: NextLink;
+  // }
+  module Js_ = {
+    module NetworkErrorUnion: {
+      type t
+      let error: Js.Exn.t => t
+      let serverError: ServerError.Js_.t => t
+      let serverParseError: ServerParseError.Js_.t => t
+      type case =
+        | Error(Js.Exn.t)
+        | ServerError(ServerError.Js_.t)
+        | ServerParseError(ServerParseError.Js_.t)
+      let classify: t => case
+    } = {
+      @unboxed
+      type rec t = Any('a): t
+      let error = (v: Js.Exn.t) => Any(v)
+      let serverError = (v: ServerError.Js_.t) => Any(v)
+      let serverParseError = (v: ServerParseError.Js_.t) => Any(v)
+      type case =
+        | Error(Js.Exn.t)
+        | ServerError(ServerError.Js_.t)
+        | ServerParseError(ServerParseError.Js_.t)
+      let classify = (Any(v): t): case =>
+        if (
+          %raw(`function (v) { return "bodyText" in v && "response" in v && "statusCode" in v}`)(v)
+        ) {
+          ServerError((Obj.magic(v): ServerError.Js_.t))
+        } else if (
+          %raw(`function (v) { return "result" in v && "response" in v && "statusCode" in v}`)(v)
+        ) {
+          ServerParseError((Obj.magic(v): ServerParseError.Js_.t))
+        } else {
+          Error((Obj.magic(v): Js.Exn.t))
+        }
+    }
+
+    type t = {
+      graphQLErrors: option<array<GraphQLError.t>>,
+      networkError: option<NetworkErrorUnion.t>,
+      response: option<ExecutionResult.Js_.t<Js.Json.t>>,
+      operation: Operation.Js_.t,
+    }
+
+    @bs.send external forward: t => NextLink.Js_.t = "forward"
+  }
+
+  type t_networkError =
+    | FetchFailure(Js.Exn.t)
+    | BadStatus(int, ServerError.t)
+    | BadBody(ServerParseError.t)
+
+  type t = {
+    graphQLErrors: option<array<GraphQLError.t>>,
+    networkError: option<t_networkError>,
+    response: option<ExecutionResult.t<Js.Json.t>>,
+    operation: Operation.t,
+    forward: NextLink.t,
+  }
+
+  let fromJs: Js_.t => t = js => {
+    graphQLErrors: js.graphQLErrors,
+    networkError: js.networkError->Belt.Option.map(networkError =>
+      switch networkError->Js_.NetworkErrorUnion.classify {
+      | Error(error) => FetchFailure(error)
+      | ServerError(error) => BadStatus(error.statusCode, error)
+      | ServerParseError(error) => BadBody(error)
+      }
+    ),
+    response: js.response,
+    operation: js.operation->Operation.fromJs,
+    forward: operation => js->Js_.forward(operation->Operation.toJs),
+  }
+}
+
+module ErrorHandler = {
+  // interface ErrorHandler {
+  //     (error: ErrorResponse): Observable<FetchResult> | void;
+  // }
+  module Js_ = {
+    type t = ErrorResponse.Js_.t => option<Observable.Js_.t<FetchResult.Js_.t<Js.Json.t>, Js.Exn.t>>
+  }
+
+  type t = ErrorResponse.t => option<Observable.Js_.t<FetchResult.Js_.t<Js.Json.t>, Js.Exn.t>>
+}
+
+module Js_ = {
+  // export declare function onError(errorHandler: ErrorHandler): ApolloLink;
+  @bs.module("@apollo/client/link/error")
+  external onError: (
+    ErrorResponse.Js_.t => option<Observable.Js_.t<FetchResult.Js_.t<Js.Json.t>, Js.Exn.t>>
+  ) => ApolloLink.Js_.t = "onError"
+}
+
+let onError: ErrorHandler.t => ApolloLink.t = errorCb =>
+  Js_.onError(jsErrorResponse => errorCb(jsErrorResponse->ErrorResponse.fromJs))
+
+// rescript-specific
+module ErrorLink = {
+  let make = onError
+}
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http.cmi
new file mode 100644
index 0000000..eac1bc6
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http.cmj
new file mode 100644
index 0000000..0e5c80e
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http.cmt
new file mode 100644
index 0000000..56ee540
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http.res
new file mode 100644
index 0000000..2ad7619
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http.res
@@ -0,0 +1,4 @@
+module CreateHttpLink = ApolloClient__Link_Http_CreateHttpLink
+module HttpLink = ApolloClient__Link_Http_HttpLink
+module ParseAndCheckHttpResponse = ApolloClient__Link_Http_ParseAndCheckHttpResponse
+module SelectHttpOptionsAndBody = ApolloClient__Link_Http_SelectHttpOptionsAndBody
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http_CreateHttpLink.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http_CreateHttpLink.cmi
new file mode 100644
index 0000000..28a62e6
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http_CreateHttpLink.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http_CreateHttpLink.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http_CreateHttpLink.cmj
new file mode 100644
index 0000000..52ec13b
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http_CreateHttpLink.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http_CreateHttpLink.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http_CreateHttpLink.cmt
new file mode 100644
index 0000000..881cd14
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http_CreateHttpLink.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http_CreateHttpLink.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http_CreateHttpLink.res
new file mode 100644
index 0000000..c8c4bf6
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http_CreateHttpLink.res
@@ -0,0 +1,9 @@
+module ApolloLink = ApolloClient__Link_Core_ApolloLink
+module HttpOptions = ApolloClient__Link_Http_SelectHttpOptionsAndBody.HttpOptions
+
+module Js_ = {
+  @bs.module("@apollo/client")
+  external createHttpLink: HttpOptions.Js_.t => ApolloLink.Js_.t = "createHttpLink"
+}
+
+let createHttpLink: HttpOptions.t => ApolloLink.t = Js_.createHttpLink
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http_HttpLink.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http_HttpLink.cmi
new file mode 100644
index 0000000..1e49631
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http_HttpLink.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http_HttpLink.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http_HttpLink.cmj
new file mode 100644
index 0000000..ddffbf4
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http_HttpLink.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http_HttpLink.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http_HttpLink.cmt
new file mode 100644
index 0000000..e3cc3f3
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http_HttpLink.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http_HttpLink.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http_HttpLink.res
new file mode 100644
index 0000000..8306ec0
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http_HttpLink.res
@@ -0,0 +1,42 @@
+module ApolloLink = ApolloClient__Link_Core_ApolloLink
+module HttpOptions = ApolloClient__Link_Http_SelectHttpOptionsAndBody.HttpOptions
+module UriFunction = ApolloClient__Link_Http_SelectHttpOptionsAndBody.UriFunction
+
+module Js_ = {
+  // export declare class HttpLink extends ApolloLink {
+  //     options: HttpOptions;
+  //     requester: RequestHandler;
+  //     constructor(options?: HttpOptions);
+  // }
+  @bs.module("@apollo/client") @bs.new
+  external make: HttpOptions.Js_.t => ApolloLink.Js_.t = "HttpLink"
+}
+
+let make: (
+  ~uri: UriFunction.t=?,
+  ~includeExtensions: bool=?,
+  ~fetch: HttpOptions.Js_.t_fetch=?,
+  ~headers: Js.Json.t=?,
+  ~credentials: string=?,
+  ~fetchOptions: Js.Json.t=?,
+  ~useGETForQueries: bool=?,
+  unit,
+) => ApolloLink.t = (
+  ~uri=?,
+  ~includeExtensions=?,
+  ~fetch=?,
+  ~headers=?,
+  ~credentials=?,
+  ~fetchOptions=?,
+  ~useGETForQueries=?,
+  (),
+) =>
+  Js_.make({
+    uri: uri,
+    includeExtensions: includeExtensions,
+    fetch: fetch,
+    headers: headers,
+    credentials: credentials,
+    fetchOptions: fetchOptions,
+    useGETForQueries: useGETForQueries,
+  })
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http_ParseAndCheckHttpResponse.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http_ParseAndCheckHttpResponse.cmi
new file mode 100644
index 0000000..1c872da
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http_ParseAndCheckHttpResponse.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http_ParseAndCheckHttpResponse.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http_ParseAndCheckHttpResponse.cmj
new file mode 100644
index 0000000..401c4b8
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http_ParseAndCheckHttpResponse.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http_ParseAndCheckHttpResponse.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http_ParseAndCheckHttpResponse.cmt
new file mode 100644
index 0000000..a541f6e
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http_ParseAndCheckHttpResponse.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http_ParseAndCheckHttpResponse.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http_ParseAndCheckHttpResponse.res
new file mode 100644
index 0000000..ef8ec60
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http_ParseAndCheckHttpResponse.res
@@ -0,0 +1,29 @@
+// export declare function parseAndCheckHttpResponse(operations: Operation | Operation[]): (response: Response) => Promise<any>;
+// export declare type ServerParseError = Error & {
+//     response: Response;
+//     statusCode: number;
+//     bodyText: string;
+/* } */
+
+module ServerParseError = {
+  module Js_ = {
+    // export declare type ServerError = Error & {
+    //     response: Response;
+    //     result: Record<string, any>;
+    //     statusCode: number;
+    // };
+    type response
+
+    type t = {
+      bodyText: string,
+      response: response,
+      statusCode: int,
+      // ...extends Error
+      name: string,
+      message: string,
+      stack: option<string>,
+    }
+  }
+
+  type t = Js_.t
+}
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http_SelectHttpOptionsAndBody.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http_SelectHttpOptionsAndBody.cmi
new file mode 100644
index 0000000..321d30b
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http_SelectHttpOptionsAndBody.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http_SelectHttpOptionsAndBody.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http_SelectHttpOptionsAndBody.cmj
new file mode 100644
index 0000000..16ab879
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http_SelectHttpOptionsAndBody.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http_SelectHttpOptionsAndBody.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http_SelectHttpOptionsAndBody.cmt
new file mode 100644
index 0000000..5441cc0
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http_SelectHttpOptionsAndBody.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http_SelectHttpOptionsAndBody.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http_SelectHttpOptionsAndBody.res
new file mode 100644
index 0000000..73a25b6
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Http_SelectHttpOptionsAndBody.res
@@ -0,0 +1,79 @@
+module Operation = ApolloClient__Link_Core_Types.Operation
+
+// import { Operation } from '../core/types';
+// export interface Body {
+//     query?: string;
+//     operationName?: string;
+//     variables?: Record<string, any>;
+//     extensions?: Record<string, any>;
+// }
+
+module UriFunction = {
+  module Js_ = {
+    type t = Operation.Js_.t => string
+  }
+
+  type t = Js_.t
+}
+
+module HttpOptions = {
+  module Js_ = {
+    // export interface HttpOptions {
+    //     uri?: string | UriFunction;
+    //     includeExtensions?: boolean;
+    //     fetch?: WindowOrWorkerGlobalScope['fetch'];
+    //     headers?: any;
+    //     credentials?: string;
+    //     fetchOptions?: any;
+    //     useGETForQueries?: boolean;
+    // }
+    type t_fetch
+
+    type t = {
+      uri: option<UriFunction.Js_.t>,
+      includeExtensions: option<bool>,
+      fetch: option<t_fetch>,
+      headers: option<Js.Json.t>,
+      credentials: option<string>,
+      fetchOptions: option<Js.Json.t>,
+      useGETForQueries: option<bool>,
+    }
+  }
+
+  type t = Js_.t
+}
+// export interface HttpOptions {
+//     uri?: string | UriFunction;
+//     includeExtensions?: boolean;
+//     fetch?: WindowOrWorkerGlobalScope['fetch'];
+//     headers?: any;
+//     credentials?: string;
+//     fetchOptions?: any;
+//     useGETForQueries?: boolean;
+// }
+// export interface HttpQueryOptions {
+//     includeQuery?: boolean;
+//     includeExtensions?: boolean;
+// }
+// export interface HttpConfig {
+//     http?: HttpQueryOptions;
+//     options?: any;
+//     headers?: any;
+//     credentials?: any;
+// }
+// export declare const fallbackHttpConfig: {
+//     http: HttpQueryOptions;
+//     headers: {
+//         accept: string;
+//         'content-type': string;
+//     };
+//     options: {
+//         method: string;
+//     };
+// };
+// export declare const selectHttpOptionsAndBody: (operation: Operation, fallbackConfig: HttpConfig, ...configs: Array<HttpConfig>) => {
+//     options: HttpConfig & Record<string, any>;
+//     body: Body;
+// };
+
+()
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Utils.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Utils.cmi
new file mode 100644
index 0000000..1f4ea2d
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Utils.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Utils.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Utils.cmj
new file mode 100644
index 0000000..4541129
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Utils.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Utils.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Utils.cmt
new file mode 100644
index 0000000..3c8bf98
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Utils.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Utils.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Utils.res
new file mode 100644
index 0000000..e3fe269
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Utils.res
@@ -0,0 +1 @@
+module ThrowServerError = ApolloClient__Link_Utils_ThrowServerError
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Utils_ThrowServerError.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Utils_ThrowServerError.cmi
new file mode 100644
index 0000000..4f73291
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Utils_ThrowServerError.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Utils_ThrowServerError.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Utils_ThrowServerError.cmj
new file mode 100644
index 0000000..4c7e4bc
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Utils_ThrowServerError.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Utils_ThrowServerError.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Utils_ThrowServerError.cmt
new file mode 100644
index 0000000..1216245
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Utils_ThrowServerError.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Utils_ThrowServerError.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Utils_ThrowServerError.res
new file mode 100644
index 0000000..957263e
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Utils_ThrowServerError.res
@@ -0,0 +1,24 @@
+/* export declare const throwServerError: (response: Response, result: any, message: string) => never */
+
+module ServerError = {
+  module Js_ = {
+    // export declare type ServerError = Error & {
+    //     response: Response;
+    //     result: Record<string, any>;
+    //     statusCode: number;
+    // };
+    type response
+
+    type t = {
+      response: response,
+      result: Js.Json.t, // Actual: Record<string, any>;
+      statusCode: int,
+      // ...extends Error
+      name: string,
+      message: string,
+      stack: option<string>,
+    }
+  }
+
+  type t = Js_.t
+}
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Ws.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Ws.cmi
new file mode 100644
index 0000000..2d5083b
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Ws.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Ws.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Ws.cmj
new file mode 100644
index 0000000..b90b847
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Ws.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Ws.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Ws.cmt
new file mode 100644
index 0000000..205ab72
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Ws.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Ws.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Ws.res
new file mode 100644
index 0000000..e9e89ea
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Link_Ws.res
@@ -0,0 +1,60 @@
+module ApolloLink = ApolloClient__Link_Core_ApolloLink
+module Graphql = ApolloClient__Graphql
+
+module WebSocketLink = {
+  module ClientOptions = ApolloClient__SubscriptionsTransportWs.ClientOptions
+  module SubscriptionClient = ApolloClient__SubscriptionsTransportWs.SubscriptionClient
+
+  module Configuration = {
+    module Js_ = {
+      // export declare namespace WebSocketLink {
+      //     interface Configuration {
+      //         uri: string;
+      //         options?: ClientOptions;
+      //         webSocketImpl?: any;
+      //     }
+      // }
+      type any
+      type t = {
+        uri: string,
+        options: option<ClientOptions.Js_.t>,
+        webSocketImpl: option<any>,
+      }
+    }
+
+    type t = Js_.t
+  }
+
+  module Js_ = {
+    // export declare class WebSocketLink extends ApolloLink {
+    //     private subscriptionClient;
+    //     constructor(paramsOrClient: WebSocketLink.Configuration | SubscriptionClient);
+    //     request(operation: Operation): Observable<FetchResult> | null;
+    // }
+    @bs.module("@apollo/client/link/ws") @bs.new
+    external make: @bs.unwrap
+    [
+      | #Configuration(Configuration.Js_.t)
+      | #SubscriptionClient(SubscriptionClient.t)
+    ] => ApolloLink.Js_.t = "WebSocketLink"
+  }
+
+  type webSocketImpl = Configuration.Js_.any
+
+  let make: (
+    ~uri: string,
+    ~options: ClientOptions.t=?,
+    ~webSocketImpl: webSocketImpl=?,
+    unit,
+  ) => ApolloLink.t = (~uri, ~options=?, ~webSocketImpl=?, ()) =>
+    Js_.make(
+      #Configuration({
+        uri: uri,
+        options: options->Belt.Option.map(ClientOptions.toJs),
+        webSocketImpl: webSocketImpl,
+      }),
+    )
+
+  let makeWithSubscriptionClient: SubscriptionClient.t => ApolloLink.t = subscriptionClient =>
+    Js_.make(#SubscriptionClient(subscriptionClient))
+}
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React.cmi
new file mode 100644
index 0000000..afe3df5
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React.cmj
new file mode 100644
index 0000000..7bb11cd
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React.cmt
new file mode 100644
index 0000000..d5fdfc5
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React.res
new file mode 100644
index 0000000..b9d4392
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React.res
@@ -0,0 +1,8 @@
+module Context = ApolloClient__React_Context
+module Hooks = ApolloClient__React_Hooks
+module Types = ApolloClient__React_Types
+
+let useLazyQuery = ApolloClient__React_Hooks_UseLazyQuery.useLazyQuery
+let useMutation = ApolloClient__React_Hooks_UseMutation.useMutation
+let useQuery = ApolloClient__React_Hooks_UseQuery.useQuery
+let useSubscription = ApolloClient__React_Hooks_UseSubscription.useSubscription
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Context.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Context.cmi
new file mode 100644
index 0000000..aef3165
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Context.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Context.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Context.cmj
new file mode 100644
index 0000000..0a94a46
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Context.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Context.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Context.cmt
new file mode 100644
index 0000000..eb71e85
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Context.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Context.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Context.res
new file mode 100644
index 0000000..077f778
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Context.res
@@ -0,0 +1 @@
+module ApolloProvider = ApolloClient__React_Context_ApolloProvider
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Context_ApolloProvider.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Context_ApolloProvider.cmi
new file mode 100644
index 0000000..11244a7
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Context_ApolloProvider.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Context_ApolloProvider.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Context_ApolloProvider.cmj
new file mode 100644
index 0000000..0a94a46
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Context_ApolloProvider.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Context_ApolloProvider.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Context_ApolloProvider.cmt
new file mode 100644
index 0000000..3519828
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Context_ApolloProvider.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Context_ApolloProvider.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Context_ApolloProvider.res
new file mode 100644
index 0000000..7a36084
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Context_ApolloProvider.res
@@ -0,0 +1,10 @@
+module ApolloClient = ApolloClient__Core_ApolloClient
+
+// export interface ApolloProviderProps<TCache> {
+//     client: ApolloClient<TCache>;
+//     children: React.ReactNode | React.ReactNode[] | null;
+// }
+// export declare const ApolloProvider: React.FC<ApolloProviderProps<any>>;
+@bs.module("@apollo/client") @react.component
+external make: (~client: ApolloClient.t, ~children: React.element) => React.element =
+  "ApolloProvider"
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks.cmi
new file mode 100644
index 0000000..462044a
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks.cmj
new file mode 100644
index 0000000..c02f1e5
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks.cmt
new file mode 100644
index 0000000..84f1ce7
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks.res
new file mode 100644
index 0000000..e47a8cb
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks.res
@@ -0,0 +1,4 @@
+module UseApolloClient = ApolloClient__React_Hooks_UseApolloClient
+module UseMutation = ApolloClient__React_Hooks_UseMutation
+module UseQuery = ApolloClient__React_Hooks_UseQuery
+module UseSubscription = ApolloClient__React_Hooks_UseSubscription
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseApolloClient.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseApolloClient.cmi
new file mode 100644
index 0000000..4520f95
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseApolloClient.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseApolloClient.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseApolloClient.cmj
new file mode 100644
index 0000000..c02f1e5
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseApolloClient.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseApolloClient.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseApolloClient.cmt
new file mode 100644
index 0000000..c713be2
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseApolloClient.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseApolloClient.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseApolloClient.res
new file mode 100644
index 0000000..f5a8935
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseApolloClient.res
@@ -0,0 +1,4 @@
+module ApolloClient = ApolloClient__Core_ApolloClient
+
+@bs.module("@apollo/client")
+external useApolloClient: unit => ApolloClient.t = "useApolloClient"
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseLazyQuery.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseLazyQuery.cmi
new file mode 100644
index 0000000..8f873d1
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseLazyQuery.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseLazyQuery.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseLazyQuery.cmj
new file mode 100644
index 0000000..9d8746a
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseLazyQuery.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseLazyQuery.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseLazyQuery.cmt
new file mode 100644
index 0000000..d28fc0c
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseLazyQuery.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseLazyQuery.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseLazyQuery.res
new file mode 100644
index 0000000..5739247
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseLazyQuery.res
@@ -0,0 +1,169 @@
+module ApolloClient = ApolloClient__Core_ApolloClient
+module ApolloError = ApolloClient__Errors_ApolloError
+module ErrorPolicy = ApolloClient__Core_WatchQueryOptions.ErrorPolicy
+module Graphql = ApolloClient__Graphql
+module LazyQueryHookOptions = ApolloClient__React_Types.LazyQueryHookOptions
+module QueryTuple = ApolloClient__React_Types.QueryTuple
+module QueryTuple__noVariables = ApolloClient__React_Types.QueryTuple__noVariables
+module Types = ApolloClient__Types
+module Utils = ApolloClient__Utils
+module WatchQueryFetchPolicy = ApolloClient__Core_WatchQueryOptions.WatchQueryFetchPolicy
+
+module type Operation = Types.Operation
+module type OperationNoRequiredVars = Types.OperationNoRequiredVars
+
+module Js_ = {
+  // export declare function useLazyQuery<TData = any, TVariables = OperationVariables>(query: DocumentNode, options?: LazyQueryHookOptions<TData, TVariables>): QueryTuple<TData, TVariables>;
+  @bs.module("@apollo/client")
+  external useLazyQuery: (
+    . Graphql.documentNode,
+    LazyQueryHookOptions.Js_.t<'jsData, 'jsVariables>,
+  ) => QueryTuple.Js_.t<'jsData, 'jsVariables> = "useLazyQuery"
+}
+
+let useLazyQuery:
+  type data jsData variables jsVariables. (
+    ~query: module(Operation with
+      type t = data
+      and type Raw.t = jsData
+      and type t_variables = variables
+      and type Raw.t_variables = jsVariables
+    ),
+    ~client: ApolloClient.t=?,
+    ~context: Js.Json.t=?,
+    ~displayName: string=?,
+    ~errorPolicy: ErrorPolicy.t=?,
+    ~fetchPolicy: WatchQueryFetchPolicy.t=?,
+    ~notifyOnNetworkStatusChange: bool=?,
+    ~onCompleted: Types.parseResult<data> => unit=?,
+    ~onError: ApolloError.t => unit=?,
+    ~partialRefetch: bool=?,
+    ~pollInterval: int=?,
+    ~ssr: bool=?,
+    unit,
+  ) => QueryTuple.t<data, jsData, variables, jsVariables> =
+  (
+    ~query as module(Operation),
+    ~client=?,
+    ~context=?,
+    ~displayName=?,
+    ~errorPolicy=?,
+    ~fetchPolicy=?,
+    ~notifyOnNetworkStatusChange=?,
+    ~onCompleted=?,
+    ~onError=?,
+    ~partialRefetch=?,
+    ~pollInterval=?,
+    ~ssr=?,
+    (),
+  ) => {
+    let safeParse = Utils.safeParse(Operation.parse)
+    let jsQueryTuple = Js_.useLazyQuery(.
+      Operation.query,
+      LazyQueryHookOptions.toJs(
+        {
+          client: client,
+          context: context,
+          displayName: displayName,
+          errorPolicy: errorPolicy,
+          fetchPolicy: fetchPolicy,
+          onCompleted: onCompleted,
+          onError: onError,
+          notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,
+          partialRefetch: partialRefetch,
+          pollInterval: pollInterval,
+          query: None,
+          ssr: ssr,
+          variables: None,
+        },
+        ~safeParse,
+        ~serializeVariables=Operation.serializeVariables,
+      ),
+    )
+
+    Utils.useGuaranteedMemo1(
+      () =>
+        jsQueryTuple->QueryTuple.fromJs(
+          ~safeParse,
+          ~serialize=Operation.serialize,
+          ~serializeVariables=Operation.serializeVariables,
+        ),
+      jsQueryTuple,
+    )
+  }
+
+let useLazyQueryWithVariables:
+  type data jsData variables jsVariables. (
+    ~query: module(Operation with
+      type t = data
+      and type Raw.t = jsData
+      and type t_variables = variables
+      and type Raw.t_variables = jsVariables
+    ),
+    ~client: ApolloClient.t=?,
+    ~context: Js.Json.t=?,
+    ~displayName: string=?,
+    ~errorPolicy: ErrorPolicy.t=?,
+    ~fetchPolicy: WatchQueryFetchPolicy.t=?,
+    ~mapJsVariables: jsVariables => jsVariables=?,
+    ~notifyOnNetworkStatusChange: bool=?,
+    ~onCompleted: Types.parseResult<data> => unit=?,
+    ~onError: ApolloError.t => unit=?,
+    ~partialRefetch: bool=?,
+    ~pollInterval: int=?,
+    ~ssr: bool=?,
+    variables,
+  ) => QueryTuple__noVariables.t<data, jsData, variables, jsVariables> =
+  (
+    ~query as module(Operation),
+    ~client=?,
+    ~context=?,
+    ~displayName=?,
+    ~errorPolicy=?,
+    ~fetchPolicy=?,
+    ~mapJsVariables=Utils.identity,
+    ~notifyOnNetworkStatusChange=?,
+    ~onCompleted=?,
+    ~onError=?,
+    ~partialRefetch=?,
+    ~pollInterval=?,
+    ~ssr=?,
+    variables,
+  ) => {
+    let safeParse = Utils.safeParse(Operation.parse)
+
+    let jsQueryTuple = Js_.useLazyQuery(.
+      Operation.query,
+      LazyQueryHookOptions.toJs(
+        {
+          client: client,
+          context: context,
+          displayName: displayName,
+          errorPolicy: errorPolicy,
+          fetchPolicy: fetchPolicy,
+          onCompleted: onCompleted,
+          onError: onError,
+          notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,
+          partialRefetch: partialRefetch,
+          pollInterval: pollInterval,
+          query: None,
+          ssr: ssr,
+          variables: Some(variables),
+        },
+        ~safeParse,
+        ~serializeVariables=Operation.serializeVariables,
+      ),
+    )
+
+    Utils.useGuaranteedMemo1(
+      () =>
+        jsQueryTuple->QueryTuple__noVariables.fromJs(
+          ~mapJsVariables,
+          ~safeParse,
+          ~serialize=Operation.serialize,
+          ~serializeVariables=Operation.serializeVariables,
+          ~variables,
+        ),
+      jsQueryTuple,
+    )
+  }
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseMutation.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseMutation.cmi
new file mode 100644
index 0000000..4501656
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseMutation.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseMutation.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseMutation.cmj
new file mode 100644
index 0000000..4ab8cb0
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseMutation.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseMutation.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseMutation.cmt
new file mode 100644
index 0000000..c587007
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseMutation.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseMutation.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseMutation.res
new file mode 100644
index 0000000..e0be43c
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseMutation.res
@@ -0,0 +1,249 @@
+module ApolloClient = ApolloClient__Core_ApolloClient
+module ApolloError = ApolloClient__Errors_ApolloError
+module ErrorPolicy = ApolloClient__Core_WatchQueryOptions.ErrorPolicy
+module FetchPolicy__noCacheExtracted = ApolloClient__Core_WatchQueryOptions.FetchPolicy__noCacheExtracted
+module Graphql = ApolloClient__Graphql
+module MutationHookOptions = ApolloClient__React_Types.MutationHookOptions
+module MutationTuple = ApolloClient__React_Types.MutationTuple
+module MutationTuple__noVariables = ApolloClient__React_Types.MutationTuple__noVariables
+module MutationUpdaterFn = ApolloClient__Core_WatchQueryOptions.MutationUpdaterFn
+module OperationVariables = ApolloClient__Core_Types.OperationVariables
+module RefetchQueryDescription = ApolloClient__Core_WatchQueryOptions.RefetchQueryDescription
+module Types = ApolloClient__Types
+module Utils = ApolloClient__Utils
+
+module type Operation = Types.Operation
+module type OperationNoRequiredVars = Types.OperationNoRequiredVars
+
+module Js_ = {
+  // export declare function useMutation<TData = any, TVariables = OperationVariables>(mutation: DocumentNode, options?: MutationHookOptions<TData, TVariables>): MutationTuple<TData, TVariables>;
+  @bs.module("@apollo/client")
+  external useMutation: (
+    . Graphql.documentNode,
+    MutationHookOptions.Js_.t<'jsData, 'jsVariables>,
+  ) => MutationTuple.Js_.t<'jsData, 'jsVariables> = "useMutation"
+}
+
+let useMutation:
+  type data variables jsVariables. (
+    ~mutation: module(Operation with
+      type t = data
+      and type t_variables = variables
+      and type Raw.t_variables = jsVariables
+    ),
+    ~awaitRefetchQueries: bool=?,
+    ~context: Js.Json.t=?,
+    ~client: ApolloClient.t=?,
+    ~errorPolicy: ErrorPolicy.t=?,
+    ~fetchPolicy: FetchPolicy__noCacheExtracted.t=?,
+    ~ignoreResults: bool=?,
+    ~notifyOnNetworkStatusChange: bool=?,
+    ~onError: ApolloError.t => unit=?,
+    ~onCompleted: data => unit=?,
+    ~optimisticResponse: jsVariables => data=?,
+    ~refetchQueries: RefetchQueryDescription.t=?,
+    ~update: MutationUpdaterFn.t<data>=?,
+    unit,
+  ) => MutationTuple.t<data, variables, jsVariables> =
+  (
+    ~mutation as module(Operation),
+    ~awaitRefetchQueries=?,
+    ~context=?,
+    ~client=?,
+    ~errorPolicy=?,
+    ~fetchPolicy=?,
+    ~ignoreResults=?,
+    ~notifyOnNetworkStatusChange=?,
+    ~onError=?,
+    ~onCompleted=?,
+    ~optimisticResponse=?,
+    ~refetchQueries=?,
+    ~update=?,
+    (),
+  ) => {
+    let safeParse = Utils.safeParse(Operation.parse)
+
+    let jsMutationTuple = Js_.useMutation(.
+      Operation.query,
+      MutationHookOptions.toJs(
+        {
+          mutation: None,
+          awaitRefetchQueries: awaitRefetchQueries,
+          context: context,
+          client: client,
+          errorPolicy: errorPolicy,
+          fetchPolicy: fetchPolicy,
+          ignoreResults: ignoreResults,
+          notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,
+          onError: onError,
+          onCompleted: onCompleted,
+          optimisticResponse: optimisticResponse,
+          refetchQueries: refetchQueries,
+          update: update,
+          variables: None,
+        },
+        ~mapJsVariables=Utils.identity,
+        ~safeParse,
+        ~serialize=Operation.serialize,
+        ~serializeVariables=Operation.serializeVariables,
+      ),
+    )
+
+    Utils.useGuaranteedMemo1(
+      () =>
+        jsMutationTuple->MutationTuple.fromJs(
+          ~safeParse,
+          ~serialize=Operation.serialize,
+          ~serializeVariables=Operation.serializeVariables,
+        ),
+      jsMutationTuple,
+    )
+  }
+
+let useMutationWithVariables:
+  type data variables jsVariables. (
+    ~mutation: module(Operation with
+      type t = data
+      and type t_variables = variables
+      and type Raw.t_variables = jsVariables
+    ),
+    ~awaitRefetchQueries: bool=?,
+    ~context: Js.Json.t=?,
+    ~client: ApolloClient.t=?,
+    ~errorPolicy: ErrorPolicy.t=?,
+    ~fetchPolicy: FetchPolicy__noCacheExtracted.t=?,
+    ~ignoreResults: bool=?,
+    ~mapJsVariables: jsVariables => jsVariables=?,
+    ~notifyOnNetworkStatusChange: bool=?,
+    ~onError: ApolloError.t => unit=?,
+    ~onCompleted: data => unit=?,
+    ~optimisticResponse: jsVariables => data=?,
+    ~refetchQueries: RefetchQueryDescription.t=?,
+    ~update: MutationUpdaterFn.t<data>=?,
+    variables,
+  ) => MutationTuple__noVariables.t<data, jsVariables> =
+  (
+    ~mutation as module(Operation),
+    ~awaitRefetchQueries=?,
+    ~context=?,
+    ~client=?,
+    ~errorPolicy=?,
+    ~fetchPolicy=?,
+    ~ignoreResults=?,
+    ~mapJsVariables=Utils.identity,
+    ~notifyOnNetworkStatusChange=?,
+    ~onError=?,
+    ~onCompleted=?,
+    ~optimisticResponse=?,
+    ~refetchQueries=?,
+    ~update=?,
+    variables,
+  ) => {
+    let safeParse = Utils.safeParse(Operation.parse)
+
+    let jsMutationTuple = Js_.useMutation(.
+      Operation.query,
+      MutationHookOptions.toJs(
+        {
+          mutation: None,
+          awaitRefetchQueries: awaitRefetchQueries,
+          context: context,
+          client: client,
+          errorPolicy: errorPolicy,
+          fetchPolicy: fetchPolicy,
+          ignoreResults: ignoreResults,
+          notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,
+          onError: onError,
+          onCompleted: onCompleted,
+          optimisticResponse: optimisticResponse,
+          refetchQueries: refetchQueries,
+          update: update,
+          variables: Some(variables),
+        },
+        ~mapJsVariables,
+        ~safeParse,
+        ~serialize=Operation.serialize,
+        ~serializeVariables=Operation.serializeVariables,
+      ),
+    )
+
+    Utils.useGuaranteedMemo1(() => {
+      let (mutate, mutationResult) =
+        jsMutationTuple->MutationTuple__noVariables.fromJs(
+          ~mapJsVariables,
+          ~safeParse,
+          ~serialize=Operation.serialize,
+          ~serializeVariables=Operation.serializeVariables,
+          ~variables,
+        )
+      (mutate, mutationResult)
+    }, jsMutationTuple)
+  }
+
+module Extend = (M: Types.Operation) => {
+  let use = (
+    ~awaitRefetchQueries=?,
+    ~context=?,
+    ~client=?,
+    ~errorPolicy=?,
+    ~fetchPolicy=?,
+    ~ignoreResults=?,
+    ~notifyOnNetworkStatusChange=?,
+    ~onError=?,
+    ~onCompleted=?,
+    ~optimisticResponse=?,
+    ~refetchQueries=?,
+    ~update=?,
+    (),
+  ) =>
+    useMutation(
+      ~mutation=module(M),
+      ~awaitRefetchQueries?,
+      ~context?,
+      ~client?,
+      ~errorPolicy?,
+      ~fetchPolicy?,
+      ~ignoreResults?,
+      ~notifyOnNetworkStatusChange?,
+      ~onError?,
+      ~onCompleted?,
+      ~optimisticResponse?,
+      ~refetchQueries?,
+      ~update?,
+      (),
+    )
+
+  let useWithVariables = (
+    ~awaitRefetchQueries=?,
+    ~context=?,
+    ~client=?,
+    ~errorPolicy=?,
+    ~fetchPolicy=?,
+    ~ignoreResults=?,
+    ~mapJsVariables=?,
+    ~notifyOnNetworkStatusChange=?,
+    ~onError=?,
+    ~onCompleted=?,
+    ~optimisticResponse=?,
+    ~refetchQueries=?,
+    ~update=?,
+    variables,
+  ) =>
+    useMutationWithVariables(
+      ~mutation=module(M),
+      ~awaitRefetchQueries?,
+      ~context?,
+      ~client?,
+      ~errorPolicy?,
+      ~fetchPolicy?,
+      ~ignoreResults?,
+      ~mapJsVariables?,
+      ~notifyOnNetworkStatusChange?,
+      ~onError?,
+      ~onCompleted?,
+      ~optimisticResponse?,
+      ~refetchQueries?,
+      ~update?,
+      variables,
+    )
+}
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseQuery.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseQuery.cmi
new file mode 100644
index 0000000..503db14
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseQuery.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseQuery.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseQuery.cmj
new file mode 100644
index 0000000..f41b111
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseQuery.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseQuery.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseQuery.cmt
new file mode 100644
index 0000000..b0df144
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseQuery.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseQuery.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseQuery.res
new file mode 100644
index 0000000..3cd0437
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseQuery.res
@@ -0,0 +1,216 @@
+module ApolloClient = ApolloClient__Core_ApolloClient
+module ApolloError = ApolloClient__Errors_ApolloError
+module ErrorPolicy = ApolloClient__Core_WatchQueryOptions.ErrorPolicy
+module Graphql = ApolloClient__Graphql
+module QueryHookOptions = ApolloClient__React_Types.QueryHookOptions
+module QueryResult = ApolloClient__React_Types.QueryResult
+module RefetchQueryDescription = ApolloClient__Core_WatchQueryOptions.RefetchQueryDescription
+module Types = ApolloClient__Types
+module Utils = ApolloClient__Utils
+module WatchQueryFetchPolicy = ApolloClient__Core_WatchQueryOptions.WatchQueryFetchPolicy
+
+module type Operation = Types.Operation
+module type OperationNoRequiredVars = Types.OperationNoRequiredVars
+
+module Js_ = {
+  // export declare function useQuery<TData = any, TVariables = OperationVariables>(query: DocumentNode, options?: QueryHookOptions<TData, TVariables>): QueryResult<TData, TVariables>;
+  @bs.module("@apollo/client")
+  external useQuery: (
+    . Graphql.documentNode,
+    QueryHookOptions.Js_.t<'jsData, 'jsVariables>,
+  ) => QueryResult.Js_.t<'jsData, 'jsVariables> = "useQuery"
+}
+
+let useQuery:
+  type data jsData variables jsVariables. (
+    ~query: module(Operation with
+      type t = data
+      and type Raw.t = jsData
+      and type t_variables = variables
+      and type Raw.t_variables = jsVariables
+    ),
+    ~client: ApolloClient.t=?,
+    ~context: Js.Json.t=?,
+    ~displayName: string=?,
+    ~errorPolicy: ErrorPolicy.t=?,
+    ~fetchPolicy: WatchQueryFetchPolicy.t=?,
+    ~mapJsVariables: jsVariables => jsVariables=?,
+    ~notifyOnNetworkStatusChange: bool=?,
+    ~onCompleted: Types.parseResult<data> => unit=?,
+    ~onError: ApolloError.t => unit=?,
+    ~partialRefetch: bool=?,
+    ~pollInterval: int=?,
+    ~skip: bool=?,
+    ~ssr: bool=?,
+    variables,
+  ) => QueryResult.t<data, jsData, variables, jsVariables> =
+  (
+    ~query as module(Operation),
+    ~client=?,
+    ~context=?,
+    ~displayName=?,
+    ~errorPolicy=?,
+    ~fetchPolicy=?,
+    ~mapJsVariables=Utils.identity,
+    ~notifyOnNetworkStatusChange=?,
+    ~onCompleted=?,
+    ~onError=?,
+    ~partialRefetch=?,
+    ~pollInterval=?,
+    ~skip=?,
+    ~ssr=?,
+    variables,
+  ) => {
+    let safeParse = Utils.safeParse(Operation.parse)
+
+    let jsQueryResult = Js_.useQuery(.
+      Operation.query,
+      QueryHookOptions.toJs(
+        {
+          client: client,
+          context: context,
+          displayName: displayName,
+          errorPolicy: errorPolicy,
+          fetchPolicy: fetchPolicy,
+          onCompleted: onCompleted,
+          onError: onError,
+          notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,
+          partialRefetch: partialRefetch,
+          pollInterval: pollInterval,
+          query: None,
+          skip: skip,
+          ssr: ssr,
+          variables: variables,
+        },
+        ~mapJsVariables,
+        ~safeParse,
+        ~serializeVariables=Operation.serializeVariables,
+      ),
+    )
+
+    Utils.useGuaranteedMemo1(
+      () =>
+        jsQueryResult->QueryResult.fromJs(
+          ~safeParse,
+          ~serialize=Operation.serialize,
+          ~serializeVariables=Operation.serializeVariables,
+        ),
+      jsQueryResult,
+    )
+  }
+
+module Extend = (M: Operation) => {
+  let refetchQueryDescription: (
+    ~context: Js.Json.t=?,
+    ~mapJsVariables: 'jsVariables => 'jsVariables=?,
+    M.t_variables,
+  ) => RefetchQueryDescription.t_variant = (
+    ~context=?,
+    ~mapJsVariables=Utils.identity,
+    variables,
+  ) => {
+    let jsVariables = variables->M.serializeVariables->mapJsVariables
+
+    RefetchQueryDescription.PureQueryOptions({
+      query: M.query,
+      variables: jsVariables,
+      context: context,
+    })
+  }
+
+  let use = (
+    ~client=?,
+    ~context=?,
+    ~displayName=?,
+    ~errorPolicy=?,
+    ~fetchPolicy=?,
+    ~mapJsVariables=?,
+    ~notifyOnNetworkStatusChange=?,
+    ~onCompleted=?,
+    ~onError=?,
+    ~partialRefetch=?,
+    ~pollInterval=?,
+    ~skip=?,
+    ~ssr=?,
+    variables,
+  ) =>
+    useQuery(
+      ~query=module(M),
+      ~client?,
+      ~context?,
+      ~displayName?,
+      ~errorPolicy?,
+      ~fetchPolicy?,
+      ~mapJsVariables?,
+      ~notifyOnNetworkStatusChange?,
+      ~onCompleted?,
+      ~onError?,
+      ~partialRefetch?,
+      ~pollInterval?,
+      ~skip?,
+      ~ssr?,
+      variables,
+    )
+
+  let useLazy = (
+    ~client=?,
+    ~context=?,
+    ~displayName=?,
+    ~errorPolicy=?,
+    ~fetchPolicy=?,
+    ~notifyOnNetworkStatusChange=?,
+    ~onCompleted=?,
+    ~onError=?,
+    ~partialRefetch=?,
+    ~pollInterval=?,
+    ~ssr=?,
+    (),
+  ) =>
+    ApolloClient__React_Hooks_UseLazyQuery.useLazyQuery(
+      ~query=module(M),
+      ~client?,
+      ~context?,
+      ~displayName?,
+      ~errorPolicy?,
+      ~fetchPolicy?,
+      ~notifyOnNetworkStatusChange?,
+      ~onCompleted?,
+      ~onError?,
+      ~partialRefetch?,
+      ~pollInterval?,
+      ~ssr?,
+      (),
+    )
+
+  let useLazyWithVariables = (
+    ~client=?,
+    ~context=?,
+    ~displayName=?,
+    ~errorPolicy=?,
+    ~fetchPolicy=?,
+    ~mapJsVariables=?,
+    ~notifyOnNetworkStatusChange=?,
+    ~onCompleted=?,
+    ~onError=?,
+    ~partialRefetch=?,
+    ~pollInterval=?,
+    ~ssr=?,
+    variables,
+  ) =>
+    ApolloClient__React_Hooks_UseLazyQuery.useLazyQueryWithVariables(
+      ~query=module(M),
+      ~client?,
+      ~context?,
+      ~displayName?,
+      ~errorPolicy?,
+      ~fetchPolicy?,
+      ~mapJsVariables?,
+      ~notifyOnNetworkStatusChange?,
+      ~onCompleted?,
+      ~onError?,
+      ~partialRefetch?,
+      ~pollInterval?,
+      ~ssr?,
+      variables,
+    )
+}
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseSubscription.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseSubscription.cmi
new file mode 100644
index 0000000..eee18f9
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseSubscription.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseSubscription.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseSubscription.cmj
new file mode 100644
index 0000000..8c7a988
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseSubscription.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseSubscription.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseSubscription.cmt
new file mode 100644
index 0000000..03a9594
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseSubscription.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseSubscription.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseSubscription.res
new file mode 100644
index 0000000..e71086f
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Hooks_UseSubscription.res
@@ -0,0 +1,118 @@
+module ApolloClient = ApolloClient__Core_ApolloClient
+module ApolloError = ApolloClient__Errors_ApolloError
+module BaseSubscriptionOptions = ApolloClient__React_Types.BaseSubscriptionOptions
+module FetchPolicy = ApolloClient__Core_WatchQueryOptions.FetchPolicy
+module Graphql = ApolloClient__Graphql
+module OnSubscriptionDataOptions = ApolloClient__React_Types.OnSubscriptionDataOptions
+module SubscriptionHookOptions = ApolloClient__React_Types.SubscriptionHookOptions
+module Types = ApolloClient__Types
+module Utils = ApolloClient__Utils
+
+module type Operation = Types.Operation
+module type OperationNoRequiredVars = Types.OperationNoRequiredVars
+
+module Js_ = {
+  type useSubscription_result<'jsData, 'jsVariables> = {
+    variables: option<'jsVariables>,
+    loading: bool,
+    data: option<'jsData>,
+    error: option<ApolloError.Js_.t>,
+  }
+
+  // export declare function useSubscription<TData = any, TVariables = OperationVariables>(subscription: DocumentNode, options?: SubscriptionHookOptions<TData, TVariables>): {
+  //     variables: TVariables | undefined;
+  //     loading: boolean;
+  //     data?: TData | undefined;
+  //     error?: import("../..").ApolloError | undefined;
+  // };
+  @bs.module("@apollo/client")
+  external useSubscription: (
+    . Graphql.Language.documentNode,
+    SubscriptionHookOptions.Js_.t<'jsData, 'jsVariables>,
+  ) => useSubscription_result<'jsData, 'jsVariables> = "useSubscription"
+}
+
+type useSubscription_result<'data, 'jsVariables> = {
+  variables: option<'jsVariables>,
+  loading: bool,
+  data: option<'data>,
+  error: option<ApolloError.t>,
+}
+
+let useSubscription:
+  type data variables jsVariables. (
+    ~subscription: module(Operation with
+      type t = data
+      and type t_variables = variables
+      and type Raw.t_variables = jsVariables
+    ),
+    ~client: ApolloClient.t=?,
+    ~fetchPolicy: FetchPolicy.t=?,
+    ~mapJsVariables: jsVariables => jsVariables=?,
+    ~onSubscriptionData: OnSubscriptionDataOptions.t<data> => unit=?,
+    ~onSubscriptionComplete: unit => unit=?,
+    ~shouldResubscribe: BaseSubscriptionOptions.t<data, jsVariables> => bool=?,
+    ~skip: bool=?,
+    variables,
+  ) => useSubscription_result<data, jsVariables> =
+  (
+    ~subscription as module(Operation),
+    ~client=?,
+    ~fetchPolicy=?,
+    ~mapJsVariables=Utils.identity,
+    ~onSubscriptionData=?,
+    ~onSubscriptionComplete=?,
+    ~shouldResubscribe=?,
+    ~skip=?,
+    variables,
+  ) => {
+    let safeParse = Utils.safeParse(Operation.parse)
+
+    let jsSubscriptionResult = Js_.useSubscription(.
+      Operation.query,
+      SubscriptionHookOptions.toJs(
+        {
+          client: client,
+          fetchPolicy: fetchPolicy,
+          onSubscriptionData: onSubscriptionData,
+          onSubscriptionComplete: onSubscriptionComplete,
+          subscription: None,
+          shouldResubscribe: shouldResubscribe,
+          skip: skip,
+          variables: variables,
+        },
+        ~mapJsVariables,
+        ~safeParse,
+        ~serializeVariables=Operation.serializeVariables,
+      ),
+    )
+
+    Utils.useGuaranteedMemo1(() => {
+      variables: jsSubscriptionResult.variables,
+      loading: jsSubscriptionResult.loading,
+      data: jsSubscriptionResult.data->Belt.Option.map(Operation.parse),
+      error: jsSubscriptionResult.error->Belt.Option.map(ApolloError.fromJs),
+    }, jsSubscriptionResult)
+  }
+
+module Extend = (M: Operation) => {
+  let use = (
+    ~client=?,
+    ~fetchPolicy=?,
+    ~onSubscriptionData=?,
+    ~onSubscriptionComplete=?,
+    ~shouldResubscribe=?,
+    ~skip=?,
+    variables,
+  ) =>
+    useSubscription(
+      ~subscription=module(M),
+      ~client?,
+      ~fetchPolicy?,
+      ~onSubscriptionData?,
+      ~onSubscriptionComplete?,
+      ~shouldResubscribe?,
+      ~skip?,
+      variables,
+    )
+}
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Types.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Types.cmi
new file mode 100644
index 0000000..2626333
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Types.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Types.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Types.cmj
new file mode 100644
index 0000000..5258c5b
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Types.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Types.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Types.cmt
new file mode 100644
index 0000000..78d96cb
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Types.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Types.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Types.res
new file mode 100644
index 0000000..3d1311c
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__React_Types.res
@@ -0,0 +1,1241 @@
+module ApolloClient = ApolloClient__Core_ApolloClient
+module ApolloError = ApolloClient__Errors_ApolloError
+module ApolloQueryResult = ApolloClient__Core_Types.ApolloQueryResult
+module ErrorPolicy = ApolloClient__Core_WatchQueryOptions.ErrorPolicy
+module FetchPolicy = ApolloClient__Core_WatchQueryOptions.FetchPolicy
+module FetchPolicy__noCacheExtracted = ApolloClient__Core_WatchQueryOptions.FetchPolicy__noCacheExtracted
+module FetchResult = ApolloClient__Link_Core_Types.FetchResult
+module Graphql = ApolloClient__Graphql
+module MutationUpdaterFn = ApolloClient__Core_WatchQueryOptions.MutationUpdaterFn
+module NetworkStatus = ApolloClient__Core_NetworkStatus.NetworkStatus
+module RefetchQueryDescription = ApolloClient__Core_WatchQueryOptions.RefetchQueryDescription
+module SubscribeToMoreOptions = ApolloClient__Core_WatchQueryOptions.SubscribeToMoreOptions
+module Types = ApolloClient__Types
+module UpdateQueryFn = ApolloClient__Core_WatchQueryOptions.UpdateQueryFn
+module Utils = ApolloClient__Utils
+module WatchQueryFetchPolicy = ApolloClient__Core_WatchQueryOptions.WatchQueryFetchPolicy
+
+module type Operation = Types.Operation
+
+module QueryHookOptions = {
+  module Js_ = {
+    // export interface QueryHookOptions<TData = any, TVariables = OperationVariables> extends QueryFunctionOptions<TData, TVariables> {
+    //     query?: DocumentNode;
+    // }
+    type t<'jsData, 'jsVariables> = {
+      query: option<Graphql.documentNode>,
+      // ...extends QueryFunctionOptions
+      displayName: option<string>,
+      skip: option<bool>,
+      onCompleted: option<'jsData => unit>,
+      onError: option<(. ApolloError.Js_.t) => unit>,
+      // ..extends BaseQueryOptions
+      client: option<ApolloClient.t>,
+      context: option<Js.Json.t>, // ACTUAL: Record<string, any>
+      errorPolicy: option<string>,
+      fetchPolicy: option<string>,
+      notifyOnNetworkStatusChange: option<bool>,
+      partialRefetch: option<bool>,
+      pollInterval: option<int>,
+      // INTENTIONALLY IGNORED (but now with safeParse and result unwrapping, maybe it shouldn't be?)
+      // returnPartialData: option(bool),
+      ssr: option<bool>,
+      // We don't allow optional variables because it's not typesafe
+      variables: 'jsVariables,
+    }
+  }
+
+  type t<'data, 'variables> = {
+    query: option<Graphql.documentNode>,
+    // ...extends QueryFunctionOptions
+    displayName: option<string>,
+    skip: option<bool>,
+    onCompleted: option<Types.parseResult<'data> => unit>,
+    onError: option<ApolloError.t => unit>,
+    // ...extends BaseQueryOptions
+    client: option<ApolloClient.t>,
+    context: option<Js.Json.t>,
+    errorPolicy: option<ErrorPolicy.t>,
+    fetchPolicy: option<WatchQueryFetchPolicy.t>,
+    notifyOnNetworkStatusChange: option<bool>,
+    partialRefetch: option<bool>,
+    pollInterval: option<int>,
+    // INTENTIONALLY IGNORED (but now with safeParse and result unwrapping, maybe it shouldn't be?)
+    // returnPartialData: option(bool),
+    ssr: option<bool>,
+    variables: 'variables,
+  }
+
+  let toJs = (
+    t: t<'data, 'variables>,
+    ~mapJsVariables: 'jsVariables => 'jsVariables,
+    ~safeParse: Types.safeParse<'data, 'jsData>,
+    ~serializeVariables: 'variables => 'jsVariables,
+  ): Js_.t<'jsData, 'jsVariables> => {
+    client: t.client,
+    context: t.context,
+    displayName: t.displayName,
+    errorPolicy: t.errorPolicy->Belt.Option.map(ErrorPolicy.toJs),
+    onCompleted: t.onCompleted->Belt.Option.map((onCompleted, jsData) =>
+      onCompleted(jsData->safeParse)
+    ),
+    onError: t.onError->Belt.Option.map((onError, . jsApolloError) =>
+      onError(ApolloError.fromJs(jsApolloError))
+    ),
+    fetchPolicy: t.fetchPolicy->Belt.Option.map(WatchQueryFetchPolicy.toJs),
+    notifyOnNetworkStatusChange: t.notifyOnNetworkStatusChange,
+    query: t.query,
+    pollInterval: t.pollInterval,
+    partialRefetch: t.partialRefetch,
+    skip: t.skip,
+    ssr: t.ssr,
+    variables: t.variables->serializeVariables->mapJsVariables,
+  }
+}
+
+module LazyQueryHookOptions = {
+  module Js_ = {
+    // export interface LazyQueryHookOptions<TData = any, TVariables = OperationVariables> extends Omit<QueryFunctionOptions<TData, TVariables>, 'skip'> {
+    //     query?: DocumentNode;
+    // }
+    @bs.deriving(abstract)
+    type t<'jsData, 'jsVariables> = {
+      @bs.optional
+      query: Graphql.documentNode,
+      // ...extends QueryFunctionOptions
+      @bs.optional
+      displayName: string,
+      @bs.optional
+      onCompleted: 'jsData => unit,
+      @bs.optional
+      onError: (. ApolloError.Js_.t) => unit,
+      // ..extends BaseQueryOptions
+      @bs.optional
+      client: ApolloClient.t,
+      @bs.optional
+      context: Js.Json.t, // ACTUAL: Record<string, any>
+      @bs.optional
+      errorPolicy: string,
+      @bs.optional
+      fetchPolicy: string,
+      @bs.optional
+      notifyOnNetworkStatusChange: bool,
+      @bs.optional
+      partialRefetch: bool,
+      @bs.optional
+      pollInterval: int,
+      // INTENTIONALLY IGNORED (but now with safeParse and result unwrapping, maybe it shouldn't be?)
+      // returnPartialData: option(bool),
+      @bs.optional
+      ssr: bool,
+      @bs.optional
+      variables: 'jsVariables,
+    }
+    let make = t
+  }
+
+  type t<'data, 'variables> = {
+    query: option<Graphql.documentNode>,
+    // ...extends QueryFunctionOptions
+    displayName: option<string>,
+    onCompleted: option<Types.parseResult<'data> => unit>,
+    onError: option<ApolloError.t => unit>,
+    // ...extends BaseQueryOptions
+    client: option<ApolloClient.t>,
+    context: option<Js.Json.t>,
+    errorPolicy: option<ErrorPolicy.t>,
+    fetchPolicy: option<WatchQueryFetchPolicy.t>,
+    notifyOnNetworkStatusChange: option<bool>,
+    partialRefetch: option<bool>,
+    pollInterval: option<int>,
+    // INTENTIONALLY IGNORED (but now with safeParse and result unwrapping, maybe it shouldn't be?)
+    // returnPartialData: option(bool),
+    ssr: option<bool>,
+    variables: option<'variables>,
+  }
+
+  let toJs = (
+    t: t<'data, 'variables>,
+    ~safeParse: Types.safeParse<'data, 'jsData>,
+    ~serializeVariables: 'variables => 'jsVariables,
+  ): Js_.t<'jsData, 'jsVariables> =>
+    Js_.make(
+      ~client=?t.client,
+      ~context=?t.context,
+      ~displayName=?t.displayName,
+      ~errorPolicy=?t.errorPolicy->Belt.Option.map(ErrorPolicy.toJs),
+      ~onCompleted=?t.onCompleted->Belt.Option.map((onCompleted, jsData) =>
+        onCompleted(jsData->safeParse)
+      ),
+      ~onError=?t.onError->Belt.Option.map((onError, . jsApolloError) =>
+        onError(ApolloError.fromJs(jsApolloError))
+      ),
+      ~fetchPolicy=?t.fetchPolicy->Belt.Option.map(WatchQueryFetchPolicy.toJs),
+      ~notifyOnNetworkStatusChange=?t.notifyOnNetworkStatusChange,
+      ~query=?t.query,
+      ~pollInterval=?t.pollInterval,
+      ~partialRefetch=?t.partialRefetch,
+      ~ssr=?t.ssr,
+      ~variables=?t.variables->Belt.Option.map(serializeVariables),
+      (),
+    )
+}
+module QueryLazyOptions = {
+  module Js_ = {
+    // export interface QueryLazyOptions<TVariables> {
+    //     variables?: TVariables;
+    //     context?: Context;
+    // }
+    type t<'jsVariables> = {
+      variables: 'jsVariables,
+      context: option<Js.Json.t>,
+    }
+  }
+
+  type t<'jsVariables> = Js_.t<'jsVariables>
+}
+
+module QueryResult = {
+  type useMethodFunctionsInThisModuleInstead
+
+  module Js_ = {
+    type t_fetchMoreOptions_updateQueryOptions<'jsData, 'jsVariables> = {
+      fetchMoreResult: option<'jsData>,
+      variables: option<'jsVariables>,
+    }
+
+    // We use abstract because Apollo is looking at query key, not just value
+    @bs.deriving(abstract)
+    type t_fetchMoreOptions<'jsData, 'jsVariables> = {
+      @bs.optional
+      query: Graphql.Language.documentNode,
+      // ...extends FetchMoreQueryOptions
+      @bs.optional
+      variables: 'jsVariables,
+      @bs.optional
+      context: Js.Json.t,
+      // ...extends FetchMoreOptions
+      @bs.optional
+      updateQuery: (
+        . 'jsData,
+        t_fetchMoreOptions_updateQueryOptions<'jsData, 'jsVariables>,
+      ) => 'jsData,
+    }
+
+    type t_updateQueryOptions<'jsVariables> = {variables: 'jsVariables}
+
+    // export interface QueryResult<TData = any, TVariables = OperationVariables> extends ObservableQueryFields<TData, TVariables> {
+    //     client: ApolloClient<any>;
+    //     data: TData | undefined;
+    //     previousData?: TData;
+    //     error?: ApolloError;
+    //     loading: boolean;
+    //     networkStatus: NetworkStatus;
+    //     called: true;
+    // }
+    type t<'jsData, 'jsVariables> = {
+      called: bool,
+      client: ApolloClient.t,
+      data: option<'jsData>,
+      previousData: option<'jsData>,
+      error: option<ApolloError.Js_.t>,
+      loading: bool,
+      networkStatus: NetworkStatus.Js_.t,
+      // ...extends ObservableQueryFields<TData, TVariables> = Pick<ObservableQuery<TData, TVariables>, 'startPolling' | 'stopPolling' | 'subscribeToMore' | 'updateQuery' | 'refetch' | 'jsVariables'>
+      fetchMore: useMethodFunctionsInThisModuleInstead,
+      refetch: useMethodFunctionsInThisModuleInstead,
+      startPolling: useMethodFunctionsInThisModuleInstead,
+      stopPolling: useMethodFunctionsInThisModuleInstead,
+      subscribeToMore: useMethodFunctionsInThisModuleInstead,
+      updateQuery: useMethodFunctionsInThisModuleInstead,
+      variables: 'jsVariables,
+    }
+
+    @bs.send
+    external fetchMore: (
+      t<'jsData, 'jsVariables>,
+      t_fetchMoreOptions<'jsData, 'jsVariables>,
+    ) => Js.Promise.t<ApolloQueryResult.Js_.t<'jsData>> = "fetchMore"
+
+    @bs.send
+    external refetch: (
+      t<'jsData, 'jsVariables>,
+      option<'jsVariables>,
+    ) => Js.Promise.t<ApolloQueryResult.Js_.t<'jsData>> = "refetch"
+
+    @bs.send
+    external startPolling: (t<'jsData, 'jsVariables>, int) => unit = "startPolling"
+
+    @bs.send
+    external stopPolling: t<'jsData, 'jsVariables> => unit = "stopPolling"
+
+    @bs.send
+    external updateQuery: (
+      t<'jsData, 'jsVariables>,
+      ('jsData, t_updateQueryOptions<'jsVariables>) => 'jsData,
+    ) => unit = "updateQuery"
+
+    // subscribeToMore<TSubscriptionData = TData, TSubscriptionVariables = TVariables>(options: SubscribeToMoreOptions<TData, TSubscriptionVariables, TSubscriptionData>): () => void;
+    @bs.send
+    external subscribeToMore: (
+      t<'jsData, 'jsVariables>,
+      SubscribeToMoreOptions.Js_.t<'jsData, 'subscriptionVariables, 'jsSubscriptionData>,
+    ) => unit = "subscribeToMore"
+  }
+
+  type t_updateQueryOptions<'jsVariables> = Js_.t_updateQueryOptions<'jsVariables>
+
+  type t_fetchMoreOptions_updateQueryOptions<'jsData, 'data, 'jsVariables> = {
+    fetchMoreResult: option<'data>,
+    variables: option<'jsVariables>,
+  }
+
+  type t_fetchMoreOptions<'jsData, 'data, 'jsVariables> = {
+    query: option<Graphql.Language.documentNode>,
+    // ...extends FetchMoreQueryOptions
+    variables: option<'jsVariables>,
+    context: option<Js.Json.t>,
+    // ...extends FetchMoreOptions
+    updateQuery: option<
+      ('data, t_fetchMoreOptions_updateQueryOptions<'jsData, 'data, 'jsVariables>) => 'data,
+    >,
+  }
+
+  type t_subscribeToMoreError =
+    | ParseError(Types.parseError)
+    | SubscriptionError(Js.Exn.t)
+
+  type t<'data, 'jsData, 'variables, 'jsVariables> = {
+    called: bool,
+    client: ApolloClient.t,
+    data: option<'data>,
+    previousData: option<Types.parseResult<'data>>,
+    error: option<ApolloError.t>,
+    loading: bool,
+    networkStatus: NetworkStatus.t,
+    fetchMore: (
+      ~context: Js.Json.t=?,
+      ~mapJsVariables: 'jsVariables => 'jsVariables=?,
+      ~variables: 'variables=?,
+      ~updateQuery: (
+        'data,
+        t_fetchMoreOptions_updateQueryOptions<'jsData, 'data, 'jsVariables>,
+      ) => 'data=?,
+      unit,
+    ) => Js.Promise.t<Belt.Result.t<ApolloQueryResult.t__ok<'data>, ApolloError.t>>,
+    refetch: (
+      ~mapJsVariables: 'jsVariables => 'jsVariables=?,
+      ~variables: 'variables=?,
+      unit,
+    ) => Js.Promise.t<Belt.Result.t<ApolloQueryResult.t__ok<'data>, ApolloError.t>>,
+    startPolling: int => unit,
+    stopPolling: unit => unit,
+    subscribeToMore: 'subscriptionData 'subscriptionVariables. (
+      ~subscription: module(Operation with
+        type t = 'subscriptionData
+        and type Raw.t_variables = 'subscriptionVariables
+      ),
+      ~updateQuery: UpdateQueryFn.t<'data, 'subscriptionVariables, 'subscriptionData>=?,
+      ~onError: t_subscribeToMoreError => unit=?,
+      ~context: Js.Json.t=?,
+      'subscriptionVariables,
+    ) => unit,
+    updateQuery: ((Types.parseResult<'data>, t_updateQueryOptions<'jsVariables>) => 'data) => unit,
+  }
+
+  external unsafeCastForMethod: t<'data, 'jsData, 'variables, 'jsVariables> => Js_.t<
+    'jsData,
+    'jsVariables,
+  > = "%identity"
+
+  let fromJs: (
+    Js_.t<'jsData, 'jsVariables>,
+    ~safeParse: Types.safeParse<'data, 'jsData>,
+    ~serialize: 'data => 'jsData,
+    ~serializeVariables: 'variables => 'jsVariables,
+  ) => t<'data, 'jsData, 'variables, 'jsVariables> = (
+    js,
+    ~safeParse,
+    ~serialize,
+    ~serializeVariables,
+  ) => {
+    let (data, error) = Utils.safeParseAndLiftToCommonResultProps(
+      ~jsData=js.data,
+      ~apolloError=?js.error->Belt.Option.map(ApolloError.fromJs),
+      safeParse,
+    )
+
+    let previousData = js.previousData->Belt.Option.map(safeParse)
+
+    let fetchMore = (
+      ~context=?,
+      ~mapJsVariables=Utils.identity,
+      ~variables=?,
+      ~updateQuery=?,
+      (),
+    ) => {
+      let parseErrorDuringCall: ref<option<Types.parseResult<_>>> = ref(None)
+
+      js
+      ->Js_.fetchMore(
+        Js_.t_fetchMoreOptions(
+          ~context?,
+          ~updateQuery=?updateQuery->Belt.Option.map((
+            updateQuery,
+            . previousResult,
+            jsFetchMoreOptions: Js_.t_fetchMoreOptions_updateQueryOptions<'jsData, 'jsVariables>,
+          ) =>
+            switch (
+              safeParse(previousResult),
+              jsFetchMoreOptions.fetchMoreResult->Belt.Option.map(safeParse),
+            ) {
+            | (Ok(previousResult), Some(Ok(fetchMoreResult))) =>
+              updateQuery(
+                previousResult,
+                {
+                  fetchMoreResult: Some(fetchMoreResult),
+                  variables: jsFetchMoreOptions.variables,
+                },
+              )->serialize
+            | (Ok(previousResult), None) =>
+              updateQuery(
+                previousResult,
+                {
+                  fetchMoreResult: None,
+                  variables: jsFetchMoreOptions.variables,
+                },
+              )->serialize
+            | (Error(parseError), _)
+            | (Ok(_), Some(Error(parseError))) =>
+              parseErrorDuringCall.contents = Some(Error(parseError))
+              previousResult
+            }
+          ),
+          ~variables=?variables->Belt.Option.map(v => v->serializeVariables->mapJsVariables),
+          (),
+        ),
+      )
+      ->Js.Promise.then_(jsApolloQueryResult =>
+        Js.Promise.resolve(
+          switch parseErrorDuringCall.contents {
+          | Some(Error(parseError)) =>
+            Error(ApolloError.make(~networkError=ParseError(parseError), ()))
+          | _ =>
+            jsApolloQueryResult->ApolloQueryResult.fromJs(~safeParse)->ApolloQueryResult.toResult
+          },
+        )
+      , _)
+      ->Js.Promise.catch(error =>
+        Js.Promise.resolve(
+          Error(
+            ApolloError.make(
+              ~networkError=FetchFailure({
+                open Utils
+                ensureError(Any(error))
+              }),
+              (),
+            ),
+          ),
+        )
+      , _)
+    }
+
+    let refetch = (~mapJsVariables=Utils.identity, ~variables=?, ()) =>
+      js
+      ->Js_.refetch(variables->Belt.Option.map(v => v->serializeVariables->mapJsVariables))
+      ->Js.Promise.then_(
+        jsApolloQueryResult =>
+          Js.Promise.resolve(
+            jsApolloQueryResult->ApolloQueryResult.fromJs(~safeParse)->ApolloQueryResult.toResult,
+          ),
+        _,
+      )
+      ->Js.Promise.catch(
+        error =>
+          Js.Promise.resolve(
+            Error(ApolloError.make(~networkError=FetchFailure(Utils.ensureError(Any(error))), ())),
+          ),
+        _,
+      )
+
+    let startPolling = pollInterval => js->Js_.startPolling(pollInterval)
+
+    let stopPolling = () => js->Js_.stopPolling
+
+    let subscribeToMore = (
+      type subscriptionData subscriptionVariables,
+      ~subscription as module(Operation: Operation with
+        type t = subscriptionData
+        and type Raw.t_variables = subscriptionVariables
+      ),
+      ~updateQuery=?,
+      ~onError=?,
+      ~context=?,
+      variables,
+    ) => {
+      let subscriptionSafeParse = Utils.safeParse(Operation.parse)
+
+      js->Js_.subscribeToMore(
+        SubscribeToMoreOptions.toJs(
+          {
+            document: Operation.query,
+            variables: variables,
+            updateQuery: updateQuery,
+            onError: onError->Belt.Option.map((onError, error) =>
+              onError(SubscriptionError(error))
+            ),
+            context: context,
+          },
+          ~onUpdateQueryParseError=parseError =>
+            switch onError {
+            | Some(onError) => onError(ParseError(parseError))
+            | None => ()
+            },
+          ~querySafeParse=safeParse,
+          ~querySerialize=serialize,
+          ~subscriptionSafeParse,
+        ),
+      )
+    }
+
+    let updateQuery = updateQueryFn =>
+      js->Js_.updateQuery((jsPreviousData, options) =>
+        updateQueryFn(jsPreviousData->safeParse, options)->serialize
+      )
+
+    {
+      called: js.called,
+      client: js.client,
+      data: data,
+      previousData: previousData,
+      error: error,
+      loading: js.loading,
+      networkStatus: js.networkStatus->NetworkStatus.fromJs,
+      fetchMore: fetchMore,
+      refetch: refetch,
+      startPolling: startPolling,
+      stopPolling: stopPolling,
+      subscribeToMore: subscribeToMore,
+      updateQuery: updateQuery,
+    }
+  }
+}
+
+module UnexecutedLazyResult = {
+  module Js_ = {
+    // declare type UnexecutedLazyFields = {
+    //     loading: false;
+    //     networkStatus: NetworkStatus.ready;
+    //     called: false;
+    //     data: undefined;
+    // };
+    // declare type UnexecutedLazyResult = UnexecutedLazyFields & AbsentLazyResultFields;
+    type t = {
+      loading: bool,
+      networkStatus: NetworkStatus.Js_.t,
+      called: bool,
+    }
+  }
+  type t = {
+    loading: bool,
+    networkStatus: NetworkStatus.t,
+    called: bool,
+  }
+
+  let fromJs: Js_.t => t = js => {
+    loading: js.loading,
+    networkStatus: js.networkStatus->NetworkStatus.fromJs,
+    called: js.called,
+  }
+}
+
+module LazyQueryResult = {
+  module Js_ = {
+    module Union: {
+      type t
+      let unexecutedLazyResult: UnexecutedLazyResult.Js_.t => t
+      let queryResult: QueryResult.Js_.t<'jsData, 'jsVariables> => t
+      type case<'jsData, 'jsVariables> =
+        | UnexecutedLazyResult(UnexecutedLazyResult.Js_.t)
+        | QueryResult(QueryResult.Js_.t<'jsData, 'jsVariables>)
+      let classify: t => case<'jsData, 'jsVariables>
+    } = {
+      @unboxed
+      type rec t = Any('a): t
+      let unexecutedLazyResult = (v: UnexecutedLazyResult.Js_.t) => Any(v)
+      let queryResult = (v: QueryResult.Js_.t<'jsData, 'jsVariables>) => Any(v)
+      type case<'jsData, 'jsVariables> =
+        | UnexecutedLazyResult(UnexecutedLazyResult.Js_.t)
+        | QueryResult(QueryResult.Js_.t<'jsData, 'jsVariables>)
+      let classify = (Any(v): t): case<'jsData, 'jsVariables> =>
+        if %raw(`function (value) { return "client" in value}`)(v) {
+          QueryResult((Obj.magic(v): QueryResult.Js_.t<'jsData, 'jsVariables>))
+        } else {
+          UnexecutedLazyResult((Obj.magic(v): UnexecutedLazyResult.Js_.t))
+        }
+    }
+    // export declare type LazyQueryResult<TData, TVariables> = UnexecutedLazyResult | QueryResult<TData, TVariables>;
+    type t<'jsData, 'jsVariables> = Union.t
+  }
+
+  type t<'data, 'jsData, 'variables, 'jsVariables> =
+    | Executed(QueryResult.t<'data, 'jsData, 'variables, 'jsVariables>)
+    | Unexecuted(UnexecutedLazyResult.t)
+
+  let fromJs: (
+    Js_.t<'jsData, 'jsVariables>,
+    ~safeParse: Types.safeParse<'data, 'jsData>,
+    ~serialize: 'data => 'jsData,
+    ~serializeVariables: 'variables => 'jsVariables,
+  ) => t<'data, 'jsData, 'variables, 'jsVariables> = (
+    js,
+    ~safeParse,
+    ~serialize,
+    ~serializeVariables,
+  ) =>
+    switch js->Js_.Union.classify {
+    | UnexecutedLazyResult(v) => Unexecuted(v->UnexecutedLazyResult.fromJs)
+    | QueryResult(v) => Executed(v->QueryResult.fromJs(~safeParse, ~serialize, ~serializeVariables))
+    }
+}
+
+module QueryTuple = {
+  module Js_ = {
+    // export declare type QueryTuple<TData, TVariables> = [(options?: QueryLazyOptions<TVariables>) => void, LazyQueryResult<TData, TVariables>];
+    type t<'jsData, 'jsVariables> = (
+      QueryLazyOptions.Js_.t<'jsVariables> => unit,
+      LazyQueryResult.Js_.t<'jsData, 'jsVariables>,
+    )
+  }
+
+  type t<'data, 'jsData, 'variables, 'jsVariables> = (
+    (~context: Js.Json.t=?, ~mapJsVariables: 'jsVariables => 'jsVariables=?, 'variables) => unit,
+    LazyQueryResult.t<'data, 'jsData, 'variables, 'jsVariables>,
+  )
+
+  let fromJs: (
+    Js_.t<'jsData, 'jsVariables>,
+    ~safeParse: Types.safeParse<'data, 'jsData>,
+    ~serialize: 'data => 'jsData,
+    ~serializeVariables: 'variables => 'jsVariables,
+  ) => t<'data, 'jsData, 'variables, 'jsVariables> = (
+    (jsExecuteQuery, jsLazyQueryResult),
+    ~safeParse,
+    ~serialize,
+    ~serializeVariables,
+  ) => (
+    (~context=?, ~mapJsVariables=ApolloClient__Utils.identity, variables) =>
+      jsExecuteQuery({
+        context: context,
+        variables: variables->serializeVariables->mapJsVariables,
+      }),
+    jsLazyQueryResult->LazyQueryResult.fromJs(~safeParse, ~serialize, ~serializeVariables),
+  )
+}
+
+module QueryTuple__noVariables = {
+  module Js_ = {
+    type t<'jsData, 'jsVariables> = QueryTuple.Js_.t<'jsData, 'jsVariables>
+  }
+
+  type t<'data, 'jsData, 'variables, 'jsVariables> = (
+    (~context: Js.Json.t=?, unit) => unit,
+    LazyQueryResult.t<'data, 'jsData, 'variables, 'jsVariables>,
+  )
+
+  let fromJs: (
+    Js_.t<'jsData, 'jsVariables>,
+    ~mapJsVariables: 'jsVariables => 'jsVariables,
+    ~safeParse: Types.safeParse<'data, 'jsData>,
+    ~serialize: 'data => 'jsData,
+    ~serializeVariables: 'variables => 'jsVariables,
+    ~variables: 'variables,
+  ) => t<'data, 'jsData, 'variables, 'jsVariables> = (
+    (jsExecuteQuery, jsLazyQueryResult),
+    ~mapJsVariables,
+    ~safeParse,
+    ~serialize,
+    ~serializeVariables,
+    ~variables,
+  ) => (
+    (~context=?, ()) =>
+      jsExecuteQuery({
+        context: context,
+        variables: variables->serializeVariables->mapJsVariables,
+      }),
+    jsLazyQueryResult->LazyQueryResult.fromJs(~safeParse, ~serialize, ~serializeVariables),
+  )
+}
+
+module BaseMutationOptions = {
+  module Js_ = {
+    // export interface BaseMutationOptions<TData = any, TVariables = OperationVariables> {
+    //     awaitRefetchQueries?: boolean;
+    //     client?: ApolloClient<object>;
+    //     context?: Context;
+    //     errorPolicy?: ErrorPolicy;
+    //     fetchPolicy?: Extract<WatchQueryFetchPolicy, 'no-cache'>;
+    //     ignoreResults?: boolean;
+    //     onCompleted?: (data: TData) => void;
+    //     onError?: (error: ApolloError) => void;
+    //     optimisticResponse?: TData | ((vars: TVariables) => TData);
+    //     notifyOnNetworkStatusChange?: boolean;
+    //     refetchQueries?: Array<string | PureQueryOptions> | RefetchQueriesFunction;
+    //     update?: MutationUpdaterFn<TData>;
+    //     variables?: TVariables;
+    // }
+    type t<'jsData, 'jsVariables> = {
+      awaitRefetchQueries: option<bool>,
+      client: option<ApolloClient.Js_.t>,
+      context: option<Js.Json.t>, // actual: option(Context)
+      errorPolicy: option<ErrorPolicy.Js_.t>,
+      fetchPolicy: option<FetchPolicy__noCacheExtracted.Js_.t>,
+      ignoreResults: option<bool>,
+      notifyOnNetworkStatusChange: option<bool>,
+      onError: option<ApolloError.Js_.t => unit>,
+      optimisticResponse: option<'jsVariables => 'jsData>,
+      refetchQueries: option<RefetchQueryDescription.Js_.t>,
+      update: option<MutationUpdaterFn.Js_.t<'jsData>>,
+      variables: option<'jsVariables>,
+    }
+  }
+
+  type t<'data, 'jsVariables> = {
+    awaitRefetchQueries: option<bool>,
+    context: option<Js.Json.t>,
+    client: option<ApolloClient.t>,
+    errorPolicy: option<ErrorPolicy.t>,
+    fetchPolicy: option<FetchPolicy__noCacheExtracted.t>,
+    ignoreResults: option<bool>,
+    notifyOnNetworkStatusChange: option<bool>,
+    onError: option<ApolloError.t => unit>,
+    onCompleted: option<'data => unit>,
+    optimisticResponse: option<'jsVariables => 'data>,
+    refetchQueries: option<RefetchQueryDescription.t>,
+    update: option<MutationUpdaterFn.t<'data>>,
+    variables: option<'jsVariables>,
+  }
+}
+
+module MutationHookOptions = {
+  module Js_ = {
+    // export interface MutationHookOptions<TData = any, TVariables = OperationVariables> extends BaseMutationOptions<TData, TVariables> {
+    //   mutation?: DocumentNode;
+    // }
+    @ocaml.doc("
+     * We use deriving abstract here because option('jsVariables) is not typesafe,
+     * but still needs to be optional since a user has the option of providing
+     * the variables to the results of the hook rather than the hook itself
+     ")
+    @bs.deriving(abstract)
+    type t<'jsData, 'jsVariables> = {
+      @bs.optional
+      mutation: Graphql.documentNode,
+      // ...extends BaseMutationOptions
+      @bs.optional
+      awaitRefetchQueries: bool,
+      @bs.optional
+      client: ApolloClient.t, // Non-Js_ client is appropriate here
+      @bs.optional
+      context: Js.Json.t, // actual: option(Context)
+      @bs.optional
+      errorPolicy: ErrorPolicy.Js_.t,
+      @bs.optional
+      fetchPolicy: FetchPolicy__noCacheExtracted.Js_.t,
+      @bs.optional
+      ignoreResults: bool,
+      @bs.optional
+      notifyOnNetworkStatusChange: bool,
+      @bs.optional
+      onError: (. ApolloError.Js_.t) => unit,
+      @bs.optional
+      optimisticResponse: 'jsVariables => 'jsData,
+      @bs.optional
+      refetchQueries: RefetchQueryDescription.Js_.t,
+      @bs.optional
+      update: MutationUpdaterFn.Js_.t<'jsData>,
+      @bs.optional
+      variables: 'jsVariables,
+    }
+    let make = t
+  }
+
+  type t<'data, 'variables, 'jsVariables> = {
+    mutation: option<Graphql.documentNode>,
+    awaitRefetchQueries: option<bool>,
+    context: option<Js.Json.t>,
+    client: option<ApolloClient.t>,
+    errorPolicy: option<ErrorPolicy.t>,
+    fetchPolicy: option<FetchPolicy__noCacheExtracted.t>,
+    ignoreResults: option<bool>,
+    notifyOnNetworkStatusChange: option<bool>,
+    onError: option<ApolloError.t => unit>,
+    onCompleted: option<'data => unit>,
+    optimisticResponse: option<'jsVariables => 'data>,
+    refetchQueries: option<RefetchQueryDescription.t>,
+    update: option<MutationUpdaterFn.t<'data>>,
+    variables: option<'variables>,
+  }
+
+  let toJs: (
+    t<'data, 'variables, 'jsVariables>,
+    ~mapJsVariables: 'jsVariables => 'jsVariables,
+    ~safeParse: Types.safeParse<'data, 'jsData>,
+    ~serialize: 'data => 'jsData,
+    ~serializeVariables: 'variables => 'jsVariables,
+  ) => Js_.t<'jsData, 'jsVariables> = (
+    t,
+    ~mapJsVariables,
+    ~safeParse,
+    ~serialize,
+    ~serializeVariables,
+  ) =>
+    Js_.make(
+      ~awaitRefetchQueries=?t.awaitRefetchQueries,
+      ~context=?t.context,
+      ~client=?t.client,
+      ~errorPolicy=?t.errorPolicy->Belt.Option.map(ErrorPolicy.toJs),
+      ~fetchPolicy=?t.fetchPolicy->Belt.Option.map(FetchPolicy__noCacheExtracted.toJs),
+      ~ignoreResults=?t.ignoreResults,
+      ~mutation=?t.mutation,
+      ~notifyOnNetworkStatusChange=?t.notifyOnNetworkStatusChange,
+      ~onError=?t.onError->Belt.Option.map((onError, . jsApolloError) =>
+        onError(ApolloError.fromJs(jsApolloError))
+      ),
+      ~optimisticResponse=?t.optimisticResponse->Belt.Option.map((optimisticResponse, variables) =>
+        optimisticResponse(variables)->serialize
+      ),
+      ~refetchQueries=?t.refetchQueries->Belt.Option.map(RefetchQueryDescription.toJs),
+      ~update=?t.update->Belt.Option.map(MutationUpdaterFn.toJs(~safeParse)),
+      ~variables=?t.variables->Belt.Option.map(v => v->serializeVariables->mapJsVariables),
+      (),
+    )
+}
+
+module MutationResult = {
+  module Js_ = {
+    // export interface MutationResult<TData = any> {
+    //     data?: TData | null;
+    //     error?: ApolloError;
+    //     loading: boolean;
+    //     called: boolean;
+    //     client?: ApolloClient<object>;
+    // }
+    type t<'jsData> = {
+      data: Js.nullable<'jsData>,
+      error: option<ApolloError.Js_.t>,
+      loading: bool,
+      called: bool,
+      client: option<ApolloClient.t>, // Non-Js_ client is appropriate here
+    }
+  }
+
+  type t<'data> = {
+    data: option<'data>,
+    error: option<ApolloError.t>,
+    loading: bool,
+    called: bool,
+    client: option<ApolloClient.t>,
+  }
+
+  let fromJs: (Js_.t<'jsData>, ~safeParse: Types.safeParse<'data, 'jsData>) => t<'data> = (
+    js,
+    ~safeParse,
+  ) => {
+    let (data, error) = Utils.safeParseAndLiftToCommonResultProps(
+      ~jsData=js.data->Js.toOption,
+      ~apolloError=?js.error->Belt.Option.map(ApolloError.fromJs),
+      safeParse,
+    )
+    {
+      data: data,
+      error: error,
+      loading: js.loading,
+      called: js.called,
+      client: js.client,
+    }
+  }
+}
+
+module MutationFunctionOptions = {
+  module Js_ = {
+    // export interface MutationFunctionOptions<TData = any, TVariables = OperationVariables> {
+    //     variables?: TVariables;
+    //     optimisticResponse?: TData | ((vars: TVariables | {}) => TData);
+    //     refetchQueries?: Array<string | PureQueryOptions> | RefetchQueriesFunction;
+    //     awaitRefetchQueries?: boolean;
+    //     update?: MutationUpdaterFn<TData>;
+    //     context?: Context;
+    //     fetchPolicy?: WatchQueryFetchPolicy;
+    // }
+    @ocaml.doc("
+     * We use deriving abstract here because this is used in a context where passing in explicit
+     * properties could override one already passed in
+     ")
+    type t<'jsData, 'jsVariables> = {
+      // We don't allow optional variables because it's not typesafe
+      variables: 'jsVariables,
+      optimisticResponse: option<(. 'jsVariables) => 'jsData>,
+      refetchQueries: option<RefetchQueryDescription.Js_.t>,
+      awaitRefetchQueries: option<bool>,
+      update: option<MutationUpdaterFn.Js_.t<'jsData>>,
+      context: option<Js.Json.t>, // actual: option(Context)
+      fetchPolicy: option<WatchQueryFetchPolicy.Js_.t>,
+    }
+  }
+
+  type t<'data, 'variables, 'jsVariables> = {
+    variables: 'variables,
+    optimisticResponse: option<'jsVariables => 'data>,
+    refetchQueries: option<RefetchQueryDescription.t>,
+    awaitRefetchQueries: option<bool>,
+    update: option<MutationUpdaterFn.t<'data>>,
+    context: option<Js.Json.t>, // actual: option(Context)
+    fetchPolicy: option<WatchQueryFetchPolicy.t>,
+  }
+
+  let toJs: (
+    t<'data, 'variables, 'jsVariables>,
+    ~mapJsVariables: 'jsVariables => 'jsVariables,
+    ~safeParse: Types.safeParse<'data, 'jsData>,
+    ~serialize: 'data => 'jsData,
+    ~serializeVariables: 'variables => 'jsVariables,
+  ) => Js_.t<'jsData, 'jsVariables> = (
+    t,
+    ~mapJsVariables,
+    ~safeParse,
+    ~serialize,
+    ~serializeVariables,
+  ) => {
+    variables: t.variables->serializeVariables->mapJsVariables,
+    optimisticResponse: t.optimisticResponse->Belt.Option.map((optimisticResponse, . variables) =>
+      optimisticResponse(variables)->serialize
+    ),
+    refetchQueries: t.refetchQueries->Belt.Option.map(RefetchQueryDescription.toJs),
+    awaitRefetchQueries: t.awaitRefetchQueries,
+    update: t.update->Belt.Option.map(MutationUpdaterFn.toJs(~safeParse)),
+    context: t.context,
+    fetchPolicy: t.fetchPolicy->Belt.Option.map(WatchQueryFetchPolicy.toJs),
+  }
+}
+
+module MutationTuple = {
+  module Js_ = {
+    // export declare type MutationTuple<TData, TVariables> = [(options?: MutationFunctionOptions<TData, TVariables>) => Promise<FetchResult<TData>>, MutationResult<TData>];
+    type t<'jsData, 'jsVariables> = (
+      option<MutationFunctionOptions.Js_.t<'jsData, 'jsVariables>> => Js.Promise.t<
+        FetchResult.Js_.t<'jsData>,
+      >,
+      MutationResult.Js_.t<'jsData>,
+    )
+  }
+
+  type t_mutationFn<'data, 'variables, 'jsVariables> = (
+    ~awaitRefetchQueries: bool=?,
+    ~context: Js.Json.t=?,
+    ~fetchPolicy: WatchQueryFetchPolicy.t=?,
+    ~mapJsVariables: 'jsVariables => 'jsVariables=?,
+    ~optimisticResponse: 'jsVariables => 'data=?,
+    ~refetchQueries: RefetchQueryDescription.t=?,
+    ~update: MutationUpdaterFn.t<'data>=?,
+    'variables,
+  ) => Js.Promise.t<Belt.Result.t<FetchResult.t__ok<'data>, ApolloError.t>>
+
+  type t<'data, 'variables, 'jsVariables> = (
+    t_mutationFn<'data, 'variables, 'jsVariables>,
+    MutationResult.t<'data>,
+  )
+
+  let fromJs: (
+    Js_.t<'jsData, 'jsVariables>,
+    ~safeParse: Types.safeParse<'data, 'jsData>,
+    ~serialize: 'data => 'jsData,
+    ~serializeVariables: 'variables => 'jsVariables,
+  ) => t<'data, 'variables, 'jsVariables> = (
+    (jsMutationFn, jsMutationResult),
+    ~safeParse,
+    ~serialize,
+    ~serializeVariables,
+  ) => {
+    let mutationFn = (
+      ~awaitRefetchQueries=?,
+      ~context=?,
+      ~fetchPolicy=?,
+      ~mapJsVariables=Utils.identity,
+      ~optimisticResponse=?,
+      ~refetchQueries=?,
+      ~update=?,
+      variables,
+    ) =>
+      jsMutationFn(
+        Some(
+          MutationFunctionOptions.toJs(
+            {
+              variables: variables,
+              optimisticResponse: optimisticResponse,
+              refetchQueries: refetchQueries,
+              awaitRefetchQueries: awaitRefetchQueries,
+              update: update,
+              context: context,
+              fetchPolicy: fetchPolicy,
+            },
+            ~mapJsVariables,
+            ~safeParse,
+            ~serialize,
+            ~serializeVariables,
+          ),
+        ),
+      )
+      ->Js.Promise.then_(
+        jsFetchResult =>
+          Js.Promise.resolve(FetchResult.fromJs(jsFetchResult, ~safeParse)->FetchResult.toResult),
+        _,
+      )
+      ->Js.Promise.catch(
+        error =>
+          Js.Promise.resolve(
+            Error(ApolloError.make(~networkError=FetchFailure(Utils.ensureError(Any(error))), ())),
+          ),
+        _,
+      )
+
+    (mutationFn, jsMutationResult->MutationResult.fromJs(~safeParse))
+  }
+}
+
+module MutationTuple__noVariables = {
+  module Js_ = {
+    type t<'jsData, 'jsVariables> = MutationTuple.Js_.t<'jsData, 'jsVariables>
+  }
+
+  type t_mutationFn<'data, 'jsVariables> = (
+    ~optimisticResponse: 'jsVariables => 'data=?,
+    ~refetchQueries: RefetchQueryDescription.t=?,
+    ~awaitRefetchQueries: bool=?,
+    ~update: MutationUpdaterFn.t<'data>=?,
+    ~context: Js.Json.t=?,
+    ~fetchPolicy: WatchQueryFetchPolicy.t=?,
+    unit,
+  ) => Js.Promise.t<Belt.Result.t<FetchResult.t__ok<'data>, ApolloError.t>>
+
+  type t<'data, 'jsVariables> = (t_mutationFn<'data, 'jsVariables>, MutationResult.t<'data>)
+
+  let fromJs: (
+    Js_.t<'jsData, 'jsVariables>,
+    ~mapJsVariables: 'jsVariables => 'jsVariables,
+    ~safeParse: Types.safeParse<'data, 'jsData>,
+    ~serialize: 'data => 'jsData,
+    ~serializeVariables: 'variables => 'jsVariables,
+    ~variables: 'variables,
+  ) => t<'data, 'jsVariables> = (
+    (jsMutationFn, jsMutationResult),
+    ~mapJsVariables,
+    ~safeParse,
+    ~serialize,
+    ~serializeVariables,
+    ~variables,
+  ) => {
+    let mutationFn = (
+      ~optimisticResponse=?,
+      ~refetchQueries=?,
+      ~awaitRefetchQueries=?,
+      ~update=?,
+      ~context=?,
+      ~fetchPolicy=?,
+      (),
+    ) =>
+      jsMutationFn(
+        Some(
+          MutationFunctionOptions.toJs(
+            {
+              variables: variables,
+              optimisticResponse: optimisticResponse,
+              refetchQueries: refetchQueries,
+              awaitRefetchQueries: awaitRefetchQueries,
+              update: update,
+              context: context,
+              fetchPolicy: fetchPolicy,
+            },
+            ~mapJsVariables,
+            ~safeParse,
+            ~serialize,
+            ~serializeVariables,
+          ),
+        ),
+      )
+      ->Js.Promise.then_(
+        jsFetchResult =>
+          Js.Promise.resolve(FetchResult.fromJs(jsFetchResult, ~safeParse)->FetchResult.toResult),
+        _,
+      )
+      ->Js.Promise.catch(
+        error =>
+          Js.Promise.resolve(
+            Error(ApolloError.make(~networkError=FetchFailure(Utils.ensureError(Any(error))), ())),
+          ),
+        _,
+      )
+
+    (mutationFn, jsMutationResult->MutationResult.fromJs(~safeParse))
+  }
+}
+
+module SubscriptionResult = {
+  module Js_ = {
+    // export interface SubscriptionResult<TData = any> {
+    //     loading: boolean;
+    //     data?: TData;
+    //     error?: ApolloError;
+    // }
+    type t<'jsData> = {
+      loading: bool,
+      data: option<'jsData>,
+      error: option<ApolloError.Js_.t>,
+    }
+  }
+
+  type t<'data> = {
+    loading: bool,
+    data: option<'data>,
+    error: option<ApolloError.t>,
+  }
+
+  let fromJs: (Js_.t<'jsData>, ~safeParse: Types.safeParse<'data, 'jsData>) => t<'data> = (
+    js,
+    ~safeParse,
+  ) => {
+    let (data, error) = Utils.safeParseAndLiftToCommonResultProps(
+      ~jsData=js.data,
+      ~apolloError=?js.error->Belt.Option.map(ApolloError.fromJs),
+      safeParse,
+    )
+
+    {loading: js.loading, data: data, error: error}
+  }
+}
+
+module OnSubscriptionDataOptions = {
+  module Js_ = {
+    // export interface OnSubscriptionDataOptions<TData = any> {
+    //     client: ApolloClient<object>;
+    //     subscriptionData: SubscriptionResult<TData>;
+    // }
+    type t<'jsData> = {
+      client: ApolloClient.t,
+      subscriptionData: SubscriptionResult.Js_.t<'jsData>,
+    }
+  }
+
+  type t<'data> = {
+    client: ApolloClient.t,
+    subscriptionData: SubscriptionResult.t<'data>,
+  }
+
+  let fromJs: (Js_.t<'jsData>, ~safeParse: Types.safeParse<'data, 'jsData>) => t<'data> = (
+    js,
+    ~safeParse,
+  ) => {
+    client: js.client,
+    subscriptionData: js.subscriptionData->SubscriptionResult.fromJs(~safeParse),
+  }
+}
+
+module BaseSubscriptionOptions = {
+  module Js_ = {
+    // export interface BaseSubscriptionOptions<TData = any, TVariables = OperationVariables> {
+    //     variables?: TVariables;
+    //     fetchPolicy?: FetchPolicy;
+    //     shouldResubscribe?: boolean | ((options: BaseSubscriptionOptions<TData, TVariables>) => boolean);
+    //     client?: ApolloClient<object>;
+    //     skip?: boolean;
+    //     onSubscriptionData?: (options: OnSubscriptionDataOptions<TData>) => any;
+    //     onSubscriptionComplete?: () => void;
+    // }
+    type rec t<'jsData, 'jsVariables> = {
+      variables: option<'jsVariables>,
+      fetchPolicy: option<FetchPolicy.t>,
+      shouldResubscribe: option<(. t<'jsData, 'jsVariables>) => bool>,
+      client: option<ApolloClient.t>,
+      skip: option<bool>,
+      onSubscriptionData: option<(. OnSubscriptionDataOptions.Js_.t<'jsData>) => unit>,
+      onSubscriptionComplete: option<unit => unit>,
+    }
+  }
+
+  type rec t<'data, 'jsVariables> = {
+    variables: option<'jsVariables>,
+    fetchPolicy: option<FetchPolicy.t>,
+    shouldResubscribe: option<t<'data, 'jsVariables> => bool>,
+    client: option<ApolloClient.t>,
+    skip: option<bool>,
+    onSubscriptionData: option<OnSubscriptionDataOptions.t<'data> => unit>,
+    onSubscriptionComplete: option<unit => unit>,
+  }
+
+  let fromJs: Js_.t<'jsData, 'jsVariables> => t<'data, 'jsVariables> = js => {
+    variables: js.variables,
+    fetchPolicy: js.fetchPolicy,
+    // shouldResubscribe: what to do here?
+    shouldResubscribe: Obj.magic(js.shouldResubscribe),
+    client: js.client,
+    skip: js.skip,
+    // onSubscriptionData: what to do here?
+    onSubscriptionData: Obj.magic(js.onSubscriptionData),
+    onSubscriptionComplete: js.onSubscriptionComplete,
+  }
+}
+
+module SubscriptionHookOptions = {
+  module Js_ = {
+    // export interface SubscriptionHookOptions<TData = any, TVariables = OperationVariables> extends BaseSubscriptionOptions<TData, TVariables> {
+    //     subscription?: DocumentNode;
+    // }
+    type t<'jsData, 'jsVariables> = {
+      subscription: option<Graphql.documentNode>,
+      // ...extends BaseSubscriptionOptions
+      // Intentionally restricted to not be non-optional. `option(unit)` does not compile cleanly to `undefined`
+      variables: 'jsVariables,
+      fetchPolicy: option<FetchPolicy.t>,
+      shouldResubscribe: option<(. BaseSubscriptionOptions.Js_.t<'jsData, 'jsVariables>) => bool>,
+      client: option<ApolloClient.t>,
+      skip: option<bool>,
+      onSubscriptionData: option<(. OnSubscriptionDataOptions.Js_.t<'jsData>) => unit>,
+      onSubscriptionComplete: option<unit => unit>,
+    }
+  }
+
+  type t<'data, 'variables, 'jsVariables> = {
+    subscription: option<Graphql.documentNode>,
+    variables: 'variables,
+    fetchPolicy: option<FetchPolicy.t>,
+    shouldResubscribe: option<BaseSubscriptionOptions.t<'data, 'jsVariables> => bool>,
+    client: option<ApolloClient.t>,
+    skip: option<bool>,
+    onSubscriptionData: option<OnSubscriptionDataOptions.t<'data> => unit>,
+    onSubscriptionComplete: option<unit => unit>,
+  }
+
+  let toJs: (
+    t<'data, 'variables, 'jsVariables>,
+    ~mapJsVariables: 'jsVariables => 'jsVariables,
+    ~safeParse: Types.safeParse<'data, 'jsData>,
+    ~serializeVariables: 'variables => 'jsVariables,
+  ) => Js_.t<'jsData, 'jsVariables> = (t, ~mapJsVariables, ~safeParse, ~serializeVariables) => {
+    subscription: t.subscription,
+    variables: t.variables->serializeVariables->mapJsVariables,
+    fetchPolicy: t.fetchPolicy,
+    shouldResubscribe: t.shouldResubscribe->Belt.Option.map((
+      shouldResubscribe,
+      . jsBaseSubscriptionOptions,
+    ) => shouldResubscribe(jsBaseSubscriptionOptions->BaseSubscriptionOptions.fromJs)),
+    client: t.client,
+    skip: t.skip,
+    onSubscriptionData: t.onSubscriptionData->Belt.Option.map((
+      onSubscriptionData,
+      . jsOnSubscriptionDataOptions,
+    ) =>
+      onSubscriptionData(jsOnSubscriptionDataOptions->OnSubscriptionDataOptions.fromJs(~safeParse))
+    ),
+    onSubscriptionComplete: t.onSubscriptionComplete,
+  }
+}
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__SubscriptionsTransportWs.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__SubscriptionsTransportWs.cmi
new file mode 100644
index 0000000..4f1f6ad
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__SubscriptionsTransportWs.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__SubscriptionsTransportWs.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__SubscriptionsTransportWs.cmj
new file mode 100644
index 0000000..8949d6c
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__SubscriptionsTransportWs.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__SubscriptionsTransportWs.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__SubscriptionsTransportWs.cmt
new file mode 100644
index 0000000..bf650cc
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__SubscriptionsTransportWs.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__SubscriptionsTransportWs.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__SubscriptionsTransportWs.res
new file mode 100644
index 0000000..7b3cf2c
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__SubscriptionsTransportWs.res
@@ -0,0 +1,207 @@
+// import { ListenerFn } from 'eventemitter3';
+// import { ExecutionResult } from 'graphql/execution/execute';
+// import { DocumentNode } from 'graphql/language/ast';
+// export interface Observer<T> {
+//     next?: (value: T) => void;
+//     error?: (error: Error) => void;
+//     complete?: () => void;
+// }
+// export interface Observable<T> {
+//     subscribe(observer: Observer<T>): {
+//         unsubscribe: () => void;
+//     };
+// }
+// export interface OperationOptions {
+//     query?: string | DocumentNode;
+//     variables?: Object;
+//     operationName?: string;
+//     [key: string]: any;
+// }
+// export declare type FormatedError = Error & {
+//     originalError?: any;
+// };
+// export interface Operation {
+//     options: OperationOptions;
+//     handler: (error: Error[], result?: any) => void;
+// }
+// export interface Operations {
+//     [id: string]: Operation;
+// }
+// export interface Middleware {
+//     applyMiddleware(options: OperationOptions, next: Function): void;
+// }
+module ConnectionParams = {
+  module Js_ = {
+    // export declare type ConnectionParams = {
+    //     [paramName: string]: any;
+    // };
+    type t = Js.Json.t
+  }
+
+  type t = Js_.t
+}
+
+module ConnectionParamsOptions = {
+  module Js_ = {
+    module Union: {
+      type t
+      let connectionParams: ConnectionParams.Js_.t => t
+      let fn: (unit => ConnectionParams.Js_.t) => t
+      let promise: Js.Promise.t<ConnectionParams.Js_.t> => t
+    } = {
+      @unboxed
+      type rec t = Any('a): t
+      let connectionParams = (v: ConnectionParams.Js_.t) => Any(v)
+      let fn = (v: unit => ConnectionParams.Js_.t) => Any(v)
+      let promise = (v: Js.Promise.t<ConnectionParams.Js_.t>) => Any(v)
+    }
+    // export declare type ConnectionParamsOptions = ConnectionParams | Function | Promise<ConnectionParams>;
+    type t = Union.t
+  }
+
+  type t =
+    | ConnectionParams(ConnectionParams.t)
+    | Function(unit => ConnectionParams.t)
+    | Promise(Js.Promise.t<ConnectionParams.t>)
+
+  let toJs: t => Js_.t = x =>
+    switch x {
+    | ConnectionParams(v) => Js_.Union.connectionParams(v)
+    | Function(v) => Js_.Union.fn(v)
+    | Promise(v) => Js_.Union.promise(v)
+    }
+}
+
+module ClientOptions = {
+  module Js_ = {
+    // export interface ClientOptions {
+    //     connectionParams?: ConnectionParamsOptions;
+    //     timeout?: number;
+    //     reconnect?: boolean;
+    //     reconnectionAttempts?: number;
+    //     connectionCallback?: (error: Error[], result?: any) => void;
+    //     lazy?: boolean;
+    //     inactivityTimeout?: number;
+    // }
+    type t = {
+      connectionParams: option<ConnectionParamsOptions.Js_.t>,
+      timeout: option<int>,
+      reconnect: option<bool>,
+      reconnectionAttempts: option<int>,
+      connectionCallback: option<(~error: array<Js.Exn.t>, ~result: option<Js.Json.t>) => unit>,
+      @bs.as("lazy")
+      lazy_: option<bool>,
+      inactivityTimeout: option<int>,
+    }
+  }
+
+  type t = {
+    connectionParams: option<ConnectionParamsOptions.t>,
+    timeout: option<int>,
+    reconnect: option<bool>,
+    reconnectionAttempts: option<int>,
+    connectionCallback: option<(~error: array<Js.Exn.t>, ~result: option<Js.Json.t>) => unit>,
+    @bs.as("lazy")
+    lazy_: option<bool>,
+    inactivityTimeout: option<int>,
+  }
+
+  let toJs: t => Js_.t = t => {
+    connectionParams: t.connectionParams->Belt.Option.map(ConnectionParamsOptions.toJs),
+    timeout: t.timeout,
+    reconnect: t.reconnect,
+    reconnectionAttempts: t.reconnectionAttempts,
+    connectionCallback: t.connectionCallback,
+    lazy_: t.lazy_,
+    inactivityTimeout: t.inactivityTimeout,
+  }
+
+  let make = (
+    ~connectionParams=?,
+    ~timeout=?,
+    ~reconnect=?,
+    ~reconnectionAttempts=?,
+    ~connectionCallback=?,
+    ~lazy_=?,
+    ~inactivityTimeout=?,
+    (),
+  ): t => {
+    connectionParams: connectionParams,
+    timeout: timeout,
+    reconnect: reconnect,
+    reconnectionAttempts: reconnectionAttempts,
+    connectionCallback: connectionCallback,
+    lazy_: lazy_,
+    inactivityTimeout: inactivityTimeout,
+  }
+}
+
+module SubscriptionClient = {
+  type webSocketImpl
+
+  module Js_ = {
+    // export declare class SubscriptionClient {
+    //     client: any;
+    //     operations: Operations;
+    //     constructor(url: string, options?: ClientOptions, webSocketImpl?: any, webSocketProtocols?: string | string[]);
+    //     readonly status: any;
+    //     close(isForced?: boolean, closedByUser?: boolean): void;
+    //     request(request: OperationOptions): Observable<ExecutionResult>;
+    //     on(eventName: string, callback: ListenerFn, context?: any): Function;
+    //     onConnected(callback: ListenerFn, context?: any): Function;
+    //     onConnecting(callback: ListenerFn, context?: any): Function;
+    //     onDisconnected(callback: ListenerFn, context?: any): Function;
+    //     onReconnected(callback: ListenerFn, context?: any): Function;
+    //     onReconnecting(callback: ListenerFn, context?: any): Function;
+    //     onError(callback: ListenerFn, context?: any): Function;
+    //     unsubscribeAll(): void;
+    //     applyMiddlewares(options: OperationOptions): Promise<OperationOptions>;
+    //     use(middlewares: Middleware[]): SubscriptionClient;
+    // }
+    type t
+
+    @bs.new @bs.module("subscriptions-transport-ws")
+    external make: (
+      ~url: string,
+      ~options: ClientOptions.Js_.t=?,
+      ~webSocketImpl: webSocketImpl=?,
+      ~webSocketProtocols: array<string>=?,
+      unit,
+    ) => t = "SubscriptionClient"
+
+    @bs.send
+    external close: (t, ~isForced: bool=?, ~closedByUser: bool=?, unit) => unit = "close"
+  }
+
+  type t = {
+    @bs.as("rescript_close")
+    close: (~isForced: bool=?, ~closedByUser: bool=?, unit) => unit,
+  }
+
+  let preserveJsPropsAndContext: (Js_.t, t) => t = %bs.raw(`
+      function (js, t) {
+        return Object.assign(js, t)
+      }
+    `)
+
+  let make: (
+    ~url: string,
+    ~options: ClientOptions.t=?,
+    ~webSocketImpl: webSocketImpl=?,
+    ~webSocketProtocols: array<string>=?,
+    unit,
+  ) => t = (~url, ~options=?, ~webSocketImpl=?, ~webSocketProtocols=?, ()) => {
+    let jsSubscriptionClient = Js_.make(
+      ~url,
+      ~options=?options->Belt.Option.map(ClientOptions.toJs),
+      ~webSocketImpl?,
+      ~webSocketProtocols?,
+      (),
+    )
+
+    let close = (~isForced=?, ~closedByUser=?, ()) =>
+      jsSubscriptionClient->Js_.close(~isForced?, ~closedByUser?, ())
+
+    preserveJsPropsAndContext(jsSubscriptionClient, {close: close})
+  }
+}
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Types.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Types.cmi
new file mode 100644
index 0000000..6e8689c
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Types.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Types.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Types.cmj
new file mode 100644
index 0000000..48cc0c3
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Types.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Types.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Types.cmt
new file mode 100644
index 0000000..3ea43fd
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Types.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Types.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Types.res
new file mode 100644
index 0000000..6722809
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Types.res
@@ -0,0 +1,44 @@
+module Graphql = ApolloClient__Graphql
+
+module type Fragment = {
+  // This type is determined by the `-template-tag-return-type` ppx flag
+  let query: Graphql.documentNode
+
+  module Raw: {
+    type t
+  }
+  type t
+
+  let parse: Raw.t => t
+  let serialize: t => Raw.t
+}
+
+module type Operation = {
+  // This type is determined by the `-template-tag-return-type` ppx flag
+  let query: Graphql.documentNode
+
+  module Raw: {
+    type t
+    type t_variables
+  }
+  type t
+  type t_variables
+
+  let parse: Raw.t => t
+  let serialize: t => Raw.t
+  let serializeVariables: t_variables => Raw.t_variables
+}
+
+module type OperationNoRequiredVars = {
+  include Operation
+  let makeDefaultVariables: unit => t_variables
+}
+
+type parseError = {
+  value: Js.Json.t,
+  error: Js.Exn.t,
+}
+
+type parseResult<'data> = result<'data, parseError>
+
+type safeParse<'data, 'jsData> = 'jsData => parseResult<'data>
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities.cmi
new file mode 100644
index 0000000..eaecdee
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities.cmj
new file mode 100644
index 0000000..7a8e57f
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities.cmt
new file mode 100644
index 0000000..dcbf7a8
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities.res
new file mode 100644
index 0000000..50ff632
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities.res
@@ -0,0 +1,5 @@
+let getOperationDefinition = ApolloClient__Utilities_Graphql_GetFromAst.getOperationDefinition
+
+module Graphql = ApolloClient__Utilities_Graphql
+module Observables = ApolloClient__Utilities_Observables
+module Policies = ApolloClient__Utilities_Policies
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Graphql.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Graphql.cmi
new file mode 100644
index 0000000..3868945
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Graphql.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Graphql.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Graphql.cmj
new file mode 100644
index 0000000..3f4bff9
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Graphql.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Graphql.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Graphql.cmt
new file mode 100644
index 0000000..8a74fb4
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Graphql.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Graphql.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Graphql.res
new file mode 100644
index 0000000..79e957a
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Graphql.res
@@ -0,0 +1,3 @@
+module Fragments = ApolloClient__Utilities_Graphql_Fragments
+module GetFromAst = ApolloClient__Utilities_Graphql_GetFromAst
+module StoreUtils = ApolloClient__Utilities_Graphql_StoreUtils
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Graphql_Fragments.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Graphql_Fragments.cmi
new file mode 100644
index 0000000..85049ac
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Graphql_Fragments.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Graphql_Fragments.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Graphql_Fragments.cmj
new file mode 100644
index 0000000..beb6ae6
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Graphql_Fragments.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Graphql_Fragments.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Graphql_Fragments.cmt
new file mode 100644
index 0000000..546253d
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Graphql_Fragments.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Graphql_Fragments.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Graphql_Fragments.res
new file mode 100644
index 0000000..526bc71
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Graphql_Fragments.res
@@ -0,0 +1,9 @@
+module FragmentDefinitionNode = ApolloClient__Graphql.Language.Ast.FragmentDefinitionNode
+
+module FragmentMap = {
+  module Js_ = {
+    type t = Js.Dict.t<FragmentDefinitionNode.t>
+  }
+
+  type t = Js_.t
+}
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Graphql_GetFromAst.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Graphql_GetFromAst.cmi
new file mode 100644
index 0000000..f6903a5
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Graphql_GetFromAst.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Graphql_GetFromAst.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Graphql_GetFromAst.cmj
new file mode 100644
index 0000000..3f4bff9
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Graphql_GetFromAst.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Graphql_GetFromAst.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Graphql_GetFromAst.cmt
new file mode 100644
index 0000000..889a49c
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Graphql_GetFromAst.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Graphql_GetFromAst.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Graphql_GetFromAst.res
new file mode 100644
index 0000000..32d3e93
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Graphql_GetFromAst.res
@@ -0,0 +1,6 @@
+module Graphql = ApolloClient__Graphql
+
+@bs.module("@apollo/client/utilities")
+external getOperationDefinition: Graphql.documentNode => option<
+  Graphql.Language.Ast.OperationDefinitionNode.t,
+> = "getOperationDefinition"
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Graphql_StoreUtils.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Graphql_StoreUtils.cmi
new file mode 100644
index 0000000..28252a1
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Graphql_StoreUtils.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Graphql_StoreUtils.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Graphql_StoreUtils.cmj
new file mode 100644
index 0000000..e2efc2a
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Graphql_StoreUtils.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Graphql_StoreUtils.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Graphql_StoreUtils.cmt
new file mode 100644
index 0000000..45542c1
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Graphql_StoreUtils.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Graphql_StoreUtils.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Graphql_StoreUtils.res
new file mode 100644
index 0000000..43938c6
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Graphql_StoreUtils.res
@@ -0,0 +1,7 @@
+module StoreValue = {
+  type t // Please contribute if you need this!
+  module Js_ = {
+    // export declare type StoreValue = number | string | string[] | Reference | Reference[] | null | undefined | void | Object;
+    type t = t
+  }
+}
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Observables.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Observables.cmi
new file mode 100644
index 0000000..f4468d3
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Observables.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Observables.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Observables.cmj
new file mode 100644
index 0000000..55077cd
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Observables.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Observables.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Observables.cmt
new file mode 100644
index 0000000..4d2d666
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Observables.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Observables.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Observables.res
new file mode 100644
index 0000000..1409206
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Observables.res
@@ -0,0 +1 @@
+module Observable = ApolloClient__Utilities_Observables_Observable
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Observables_Observable.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Observables_Observable.cmi
new file mode 100644
index 0000000..27a6cee
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Observables_Observable.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Observables_Observable.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Observables_Observable.cmj
new file mode 100644
index 0000000..55077cd
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Observables_Observable.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Observables_Observable.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Observables_Observable.cmt
new file mode 100644
index 0000000..d3581f7
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Observables_Observable.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Observables_Observable.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Observables_Observable.res
new file mode 100644
index 0000000..fafb794
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Observables_Observable.res
@@ -0,0 +1 @@
+module Observable = ApolloClient__ZenObservable.Observable
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Policies.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Policies.cmi
new file mode 100644
index 0000000..37d29d2
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Policies.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Policies.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Policies.cmj
new file mode 100644
index 0000000..64b1177
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Policies.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Policies.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Policies.cmt
new file mode 100644
index 0000000..ecaf2e7
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Policies.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Policies.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Policies.res
new file mode 100644
index 0000000..da06e9d
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Policies.res
@@ -0,0 +1 @@
+module Pagination = ApolloClient__Utilities_Policies_Pagination
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Policies_Pagination.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Policies_Pagination.cmi
new file mode 100644
index 0000000..8431c08
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Policies_Pagination.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Policies_Pagination.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Policies_Pagination.cmj
new file mode 100644
index 0000000..45e2ceb
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Policies_Pagination.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Policies_Pagination.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Policies_Pagination.cmt
new file mode 100644
index 0000000..5fa503d
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Policies_Pagination.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Policies_Pagination.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Policies_Pagination.res
new file mode 100644
index 0000000..6cb5d50
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utilities_Policies_Pagination.res
@@ -0,0 +1,41 @@
+module FieldPolicy = ApolloClient__Cache_InMemory_Policies_FieldPolicy.FieldPolicy
+module KeyArgs = ApolloClient__Cache_InMemory_Policies_FieldPolicy.FieldPolicy_KeyArgs
+
+// declare type TInternalRelay<TNode> = Readonly<{
+//     edges: Array<{
+//         cursor: string;
+//         node: TNode;
+//     }>;
+//     pageInfo: Readonly<{
+//         hasPreviousPage: boolean;
+//         hasNextPage: boolean;
+//         startCursor: string;
+//         endCursor: string;
+//     }>;
+// }>;
+
+module Js_ = {
+  // export declare function concatPagination<T = Reference>(keyArgs?: KeyArgs): FieldPolicy<T[]>;
+  @bs.module("@apollo/client/utilities") @bs.val
+  external concatPagination: (. option<KeyArgs.Js_.t>) => FieldPolicy.Js_.t<'existing> =
+    "concatPagination"
+
+  // export declare function offsetLimitPagination<T = Reference>(keyArgs?: KeyArgs): FieldPolicy<T[]>;
+  @bs.module("@apollo/client/utilities") @bs.val
+  external offsetLimitPagination: (. option<KeyArgs.Js_.t>) => FieldPolicy.Js_.t<'existing> =
+    "offsetLimitPagination"
+
+  // export declare function relayStylePagination<TNode = Reference>(keyArgs?: KeyArgs): FieldPolicy<TInternalRelay<TNode>>;
+  @bs.module("@apollo/client/utilities") @bs.val
+  external relayStylePagination: (. option<KeyArgs.Js_.t>) => FieldPolicy.Js_.t<'existing> =
+    "relayStylePagination"
+}
+
+let concatPagination: KeyArgs.t => FieldPolicy.Js_.t<'existing> = keyArgs =>
+  Js_.concatPagination(. Some(keyArgs->KeyArgs.toJs))
+
+let offsetLimitPagination: KeyArgs.t => FieldPolicy.Js_.t<'existing> = keyArgs =>
+  Js_.offsetLimitPagination(. Some(keyArgs->KeyArgs.toJs))
+
+let relayStylePagination: KeyArgs.t => FieldPolicy.Js_.t<'existing> = keyArgs =>
+  Js_.relayStylePagination(. Some(keyArgs->KeyArgs.toJs))
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utils.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utils.cmi
new file mode 100644
index 0000000..5833df3
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utils.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utils.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utils.cmj
new file mode 100644
index 0000000..3cfdf77
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utils.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utils.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utils.cmt
new file mode 100644
index 0000000..67e37e1
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utils.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utils.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utils.res
new file mode 100644
index 0000000..021e862
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__Utils.res
@@ -0,0 +1,57 @@
+module ApolloError = ApolloClient__Errors_ApolloError
+module Graphql = ApolloClient__Graphql
+module Types = ApolloClient__Types
+
+@bs.new external makeError: string => Js.Exn.t = "Error"
+
+let ensureError = ApolloError.ensureError
+
+external asJson: 'any => Js.Json.t = "%identity"
+
+let safeParse: ('jsData => 'data) => Types.safeParse<'data, 'jsData> = (parse, jsData) =>
+  switch parse(jsData) {
+  | data => Ok(data)
+  | exception Js.Exn.Error(error) => Error({value: jsData->asJson, error: error})
+  }
+
+let safeParseAndLiftToCommonResultProps: (
+  ~jsData: option<'jsData>,
+  ~graphQLErrors: array<Graphql.Error.GraphQLError.t>=?,
+  ~apolloError: ApolloError.t=?,
+  Types.safeParse<'data, 'jsData>,
+) => (option<'data>, option<ApolloError.t>) = (
+  ~jsData,
+  ~graphQLErrors=?,
+  ~apolloError=?,
+  safeParse,
+) => {
+  let existingError = switch (apolloError, graphQLErrors) {
+  | (Some(_), _) => apolloError
+  | (_, Some(graphQLErrors)) => Some(ApolloError.make(~graphQLErrors, ()))
+  | (None, None) => None
+  }
+
+  switch jsData->Belt.Option.map(jsData => safeParse(jsData)) {
+  | Some(Error(parseError)) =>
+    // Be careful we do not overwrite an existing error with a ParseError
+    existingError->Belt.Option.isSome
+      ? (None, existingError)
+      : (None, Some(ApolloError.make(~networkError=ParseError(parseError), ~graphQLErrors?, ())))
+  | Some(Ok(data)) => (Some(data), existingError)
+  | None => (None, existingError)
+  }
+}
+
+let useGuaranteedMemo1 = (f, dependency) => {
+  let value = React.useRef(f())
+  let previousDependency = React.useRef(dependency)
+
+  if dependency !== previousDependency.current {
+    value.current = f()
+    previousDependency.current = dependency
+  }
+
+  value.current
+}
+
+external identity: 'a => 'a = "%identity"
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__ZenObservable.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__ZenObservable.cmi
new file mode 100644
index 0000000..4707d38
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__ZenObservable.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__ZenObservable.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__ZenObservable.cmj
new file mode 100644
index 0000000..9f504dd
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__ZenObservable.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__ZenObservable.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__ZenObservable.cmt
new file mode 100644
index 0000000..d7c009c
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__ZenObservable.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__ZenObservable.res b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__ZenObservable.res
new file mode 100644
index 0000000..adbc801
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ApolloClient__ZenObservable.res
@@ -0,0 +1,115 @@
+// interface SubscriptionObserver<T> {
+//     closed: boolean;
+//     next(value: T): void;
+//     error(errorValue: any): void;
+//     complete(): void;
+// }
+
+// type Subscriber<T> = (observer: SubscriptionObserver<T>) => void | (() => void) | Subscription;
+
+// interface ObservableLike<T> {
+//     subscribe?: Subscriber<T>;
+//     [Symbol.observable](): Observable<T> | ObservableLike<T>;
+// }
+
+module Subscription = {
+  module Js_ = {
+    // interface Subscription {
+    //     closed: boolean;
+    //     unsubscribe(): void;
+    // }
+    type t = {closed: bool}
+
+    @bs.send external unsubscribe: t => unit = "unsubscribe"
+  }
+
+  type t = {
+    closed: bool,
+    unsubscribe: unit => unit,
+  }
+
+  let fromJs: Js_.t => t = js => {closed: js.closed, unsubscribe: () => js->Js_.unsubscribe}
+}
+
+module Observer = {
+  module Js_ = {
+    // interface Observer<T> {
+    //     start?(subscription: Subscription): any;
+    //     next?(value: T): void;
+    //     error?(errorValue: any): void;
+    //     complete?(): void;
+    // }
+    type t<'t> = {
+      start: option<Subscription.Js_.t => unit>,
+      next: option<'t => unit>,
+      error: option<Js.Json.t => unit>,
+      complete: option<unit => unit>,
+    }
+  }
+
+  type t<'t> = {
+    start: option<Subscription.t => unit>,
+    next: option<'t => unit>,
+    error: option<Js.Json.t => unit>,
+    complete: option<unit => unit>,
+  }
+}
+
+module Observable = {
+  module Js_ = {
+    // declare class Observable<T> {
+    //     constructor(subscriber: ZenObservable.Subscriber<T>)
+
+    //     subscribe(observer: ZenObservable.Observer<T>): ZenObservable.Subscription;
+    //     subscribe(onNext: (value: T) => void, onError?: (error: any) => void, onComplete?: () => void): ZenObservable.Subscription;
+
+    //     [Symbol.observable](): Observable<T>;
+
+    //     forEach(callback: (value: T) => void): Promise<void>;
+    //     map<R>(callback: (value: T) => R): Observable<R>;
+    //     filter(callback: (value: T) => boolean): Observable<T>;
+    //     reduce(callback: (previousValue: T, currentValue: T) => T, initialValue?: T): Observable<T>;
+    //     reduce<R>(callback: (previousValue: R, currentValue: T) => R, initialValue?: R): Observable<R>;
+    //     flatMap<R>(callback: (value: T) => ZenObservable.ObservableLike<R>): Observable<R>;
+    //     concat<R>(...observable: Array<Observable<R>>): Observable<R>;
+
+    //     static from<R>(observable: Observable<R> | ZenObservable.ObservableLike<R> | ArrayLike<R>): Observable<R>;
+    //     static of<R>(...items: R[]): Observable<R>;
+    // }
+    type t<'t, 'error>
+
+    // <R>(callback: (value: T) => R): Observable<R>;
+    @bs.send external map: (t<'t, 'error>, 't => 'r) => t<'r, 'error> = "map"
+
+    // (onNext: (value: T) => void, onError?: (error: any) => void, onComplete?: () => void): ZenObservable.Subscription;
+    @bs.send
+    external subscribe: (
+      t<'t, 'error>,
+      ~onNext: 't => unit,
+      ~onError: 'error => unit=?,
+      ~onComplete: unit => unit=?,
+      unit,
+    ) => Subscription.Js_.t = "subscribe"
+
+    // (observer: ZenObservable.Observer<T>): ZenObservable.Subscription;
+    @bs.send
+    external subscribeWithObserver: (t<'t, 'error>, Observer.t<'t>) => Subscription.Js_.t =
+      "subscribe"
+  }
+
+  // It's important that the rescript-wrapped version statisfy the Js_.t interface since they'll be used internally by Apollo
+  type t<'t, 'error> = {
+    subscribe: (
+      ~onNext: 't => unit,
+      ~onError: 'error => unit=?,
+      ~onComplete: unit => unit=?,
+      unit,
+    ) => Subscription.t,
+  }
+
+  // This fromJs feels more like some kind of map over multiple callbacks
+  let fromJs: Js_.t<'t, 'error> => t<'t, 'error> = t => {
+    subscribe: (~onNext, ~onError=?, ~onComplete=?, ()) =>
+      t->Js_.subscribe(~onNext, ~onError?, ~onComplete?, ())->Subscription.fromJs,
+  }
+}
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ReasonMLCommunity__ApolloClient.cmi b/node_modules/rescript-apollo-client/lib/ocaml/ReasonMLCommunity__ApolloClient.cmi
new file mode 100644
index 0000000..bf41461
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ReasonMLCommunity__ApolloClient.cmi differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ReasonMLCommunity__ApolloClient.cmj b/node_modules/rescript-apollo-client/lib/ocaml/ReasonMLCommunity__ApolloClient.cmj
new file mode 100644
index 0000000..c4a7b6c
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ReasonMLCommunity__ApolloClient.cmj differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ReasonMLCommunity__ApolloClient.cmt b/node_modules/rescript-apollo-client/lib/ocaml/ReasonMLCommunity__ApolloClient.cmt
new file mode 100644
index 0000000..a9ed558
Binary files /dev/null and b/node_modules/rescript-apollo-client/lib/ocaml/ReasonMLCommunity__ApolloClient.cmt differ
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/ReasonMLCommunity__ApolloClient.res b/node_modules/rescript-apollo-client/lib/ocaml/ReasonMLCommunity__ApolloClient.res
new file mode 100644
index 0000000..a1503ba
--- /dev/null
+++ b/node_modules/rescript-apollo-client/lib/ocaml/ReasonMLCommunity__ApolloClient.res
@@ -0,0 +1,119 @@
+// Creating a client
+type t = ApolloClient__Core_ApolloClient.t
+let make = ApolloClient__Core_ApolloClient.make
+
+module DefaultWatchQueryOptions = ApolloClient__Core_ApolloClient.DefaultWatchQueryOptions
+module DefaultQueryOptions = ApolloClient__Core_ApolloClient.DefaultQueryOptions
+module DefaultMutateOptions = ApolloClient__Core_ApolloClient.DefaultMutateOptions
+module DefaultOptions = ApolloClient__Core_ApolloClient.DefaultOptions
+
+// Fetching data
+module React = {
+  module ApolloProvider = ApolloClient__React_Context_ApolloProvider
+  let useApolloClient = ApolloClient__React_Hooks_UseApolloClient.useApolloClient
+  let useMutation = ApolloClient__React_Hooks_UseMutation.useMutation
+  let useMutationWithVariables = ApolloClient__React_Hooks_UseMutation.useMutationWithVariables
+  let useLazyQuery = ApolloClient__React_Hooks_UseLazyQuery.useLazyQuery
+  let useLazyQueryWithVariables = ApolloClient__React_Hooks_UseLazyQuery.useLazyQueryWithVariables
+  let useQuery = ApolloClient__React_Hooks_UseQuery.useQuery
+  let useSubscription = ApolloClient__React_Hooks_UseSubscription.useSubscription
+}
+
+// Caching
+module Cache = {
+  type t<'serialized> = ApolloClient__Cache_Core_Cache.ApolloCache.t<'serialized>
+  // Creating
+  module InMemoryCache = ApolloClient__Cache_InMemory_InMemoryCache
+  // Local state management
+  let makeVar = ApolloClient__Cache_InMemory_ReactiveVars.makeVar
+}
+
+// Customize Apollo Client's data flow
+module Link = {
+  module ContextLink = ApolloClient__Link_Context.ContextLink
+  module ErrorLink = ApolloClient__Link_Error.ErrorLink
+  module HttpLink = ApolloClient__Link_Http_HttpLink
+  module WebSocketLink = ApolloClient__Link_Ws.WebSocketLink
+  type t = ApolloClient__Link_Core_ApolloLink.t
+  let concat = ApolloClient__Link_Core_ApolloLink.Static.concat
+  let execute = ApolloClient__Link_Core_ApolloLink.Static.execute
+  let empty = ApolloClient__Link_Core_ApolloLink.Static.empty
+  let make = ApolloClient__Link_Core_ApolloLink.make
+  let from = ApolloClient__Link_Core_ApolloLink.Static.from
+  let split = ApolloClient__Link_Core_ApolloLink.Static.split
+}
+
+// Helpers and utility functions
+module Utilities = ApolloClient__Utilities
+
+// Rescript Extras
+// 1:1 Javascript package structure
+module Bindings = {
+  module Client = ApolloClient__Client
+  module Graphql = ApolloClient__Graphql
+  module SubscriptionTransportWs = ApolloClient__SubscriptionsTransportWs
+  module ZenObservable = ApolloClient__ZenObservable
+}
+
+// These are extension functors used by graphql-ppx
+module GraphQL_PPX = {
+  module ExtendMutation = ApolloClient__React_Hooks_UseMutation.Extend
+  module ExtendQuery = ApolloClient__React_Hooks_UseQuery.Extend
+  module ExtendSubscription = ApolloClient__React_Hooks_UseSubscription.Extend
+  type templateTagReturnType = ApolloClient__Graphql.documentNode
+}
+
+// Convenient access to all types and the methods for working with those types
+module Types = {
+  module ApolloError = ApolloClient__Errors_ApolloError
+  module ApolloQueryResult = ApolloClient__Core_Types.ApolloQueryResult
+  module ApolloLink = ApolloClient__Link_Core_ApolloLink
+  module ApolloCache = ApolloClient__Cache_Core_Cache.ApolloCache
+  module BaseSubscriptionOptions = ApolloClient__React_Types.BaseSubscriptionOptions
+  module ConnectionParamsOptions = ApolloClient__SubscriptionsTransportWs.ConnectionParamsOptions
+  module DataProxy = ApolloClient__Cache_Core_Types.DataProxy
+  module ErrorPolicy = ApolloClient__Core_WatchQueryOptions.ErrorPolicy
+  module ErrorResponse = ApolloClient__Link_Error.ErrorResponse
+  module FetchPolicy = ApolloClient__Core_WatchQueryOptions.FetchPolicy
+  module FetchPolicy__noCacheExtracted = ApolloClient__Core_WatchQueryOptions.FetchPolicy__noCacheExtracted
+  module FetchResult = ApolloClient__Link_Core_Types.FetchResult
+  module FieldPolicy = ApolloClient__Cache_InMemory_Policies_FieldPolicy.FieldPolicy
+  module FieldReadFunction = ApolloClient__Cache_InMemory_Policies_FieldPolicy.FieldReadFunction
+  module FieldMergeFunction = ApolloClient__Cache_InMemory_Policies_FieldPolicy.FieldMergeFunction
+  module FragmentMatcher = ApolloClient__Core_LocalState.FragmentMatcher
+  module GraphqlError = ApolloClient__Graphql_Error_GraphQLError
+  module GraphQLRequest = ApolloClient__Link_Core_Types.GraphQLRequest
+  module KeyArgs = ApolloClient__Cache_InMemory_Policies_FieldPolicy.FieldPolicy_KeyArgs
+  module KeySpecifier = ApolloClient__Cache_InMemory_Policies_FieldPolicy.KeySpecifier
+  module KeyFieldsFunction = ApolloClient__Cache_InMemory_Policies.KeyFieldsFunction
+  module LazyQueryHookOptions = ApolloClient__React_Types.LazyQueryHookOptions
+  module MutationHookOptions = ApolloClient__React_Types.MutationHookOptions
+  module MutationOptions = ApolloClient__Core_WatchQueryOptions.MutationOptions
+  module MutationQueryReducersMap = ApolloClient__Core_WatchQueryOptions.MutationQueryReducersMap
+  module MutationTuple = ApolloClient__React_Types.MutationTuple
+  module MutationTuple__noVariables = ApolloClient__React_Types.MutationTuple__noVariables
+  module MutationUpdaterFn = ApolloClient__Core_WatchQueryOptions.MutationUpdaterFn
+  module Observable = ApolloClient__ZenObservable.Observable
+  module ObservableQuery = ApolloClient__Core_ObservableQuery.ObservableQuery
+  module OnSubscriptionDataOptions = ApolloClient__React_Types.OnSubscriptionDataOptions
+  module Operation = ApolloClient__Link_Core_Types.Operation
+  module OperationVariables = ApolloClient__Core_Types.OperationVariables
+  module QueryHookOptions = ApolloClient__React_Types.QueryHookOptions
+  module QueryOptions = ApolloClient__Core_WatchQueryOptions.QueryOptions
+  module QueryTuple = ApolloClient__React_Types.QueryTuple
+  module QueryTuple__noVariables = ApolloClient__React_Types.QueryTuple__noVariables
+  module QueryResult = ApolloClient__React_Types.QueryResult
+  module PossibleTypesMap = ApolloClient__Cache_InMemory_Policies.PossibleTypesMap
+  module PureQueryOptions = ApolloClient__Core_Types.PureQueryOptions
+  module ReactiveVar = ApolloClient__Cache_InMemory_ReactiveVars.ReactiveVar
+  module RefetchQueryDescription = ApolloClient__Core_WatchQueryOptions.RefetchQueryDescription
+  module RequestHandler = ApolloClient__Link_Core_Types.RequestHandler
+  module Resolvers = ApolloClient__Core_Types.Resolvers
+  module SubscriptionHookOptions = ApolloClient__React_Types.SubscriptionHookOptions
+  module SubscriptionOptions = ApolloClient__Core_WatchQueryOptions.SubscriptionOptions
+  module TypePolicies = ApolloClient__Cache_InMemory_Policies.TypePolicies
+  module TypePolicy = ApolloClient__Cache_InMemory_Policies.TypePolicy
+  module UriFunction = ApolloClient__Link_Http_SelectHttpOptionsAndBody.UriFunction
+  module WatchQueryFetchPolicy = ApolloClient__Core_WatchQueryOptions.WatchQueryFetchPolicy
+  module WatchQueryOptions = ApolloClient__Core_WatchQueryOptions.WatchQueryOptions
+}
diff --git a/node_modules/rescript-apollo-client/lib/ocaml/install.stamp b/node_modules/rescript-apollo-client/lib/ocaml/install.stamp
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/rescript-apollo-client/src/@apollo/client/ApolloClient__Client.bs.js b/node_modules/rescript-apollo-client/src/@apollo/client/ApolloClient__Client.bs.js
new file mode 100644
index 0000000..38bcda0
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/@apollo/client/ApolloClient__Client.bs.js
@@ -0,0 +1,102 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+import * as Client from "@apollo/client";
+import * as ApolloClient__React_Hooks_UseQuery from "./react/hooks/ApolloClient__React_Hooks_UseQuery.bs.js";
+import * as ApolloClient__React_Hooks_UseMutation from "./react/hooks/ApolloClient__React_Hooks_UseMutation.bs.js";
+import * as ApolloClient__Link_Http_CreateHttpLink from "./link/http/ApolloClient__Link_Http_CreateHttpLink.bs.js";
+import * as ApolloClient__React_Hooks_UseSubscription from "./react/hooks/ApolloClient__React_Hooks_UseSubscription.bs.js";
+
+function execute(prim, prim$1) {
+  return Client.ApolloLink.execute(prim, prim$1);
+}
+
+var defaultDataIdFromObject = Client.defaultDataIdFromObject;
+
+function empty(prim) {
+  return Client.ApolloLink.empty();
+}
+
+function from(prim) {
+  return Client.ApolloLink.from(prim);
+}
+
+function split(prim, prim$1, prim$2) {
+  return Client.ApolloLink.split(prim, prim$1, prim$2);
+}
+
+function concat(prim, prim$1) {
+  return Client.ApolloLink.concat(prim, prim$1);
+}
+
+function gql(prim) {
+  return Client.gql(prim);
+}
+
+var Observable;
+
+var ApolloLink;
+
+var ApolloError;
+
+var NetworkStatus;
+
+var createHttpLink = ApolloClient__Link_Http_CreateHttpLink.createHttpLink;
+
+var HttpLink;
+
+var ApolloClient;
+
+var ApolloCache;
+
+var InMemoryCache;
+
+var ApolloProvider;
+
+var useQuery = ApolloClient__React_Hooks_UseQuery.useQuery;
+
+var useMutation = ApolloClient__React_Hooks_UseMutation.useMutation;
+
+var useSubscription = ApolloClient__React_Hooks_UseSubscription.useSubscription;
+
+var Core;
+
+var Cache;
+
+var Errors;
+
+var Link;
+
+var React;
+
+var Utilities;
+
+export {
+  Observable ,
+  ApolloLink ,
+  execute ,
+  ApolloError ,
+  NetworkStatus ,
+  createHttpLink ,
+  HttpLink ,
+  ApolloClient ,
+  ApolloCache ,
+  defaultDataIdFromObject ,
+  InMemoryCache ,
+  empty ,
+  from ,
+  split ,
+  concat ,
+  gql ,
+  ApolloProvider ,
+  useQuery ,
+  useMutation ,
+  useSubscription ,
+  Core ,
+  Cache ,
+  Errors ,
+  Link ,
+  React ,
+  Utilities ,
+  
+}
+/* defaultDataIdFromObject Not a pure module */
diff --git a/node_modules/rescript-apollo-client/src/@apollo/client/cache/ApolloClient__Cache.bs.js b/node_modules/rescript-apollo-client/src/@apollo/client/cache/ApolloClient__Cache.bs.js
new file mode 100644
index 0000000..d0f464b
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/@apollo/client/cache/ApolloClient__Cache.bs.js
@@ -0,0 +1,13 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+
+var Core;
+
+var InMemory;
+
+export {
+  Core ,
+  InMemory ,
+  
+}
+/* No side effect */
diff --git a/node_modules/rescript-apollo-client/src/@apollo/client/cache/core/ApolloClient__Cache_Core.bs.js b/node_modules/rescript-apollo-client/src/@apollo/client/cache/core/ApolloClient__Cache_Core.bs.js
new file mode 100644
index 0000000..3fddc75
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/@apollo/client/cache/core/ApolloClient__Cache_Core.bs.js
@@ -0,0 +1,13 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+
+var Cache;
+
+var Types;
+
+export {
+  Cache ,
+  Types ,
+  
+}
+/* No side effect */
diff --git a/node_modules/rescript-apollo-client/src/@apollo/client/cache/core/ApolloClient__Cache_Core_Cache.bs.js b/node_modules/rescript-apollo-client/src/@apollo/client/cache/core/ApolloClient__Cache_Core_Cache.bs.js
new file mode 100644
index 0000000..d3bed06
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/@apollo/client/cache/core/ApolloClient__Cache_Core_Cache.bs.js
@@ -0,0 +1,88 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+import * as Belt_Option from "bs-platform/lib/es6/belt_Option.mjs";
+import * as Caml_option from "bs-platform/lib/es6/caml_option.mjs";
+import * as ApolloClient__Utils from "../../../../ApolloClient__Utils.bs.js";
+import * as ApolloClient__Cache_Core_Types_DataProxy from "./types/ApolloClient__Cache_Core_Types_DataProxy.bs.js";
+
+var Js_ = {};
+
+function preserveJsPropsAndContext(js, t) {
+  return (function (js, t) {
+            return Object.assign(js, t)
+          })(js, t);
+}
+
+function fromJs(js) {
+  var readFragment = function (Fragment, id, optimistic, fragmentName, param) {
+    var safeParse = function (param) {
+      return ApolloClient__Utils.safeParse(Fragment.parse, param);
+    };
+    return Belt_Option.map(Caml_option.nullable_to_opt(js.readFragment({
+                        id: id,
+                        fragment: Fragment.query,
+                        fragmentName: fragmentName
+                      }, optimistic !== undefined ? Caml_option.valFromOption(optimistic) : undefined)), safeParse);
+  };
+  var readQuery = function (Operation, id, $staropt$star, optimistic, variables) {
+    var mapJsVariables = $staropt$star !== undefined ? $staropt$star : (function (prim) {
+          return prim;
+        });
+    var safeParse = function (param) {
+      return ApolloClient__Utils.safeParse(Operation.parse, param);
+    };
+    return Belt_Option.map(Caml_option.nullable_to_opt(js.readQuery(ApolloClient__Cache_Core_Types_DataProxy.Query.toJs({
+                            query: Operation.query,
+                            variables: variables,
+                            id: id
+                          }, mapJsVariables, Operation.serializeVariables), optimistic)), safeParse);
+  };
+  var writeFragment = function (Fragment, data, broadcast, id, fragmentName, param) {
+    return js.writeFragment(ApolloClient__Cache_Core_Types_DataProxy.WriteFragmentOptions.toJs({
+                    data: data,
+                    broadcast: broadcast,
+                    id: id,
+                    fragment: Fragment.query,
+                    fragmentName: fragmentName
+                  }, Fragment.serialize));
+  };
+  var writeQuery = function (Operation, broadcast, data, id, $staropt$star, variables) {
+    var mapJsVariables = $staropt$star !== undefined ? $staropt$star : (function (prim) {
+          return prim;
+        });
+    return js.writeQuery(ApolloClient__Cache_Core_Types_DataProxy.WriteQueryOptions.toJs({
+                    data: data,
+                    broadcast: broadcast,
+                    query: Operation.query,
+                    variables: variables,
+                    id: id
+                  }, mapJsVariables, Operation.serialize, Operation.serializeVariables));
+  };
+  return preserveJsPropsAndContext(js, {
+              rescript_readFragment: readFragment,
+              rescript_readQuery: readQuery,
+              rescript_writeFragment: writeFragment,
+              rescript_writeQuery: writeQuery
+            });
+}
+
+var ApolloCache = {
+  Js_: Js_,
+  preserveJsPropsAndContext: preserveJsPropsAndContext,
+  fromJs: fromJs
+};
+
+var DataProxy;
+
+var Types;
+
+var Utils;
+
+export {
+  DataProxy ,
+  Types ,
+  Utils ,
+  ApolloCache ,
+  
+}
+/* ApolloClient__Utils Not a pure module */
diff --git a/node_modules/rescript-apollo-client/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types.bs.js b/node_modules/rescript-apollo-client/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types.bs.js
new file mode 100644
index 0000000..d7e56cd
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types.bs.js
@@ -0,0 +1,13 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+
+var DataProxy;
+
+var Common;
+
+export {
+  DataProxy ,
+  Common ,
+  
+}
+/* No side effect */
diff --git a/node_modules/rescript-apollo-client/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_Common.bs.js b/node_modules/rescript-apollo-client/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_Common.bs.js
new file mode 100644
index 0000000..21f8ace
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_Common.bs.js
@@ -0,0 +1,31 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+
+var Js_ = {};
+
+var CanReadFunction = {
+  Js_: Js_
+};
+
+var Js_$1 = {};
+
+var ReadFieldFunction = {
+  Js_: Js_$1
+};
+
+var Js_$2 = {};
+
+var ToReferenceFunction = {
+  Js_: Js_$2
+};
+
+var StoreValue;
+
+export {
+  StoreValue ,
+  CanReadFunction ,
+  ReadFieldFunction ,
+  ToReferenceFunction ,
+  
+}
+/* No side effect */
diff --git a/node_modules/rescript-apollo-client/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_DataProxy.bs.js b/node_modules/rescript-apollo-client/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_DataProxy.bs.js
new file mode 100644
index 0000000..5b87028
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/@apollo/client/cache/core/types/ApolloClient__Cache_Core_Types_DataProxy.bs.js
@@ -0,0 +1,79 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+import * as Curry from "bs-platform/lib/es6/curry.mjs";
+
+var Js_ = {};
+
+function toJs(t, mapJsVariablesOpt, serializeVariables) {
+  var mapJsVariables = mapJsVariablesOpt !== undefined ? mapJsVariablesOpt : (function (prim) {
+        return prim;
+      });
+  return {
+          query: t.query,
+          variables: Curry._1(mapJsVariables, Curry._1(serializeVariables, t.variables)),
+          id: t.id
+        };
+}
+
+var Query = {
+  Js_: Js_,
+  toJs: toJs
+};
+
+var Js_$1 = {};
+
+var Fragment = {
+  Js_: Js_$1
+};
+
+var Js_$2 = {};
+
+function toJs$1(t, mapJsVariablesOpt, serialize, serializeVariables) {
+  var mapJsVariables = mapJsVariablesOpt !== undefined ? mapJsVariablesOpt : (function (prim) {
+        return prim;
+      });
+  return {
+          data: Curry._1(serialize, t.data),
+          broadcast: t.broadcast,
+          query: t.query,
+          variables: Curry._1(mapJsVariables, Curry._1(serializeVariables, t.variables)),
+          id: t.id
+        };
+}
+
+var WriteQueryOptions = {
+  Js_: Js_$2,
+  toJs: toJs$1
+};
+
+var Js_$3 = {};
+
+function toJs$2(t, serialize) {
+  return {
+          data: Curry._1(serialize, t.data),
+          broadcast: t.broadcast,
+          id: t.id,
+          fragment: t.fragment,
+          fragmentName: t.fragmentName
+        };
+}
+
+var WriteFragmentOptions = {
+  Js_: Js_$3,
+  toJs: toJs$2
+};
+
+var Graphql;
+
+var Utils;
+
+export {
+  Graphql ,
+  Utils ,
+  Query ,
+  Fragment ,
+  WriteQueryOptions ,
+  WriteFragmentOptions ,
+  
+}
+/* No side effect */
diff --git a/node_modules/rescript-apollo-client/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory.bs.js b/node_modules/rescript-apollo-client/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory.bs.js
new file mode 100644
index 0000000..ab64db6
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory.bs.js
@@ -0,0 +1,13 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+
+var InMemoryCache;
+
+var Policies;
+
+export {
+  InMemoryCache ,
+  Policies ,
+  
+}
+/* No side effect */
diff --git a/node_modules/rescript-apollo-client/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_InMemoryCache.bs.js b/node_modules/rescript-apollo-client/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_InMemoryCache.bs.js
new file mode 100644
index 0000000..82d61a6
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_InMemoryCache.bs.js
@@ -0,0 +1,63 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+import * as Belt_Option from "bs-platform/lib/es6/belt_Option.mjs";
+import * as Caml_option from "bs-platform/lib/es6/caml_option.mjs";
+import * as Client from "@apollo/client";
+import * as ApolloClient__Cache_Core_Cache from "../core/ApolloClient__Cache_Core_Cache.bs.js";
+import * as ApolloClient__Cache_InMemory_Policies from "./ApolloClient__Cache_InMemory_Policies.bs.js";
+
+var Js_ = {};
+
+function make(prim, prim$1, prim$2, prim$3, prim$4, prim$5) {
+  var tmp = {};
+  if (prim !== undefined) {
+    tmp.resultCaching = Caml_option.valFromOption(prim);
+  }
+  if (prim$1 !== undefined) {
+    tmp.possibleTypes = Caml_option.valFromOption(prim$1);
+  }
+  if (prim$2 !== undefined) {
+    tmp.typePolicies = Caml_option.valFromOption(prim$2);
+  }
+  if (prim$3 !== undefined) {
+    tmp.dataIdFromObject = Caml_option.valFromOption(prim$3);
+  }
+  if (prim$4 !== undefined) {
+    tmp.addTypename = Caml_option.valFromOption(prim$4);
+  }
+  return tmp;
+}
+
+var InMemoryCacheConfig = {
+  Js_: Js_,
+  make: make
+};
+
+var Js_$1 = {};
+
+function make$1(addTypename, dataIdFromObject, possibleTypes, resultCaching, typePolicies, param) {
+  return ApolloClient__Cache_Core_Cache.ApolloCache.fromJs(new Client.InMemoryCache(make(resultCaching, possibleTypes, Belt_Option.map(typePolicies, ApolloClient__Cache_InMemory_Policies.TypePolicies.toJs), dataIdFromObject, addTypename, undefined)));
+}
+
+var ApolloCache;
+
+var KeyFieldsFunction;
+
+var PossibleTypesMap;
+
+var TypePolicy;
+
+var TypePolicies;
+
+export {
+  ApolloCache ,
+  KeyFieldsFunction ,
+  PossibleTypesMap ,
+  TypePolicy ,
+  TypePolicies ,
+  InMemoryCacheConfig ,
+  Js_$1 as Js_,
+  make$1 as make,
+  
+}
+/* @apollo/client Not a pure module */
diff --git a/node_modules/rescript-apollo-client/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies.bs.js b/node_modules/rescript-apollo-client/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies.bs.js
new file mode 100644
index 0000000..4e174fa
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies.bs.js
@@ -0,0 +1,148 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+import * as Js_dict from "bs-platform/lib/es6/js_dict.mjs";
+import * as Belt_Array from "bs-platform/lib/es6/belt_Array.mjs";
+import * as Belt_Option from "bs-platform/lib/es6/belt_Option.mjs";
+import * as ApolloClient__Utilities_Policies_Pagination from "../../utilities/policies/ApolloClient__Utilities_Policies_Pagination.bs.js";
+import * as ApolloClient__Cache_InMemory_Policies_FieldPolicy from "./ApolloClient__Cache_InMemory_Policies_FieldPolicy.bs.js";
+
+var Js_ = {};
+
+var KeyFieldsContext = {
+  Js_: Js_
+};
+
+var Js_$1 = {};
+
+var KeyFieldsFunction = {
+  Js_: Js_$1
+};
+
+function fieldPolicy(v) {
+  return v;
+}
+
+function fieldReadFunction(v) {
+  return v;
+}
+
+var FieldsUnion = {
+  fieldPolicy: fieldPolicy,
+  fieldReadFunction: fieldReadFunction
+};
+
+var Js_$2 = {
+  FieldsUnion: FieldsUnion
+};
+
+function toJs(t) {
+  return {
+          keyFields: Belt_Option.map(t.keyFields, ApolloClient__Cache_InMemory_Policies_FieldPolicy.FieldPolicy_KeyArgs.toJs),
+          queryType: t.queryType,
+          mutationType: t.mutationType,
+          subscriptionType: t.subscriptionType,
+          fields: Belt_Option.map(t.fields, (function (fields) {
+                  return Js_dict.fromArray(Belt_Array.map(fields, (function (param) {
+                                    var t_field = param[1];
+                                    var tmp;
+                                    switch (t_field.TAG | 0) {
+                                      case /* ConcatPagination */0 :
+                                          tmp = ApolloClient__Utilities_Policies_Pagination.concatPagination(t_field._0);
+                                          break;
+                                      case /* OffsetLimitPagination */1 :
+                                          tmp = ApolloClient__Utilities_Policies_Pagination.offsetLimitPagination(t_field._0);
+                                          break;
+                                      case /* RelayStylePagination */2 :
+                                          tmp = ApolloClient__Utilities_Policies_Pagination.relayStylePagination(t_field._0);
+                                          break;
+                                      case /* FieldPolicy */3 :
+                                          tmp = ApolloClient__Cache_InMemory_Policies_FieldPolicy.FieldPolicy.toJs(t_field._0);
+                                          break;
+                                      case /* FieldReadFunction */4 :
+                                          var partial_arg = t_field._0;
+                                          tmp = (function (param, param$1) {
+                                              return ApolloClient__Cache_InMemory_Policies_FieldPolicy.FieldReadFunction.toJs(partial_arg, param, param$1);
+                                            });
+                                          break;
+                                      
+                                    }
+                                    return [
+                                            param[0],
+                                            tmp
+                                          ];
+                                  })));
+                }))
+        };
+}
+
+function make(fields, keyFields, mutationType, queryType, subscriptionType, param) {
+  return {
+          keyFields: keyFields,
+          queryType: queryType,
+          mutationType: mutationType,
+          subscriptionType: subscriptionType,
+          fields: fields
+        };
+}
+
+var TypePolicy = {
+  Js_: Js_$2,
+  toJs: toJs,
+  make: make
+};
+
+var Js_$3 = {};
+
+function toJs$1(t) {
+  return Js_dict.fromArray(Belt_Array.map(t, (function (param) {
+                    return [
+                            param[0],
+                            toJs(param[1])
+                          ];
+                  })));
+}
+
+var TypePolicies = {
+  Js_: Js_$3,
+  toJs: toJs$1
+};
+
+var Js_$4 = {};
+
+var PossibleTypesMap = {
+  Js_: Js_$4
+};
+
+var FragmentMap;
+
+var FieldPolicy;
+
+var FieldReadFunction;
+
+var FieldMergeFunction;
+
+var KeyArgs;
+
+var KeySpecifier;
+
+var Pagination;
+
+var SelectionSetNode;
+
+export {
+  FragmentMap ,
+  FieldPolicy ,
+  FieldReadFunction ,
+  FieldMergeFunction ,
+  KeyArgs ,
+  KeySpecifier ,
+  Pagination ,
+  SelectionSetNode ,
+  KeyFieldsContext ,
+  KeyFieldsFunction ,
+  TypePolicy ,
+  TypePolicies ,
+  PossibleTypesMap ,
+  
+}
+/* ApolloClient__Utilities_Policies_Pagination Not a pure module */
diff --git a/node_modules/rescript-apollo-client/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies_FieldPolicy.bs.js b/node_modules/rescript-apollo-client/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies_FieldPolicy.bs.js
new file mode 100644
index 0000000..f9bb7cf
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_Policies_FieldPolicy.bs.js
@@ -0,0 +1,139 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+import * as Curry from "bs-platform/lib/es6/curry.mjs";
+import * as Belt_Option from "bs-platform/lib/es6/belt_Option.mjs";
+
+var Js_ = {};
+
+var FieldMergeFunction = {
+  Js_: Js_
+};
+
+var Js_$1 = {};
+
+var StorageType = {
+  Js_: Js_$1
+};
+
+var Js_$2 = {};
+
+function fromJs(js) {
+  return {
+          args: js.args,
+          fieldName: js.fieldName,
+          storeFieldName: js.storeFieldName,
+          field: js.field,
+          variables: js.variables,
+          isReference: js.isReference,
+          toReference: js.toReference,
+          storage: js.storage,
+          cache: js.cache,
+          readField: js.readField,
+          canRead: js.canRead,
+          mergeObjects: (function (existing, incoming) {
+              return js.canRead(existing, incoming);
+            })
+        };
+}
+
+var FieldFunctionOptions = {
+  Js_: Js_$2,
+  fromJs: fromJs
+};
+
+var Js_$3 = {};
+
+function toJs(t, existing, jsFieldFunctionOptions) {
+  return Curry._2(t, existing, fromJs(jsFieldFunctionOptions));
+}
+
+var FieldReadFunction = {
+  Js_: Js_$3,
+  toJs: toJs
+};
+
+var Js_$4 = {};
+
+var KeySpecifier = {
+  Js_: Js_$4
+};
+
+var Js_$5 = {};
+
+var KeyArgsFunction = {
+  Js_: Js_$5
+};
+
+function keySpecifier(v) {
+  return v;
+}
+
+function keyArgsFunction(v) {
+  return v;
+}
+
+var KeyArgsUnion = {
+  keySpecifier: keySpecifier,
+  keyArgsFunction: keyArgsFunction,
+  false_: false
+};
+
+var Js_$6 = {
+  KeyArgsUnion: KeyArgsUnion
+};
+
+function toJs$1(x) {
+  if (typeof x === "number") {
+    return false;
+  } else {
+    return x._0;
+  }
+}
+
+var FieldPolicy_KeyArgs = {
+  Js_: Js_$6,
+  toJs: toJs$1
+};
+
+var Js_$7 = {};
+
+function toJs$2(t) {
+  return {
+          keyArgs: Belt_Option.map(t.keyArgs, toJs$1),
+          read: Belt_Option.map(t.read, toJs),
+          merge: t.merge
+        };
+}
+
+var FieldPolicy = {
+  Js_: Js_$7,
+  toJs: toJs$2
+};
+
+var ApolloCache;
+
+var CanReadFunction;
+
+var FieldNode;
+
+var ReadFieldFunction;
+
+var ToReferenceFunction;
+
+export {
+  ApolloCache ,
+  CanReadFunction ,
+  FieldNode ,
+  ReadFieldFunction ,
+  ToReferenceFunction ,
+  FieldMergeFunction ,
+  StorageType ,
+  FieldFunctionOptions ,
+  FieldReadFunction ,
+  KeySpecifier ,
+  KeyArgsFunction ,
+  FieldPolicy_KeyArgs ,
+  FieldPolicy ,
+  
+}
+/* No side effect */
diff --git a/node_modules/rescript-apollo-client/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_ReactiveVars.bs.js b/node_modules/rescript-apollo-client/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_ReactiveVars.bs.js
new file mode 100644
index 0000000..59aa0cc
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_ReactiveVars.bs.js
@@ -0,0 +1,23 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+import * as Client from "@apollo/client";
+
+var Js_ = {};
+
+var ReactiveVar = {
+  Js_: Js_
+};
+
+var Js_$1 = {};
+
+function makeVar(prim) {
+  return Client.makeVar(prim);
+}
+
+export {
+  ReactiveVar ,
+  Js_$1 as Js_,
+  makeVar ,
+  
+}
+/* @apollo/client Not a pure module */
diff --git a/node_modules/rescript-apollo-client/src/@apollo/client/core/ApolloClient__Core.bs.js b/node_modules/rescript-apollo-client/src/@apollo/client/core/ApolloClient__Core.bs.js
new file mode 100644
index 0000000..b3bc6b5
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/@apollo/client/core/ApolloClient__Core.bs.js
@@ -0,0 +1,25 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+
+var ApolloClient;
+
+var LocalState;
+
+var NetworkStatus;
+
+var ObservableQuery;
+
+var Types;
+
+var WatchQueryOptions;
+
+export {
+  ApolloClient ,
+  LocalState ,
+  NetworkStatus ,
+  ObservableQuery ,
+  Types ,
+  WatchQueryOptions ,
+  
+}
+/* No side effect */
diff --git a/node_modules/rescript-apollo-client/src/@apollo/client/core/ApolloClient__Core_ApolloClient.bs.js b/node_modules/rescript-apollo-client/src/@apollo/client/core/ApolloClient__Core_ApolloClient.bs.js
new file mode 100644
index 0000000..2767b58
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/@apollo/client/core/ApolloClient__Core_ApolloClient.bs.js
@@ -0,0 +1,485 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+import * as Curry from "bs-platform/lib/es6/curry.mjs";
+import * as Belt_Option from "bs-platform/lib/es6/belt_Option.mjs";
+import * as Caml_option from "bs-platform/lib/es6/caml_option.mjs";
+import * as Client from "@apollo/client";
+import * as ApolloClient__Utils from "../../../ApolloClient__Utils.bs.js";
+import * as ApolloClient__Core_Types from "./ApolloClient__Core_Types.bs.js";
+import * as ApolloClient__ZenObservable from "../../../zen-observable/ApolloClient__ZenObservable.bs.js";
+import * as ApolloClient__Link_Core_Types from "../link/core/ApolloClient__Link_Core_Types.bs.js";
+import * as ApolloClient__Errors_ApolloError from "../errors/ApolloClient__Errors_ApolloError.bs.js";
+import * as ApolloClient__Core_ObservableQuery from "./ApolloClient__Core_ObservableQuery.bs.js";
+import * as ApolloClient__Core_WatchQueryOptions from "./ApolloClient__Core_WatchQueryOptions.bs.js";
+import * as ApolloClient__Cache_Core_Types_DataProxy from "../cache/core/types/ApolloClient__Cache_Core_Types_DataProxy.bs.js";
+
+var Js_ = {};
+
+function toJs(t) {
+  return {
+          fetchPolicy: Belt_Option.map(t.fetchPolicy, ApolloClient__Core_WatchQueryOptions.WatchQueryFetchPolicy.toJs),
+          errorPolicy: Belt_Option.map(t.errorPolicy, ApolloClient__Core_WatchQueryOptions.ErrorPolicy.toJs),
+          context: t.context
+        };
+}
+
+function make(fetchPolicy, errorPolicy, context, param) {
+  return {
+          fetchPolicy: fetchPolicy,
+          errorPolicy: errorPolicy,
+          context: context
+        };
+}
+
+var DefaultWatchQueryOptions = {
+  Js_: Js_,
+  toJs: toJs,
+  make: make
+};
+
+var Js_$1 = {};
+
+function toJs$1(t) {
+  return {
+          fetchPolicy: Belt_Option.map(t.fetchPolicy, ApolloClient__Core_WatchQueryOptions.FetchPolicy.toJs),
+          errorPolicy: Belt_Option.map(t.errorPolicy, ApolloClient__Core_WatchQueryOptions.ErrorPolicy.toJs),
+          context: t.context
+        };
+}
+
+function make$1(fetchPolicy, errorPolicy, context, param) {
+  return {
+          fetchPolicy: fetchPolicy,
+          errorPolicy: errorPolicy,
+          context: context
+        };
+}
+
+var DefaultQueryOptions = {
+  Js_: Js_$1,
+  toJs: toJs$1,
+  make: make$1
+};
+
+var Js_$2 = {};
+
+function toJs$2(t) {
+  return {
+          context: t.context,
+          fetchPolicy: Belt_Option.map(t.fetchPolicy, ApolloClient__Core_WatchQueryOptions.FetchPolicy__noCacheExtracted.toJs),
+          awaitRefetchQueries: t.awaitRefetchQueries,
+          errorPolicy: Belt_Option.map(t.errorPolicy, ApolloClient__Core_WatchQueryOptions.ErrorPolicy.toJs),
+          refetchQueries: Belt_Option.map(t.refetchQueries, ApolloClient__Core_WatchQueryOptions.RefetchQueryDescription.toJs)
+        };
+}
+
+function make$2(context, fetchPolicy, awaitRefetchQueries, errorPolicy, refetchQueries, param) {
+  return {
+          context: context,
+          fetchPolicy: fetchPolicy,
+          awaitRefetchQueries: awaitRefetchQueries,
+          errorPolicy: errorPolicy,
+          refetchQueries: refetchQueries
+        };
+}
+
+var DefaultMutateOptions = {
+  Js_: Js_$2,
+  toJs: toJs$2,
+  make: make$2
+};
+
+var Js_$3 = {};
+
+function toJs$3(t) {
+  return {
+          watchQuery: Belt_Option.map(t.watchQuery, toJs),
+          query: Belt_Option.map(t.query, toJs$1),
+          mutate: Belt_Option.map(t.mutate, toJs$2)
+        };
+}
+
+function make$3(mutate, query, watchQuery, param) {
+  return {
+          watchQuery: watchQuery,
+          query: query,
+          mutate: mutate
+        };
+}
+
+var DefaultOptions = {
+  Js_: Js_$3,
+  toJs: toJs$3,
+  make: make$3
+};
+
+var Js_$4 = {};
+
+function toJs$4(t) {
+  return {
+          uri: t.uri,
+          credentials: t.credentials,
+          headers: t.headers,
+          link: t.link,
+          cache: t.cache,
+          ssrForceFetchDelay: t.ssrForceFetchDelay,
+          ssrMode: t.ssrMode,
+          connectToDevTools: t.connectToDevTools,
+          queryDeduplication: t.queryDeduplication,
+          defaultOptions: Belt_Option.map(t.defaultOptions, toJs$3),
+          assumeImmutableResults: t.assumeImmutableResults,
+          resolvers: t.resolvers,
+          typeDefs: t.typeDefs,
+          fragmentMatcher: t.fragmentMatcher,
+          name: t.name,
+          version: t.version
+        };
+}
+
+var ApolloClientOptions = {
+  Js_: Js_$4,
+  toJs: toJs$4
+};
+
+var Cast = {};
+
+var Js_$5 = {
+  Cast: Cast
+};
+
+var preserveJsPropsAndContext = (function (js, t) {
+      return Object.assign(js, t)
+    });
+
+function make$4(uri, credentials, headers, link, cache, ssrForceFetchDelay, ssrMode, connectToDevTools, queryDeduplication, defaultOptions, assumeImmutableResults, resolvers, typeDefs, fragmentMatcher, name, version, param) {
+  var jsClient = new Client.ApolloClient(toJs$4({
+            uri: uri,
+            credentials: credentials,
+            headers: headers,
+            link: link,
+            cache: cache,
+            ssrForceFetchDelay: ssrForceFetchDelay,
+            ssrMode: ssrMode,
+            connectToDevTools: connectToDevTools,
+            queryDeduplication: queryDeduplication,
+            defaultOptions: defaultOptions,
+            assumeImmutableResults: assumeImmutableResults,
+            resolvers: resolvers,
+            typeDefs: typeDefs,
+            fragmentMatcher: fragmentMatcher,
+            name: name,
+            version: version
+          }));
+  var clearStore = function (param) {
+    var __x = jsClient.clearStore();
+    var __x$1 = __x.then(function (value) {
+          return Promise.resolve({
+                      TAG: /* Ok */0,
+                      _0: value
+                    });
+        });
+    return __x$1.catch(function (e) {
+                return Promise.resolve({
+                            TAG: /* Error */1,
+                            _0: ApolloClient__Utils.ensureError(e)
+                          });
+              });
+  };
+  var mutate = function (Operation, awaitRefetchQueries, context, errorPolicy, fetchPolicy, $staropt$star, optimisticResponse, refetchQueries, updateQueries, update, variables) {
+    var mapJsVariables = $staropt$star !== undefined ? $staropt$star : (function (prim) {
+          return prim;
+        });
+    var safeParse = function (param) {
+      return ApolloClient__Utils.safeParse(Operation.parse, param);
+    };
+    var __x = jsClient.mutate(ApolloClient__Core_WatchQueryOptions.MutationOptions.toJs({
+              context: context,
+              fetchPolicy: fetchPolicy,
+              mutation: Operation.query,
+              awaitRefetchQueries: awaitRefetchQueries,
+              errorPolicy: errorPolicy,
+              optimisticResponse: optimisticResponse,
+              refetchQueries: refetchQueries,
+              update: update,
+              updateQueries: updateQueries,
+              variables: variables
+            }, mapJsVariables, safeParse, Operation.serialize, Operation.serializeVariables));
+    var __x$1 = __x.then(function (jsFetchResult) {
+          return Promise.resolve(ApolloClient__Link_Core_Types.FetchResult.toResult(ApolloClient__Link_Core_Types.FetchResult.fromJs(jsFetchResult, safeParse)));
+        });
+    return __x$1.catch(function (error) {
+                return Promise.resolve({
+                            TAG: /* Error */1,
+                            _0: ApolloClient__Errors_ApolloError.make(undefined, {
+                                  TAG: /* FetchFailure */0,
+                                  _0: ApolloClient__Utils.ensureError(error)
+                                }, undefined, undefined, undefined)
+                          });
+              });
+  };
+  var onClearStore = function (cb) {
+    return function (param) {
+      jsClient.onClearStore(cb);
+      
+    };
+  };
+  var onResetStore = function (cb) {
+    return function (param) {
+      jsClient.onResetStore(cb);
+      
+    };
+  };
+  var query = function (Operation, context, errorPolicy, fetchPolicy, $staropt$star, variables) {
+    var mapJsVariables = $staropt$star !== undefined ? $staropt$star : (function (prim) {
+          return prim;
+        });
+    var safeParse = function (param) {
+      return ApolloClient__Utils.safeParse(Operation.parse, param);
+    };
+    var __x = jsClient.query(ApolloClient__Core_WatchQueryOptions.QueryOptions.toJs({
+              fetchPolicy: fetchPolicy,
+              query: Operation.query,
+              variables: variables,
+              errorPolicy: errorPolicy,
+              context: context
+            }, mapJsVariables, Operation.serializeVariables));
+    var __x$1 = __x.then(function (jsApolloQueryResult) {
+          return Promise.resolve(ApolloClient__Core_Types.ApolloQueryResult.toResult(ApolloClient__Core_Types.ApolloQueryResult.fromJs(jsApolloQueryResult, safeParse)));
+        });
+    return __x$1.catch(function (error) {
+                return Promise.resolve({
+                            TAG: /* Error */1,
+                            _0: ApolloClient__Errors_ApolloError.make(undefined, {
+                                  TAG: /* FetchFailure */0,
+                                  _0: ApolloClient__Utils.ensureError(error)
+                                }, undefined, undefined, undefined)
+                          });
+              });
+  };
+  var readFragment = function (Fragment, id, optimistic, fragmentName, param) {
+    var safeParse = function (param) {
+      return ApolloClient__Utils.safeParse(Fragment.parse, param);
+    };
+    return Belt_Option.map(Caml_option.nullable_to_opt(jsClient.readFragment({
+                        id: id,
+                        fragment: Fragment.query,
+                        fragmentName: fragmentName
+                      }, optimistic !== undefined ? Caml_option.valFromOption(optimistic) : undefined)), safeParse);
+  };
+  var readQuery = function (Operation, id, $staropt$star, optimistic, variables) {
+    var mapJsVariables = $staropt$star !== undefined ? $staropt$star : (function (prim) {
+          return prim;
+        });
+    var safeParse = function (param) {
+      return ApolloClient__Utils.safeParse(Operation.parse, param);
+    };
+    return Belt_Option.map(Caml_option.nullable_to_opt(jsClient.readQuery(ApolloClient__Cache_Core_Types_DataProxy.Query.toJs({
+                            query: Operation.query,
+                            variables: variables,
+                            id: id
+                          }, mapJsVariables, Operation.serializeVariables), optimistic)), safeParse);
+  };
+  var resetStore = function (param) {
+    var __x = jsClient.resetStore();
+    var __x$1 = __x.then(function (value) {
+          return Promise.resolve({
+                      TAG: /* Ok */0,
+                      _0: (value == null) ? undefined : Caml_option.some(value)
+                    });
+        });
+    return __x$1.catch(function (e) {
+                return Promise.resolve({
+                            TAG: /* Error */1,
+                            _0: ApolloClient__Utils.ensureError(e)
+                          });
+              });
+  };
+  var restore = function (serializedState) {
+    return jsClient.restore(serializedState);
+  };
+  var setLink = function (link) {
+    jsClient.setLink(link);
+    
+  };
+  var subscribe = function (Operation, context, errorPolicy, fetchPolicy, $staropt$star, variables) {
+    var mapJsVariables = $staropt$star !== undefined ? $staropt$star : (function (prim) {
+          return prim;
+        });
+    var safeParse = function (param) {
+      return ApolloClient__Utils.safeParse(Operation.parse, param);
+    };
+    var jsObservable = jsClient.subscribe(ApolloClient__Core_WatchQueryOptions.SubscriptionOptions.toJs({
+              query: Operation.query,
+              variables: variables,
+              fetchPolicy: fetchPolicy,
+              errorPolicy: errorPolicy,
+              context: context
+            }, mapJsVariables, Operation.serializeVariables));
+    return {
+            subscribe: (function (onNext, onError, onComplete, param) {
+                var onNext$prime = function (jsFetchResult) {
+                  var ok = ApolloClient__Link_Core_Types.FetchResult.toResult(ApolloClient__Link_Core_Types.FetchResult.fromJs(jsFetchResult, safeParse));
+                  if (ok.TAG === /* Ok */0) {
+                    return Curry._1(onNext, ok._0);
+                  } else if (onError !== undefined) {
+                    return Curry._1(onError, ok._0);
+                  } else {
+                    return ;
+                  }
+                };
+                var onError$prime = Belt_Option.map(onError, (function (onError) {
+                        return function (unknown) {
+                          return Curry._1(onError, ApolloClient__Errors_ApolloError.fromJs(ApolloClient__Errors_ApolloError.Js_.ensureApolloError(unknown)));
+                        };
+                      }));
+                var observable = ApolloClient__ZenObservable.Observable.fromJs(jsObservable);
+                return Curry._4(observable.subscribe, onNext$prime, onError$prime, onComplete, undefined);
+              })
+          };
+  };
+  var watchQuery = function (Operation, context, errorPolicy, fetchPolicy, $staropt$star, variables) {
+    var mapJsVariables = $staropt$star !== undefined ? $staropt$star : (function (prim) {
+          return prim;
+        });
+    var safeParse = function (param) {
+      return ApolloClient__Utils.safeParse(Operation.parse, param);
+    };
+    return ApolloClient__Core_ObservableQuery.ObservableQuery.fromJs(jsClient.watchQuery(ApolloClient__Core_WatchQueryOptions.WatchQueryOptions.toJs({
+                        fetchPolicy: fetchPolicy,
+                        query: Operation.query,
+                        variables: variables,
+                        errorPolicy: errorPolicy,
+                        context: context
+                      }, mapJsVariables, Operation.serializeVariables)), safeParse);
+  };
+  var writeFragment = function (Fragment, data, broadcast, id, fragmentName, param) {
+    jsClient.writeFragment(ApolloClient__Cache_Core_Types_DataProxy.WriteFragmentOptions.toJs({
+              data: data,
+              broadcast: broadcast,
+              id: id,
+              fragment: Fragment.query,
+              fragmentName: fragmentName
+            }, Fragment.serialize));
+    
+  };
+  var writeQuery = function (Operation, broadcast, data, id, $staropt$star, variables) {
+    var mapJsVariables = $staropt$star !== undefined ? $staropt$star : (function (prim) {
+          return prim;
+        });
+    jsClient.writeQuery(ApolloClient__Cache_Core_Types_DataProxy.WriteQueryOptions.toJs({
+              data: data,
+              broadcast: broadcast,
+              query: Operation.query,
+              variables: variables,
+              id: id
+            }, mapJsVariables, Operation.serialize, Operation.serializeVariables));
+    
+  };
+  return preserveJsPropsAndContext(jsClient, {
+              rescript_clearStore: clearStore,
+              rescript_mutate: mutate,
+              rescript_onClearStore: onClearStore,
+              rescript_onResetStore: onResetStore,
+              rescript_query: query,
+              rescript_readFragment: readFragment,
+              rescript_readQuery: readQuery,
+              rescript_resetStore: resetStore,
+              rescript_restore: restore,
+              rescript_setLink: setLink,
+              rescript_subscribe: subscribe,
+              rescript_watchQuery: watchQuery,
+              rescript_writeFragment: writeFragment,
+              rescript_writeQuery: writeQuery
+            });
+}
+
+var ApolloCache;
+
+var ApolloError;
+
+var ApolloLink;
+
+var ApolloQueryResult;
+
+var DataProxy;
+
+var ErrorPolicy;
+
+var FetchPolicy;
+
+var FetchPolicy__noCacheExtracted;
+
+var FetchResult;
+
+var FragmentMatcher;
+
+var Graphql;
+
+var MutationOptions;
+
+var MutationQueryReducersMap;
+
+var MutationUpdaterFn;
+
+var Observable;
+
+var ObservableQuery;
+
+var QueryOptions;
+
+var PureQueryOptions;
+
+var RefetchQueryDescription;
+
+var Resolvers;
+
+var SubscriptionOptions;
+
+var Types;
+
+var UriFunction;
+
+var Utils;
+
+var WatchQueryFetchPolicy;
+
+var WatchQueryOptions;
+
+export {
+  ApolloCache ,
+  ApolloError ,
+  ApolloLink ,
+  ApolloQueryResult ,
+  DataProxy ,
+  ErrorPolicy ,
+  FetchPolicy ,
+  FetchPolicy__noCacheExtracted ,
+  FetchResult ,
+  FragmentMatcher ,
+  Graphql ,
+  MutationOptions ,
+  MutationQueryReducersMap ,
+  MutationUpdaterFn ,
+  Observable ,
+  ObservableQuery ,
+  QueryOptions ,
+  PureQueryOptions ,
+  RefetchQueryDescription ,
+  Resolvers ,
+  SubscriptionOptions ,
+  Types ,
+  UriFunction ,
+  Utils ,
+  WatchQueryFetchPolicy ,
+  WatchQueryOptions ,
+  DefaultWatchQueryOptions ,
+  DefaultQueryOptions ,
+  DefaultMutateOptions ,
+  DefaultOptions ,
+  ApolloClientOptions ,
+  Js_$5 as Js_,
+  preserveJsPropsAndContext ,
+  make$4 as make,
+  
+}
+/* @apollo/client Not a pure module */
diff --git a/node_modules/rescript-apollo-client/src/@apollo/client/core/ApolloClient__Core_LocalState.bs.js b/node_modules/rescript-apollo-client/src/@apollo/client/core/ApolloClient__Core_LocalState.bs.js
new file mode 100644
index 0000000..b87d853
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/@apollo/client/core/ApolloClient__Core_LocalState.bs.js
@@ -0,0 +1,30 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+
+var Js_ = {};
+
+var FragmentMatcher = {
+  Js_: Js_
+};
+
+var Js_$1 = {};
+
+var Resolver = {
+  Js_: Js_$1
+};
+
+var ApolloCache;
+
+var FieldNode;
+
+var FragmentMap;
+
+export {
+  ApolloCache ,
+  FieldNode ,
+  FragmentMap ,
+  FragmentMatcher ,
+  Resolver ,
+  
+}
+/* No side effect */
diff --git a/node_modules/rescript-apollo-client/src/@apollo/client/core/ApolloClient__Core_NetworkStatus.bs.js b/node_modules/rescript-apollo-client/src/@apollo/client/core/ApolloClient__Core_NetworkStatus.bs.js
new file mode 100644
index 0000000..7a9462a
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/@apollo/client/core/ApolloClient__Core_NetworkStatus.bs.js
@@ -0,0 +1,38 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+
+var Js_ = {};
+
+function fromJs(js) {
+  switch (js) {
+    case 1 :
+        return /* Loading */0;
+    case 2 :
+        return /* SetVariables */1;
+    case 3 :
+        return /* FetchMore */2;
+    case 4 :
+        return /* Refetch */3;
+    case 5 :
+        return /* SkippedOrNotPresent */7;
+    case 6 :
+        return /* Poll */4;
+    case 7 :
+        return /* Ready */5;
+    case 8 :
+        return /* Error */6;
+    default:
+      return /* SkippedOrNotPresent */7;
+  }
+}
+
+var NetworkStatus = {
+  Js_: Js_,
+  fromJs: fromJs
+};
+
+export {
+  NetworkStatus ,
+  
+}
+/* No side effect */
diff --git a/node_modules/rescript-apollo-client/src/@apollo/client/core/ApolloClient__Core_ObservableQuery.bs.js b/node_modules/rescript-apollo-client/src/@apollo/client/core/ApolloClient__Core_ObservableQuery.bs.js
new file mode 100644
index 0000000..ffebd46
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/@apollo/client/core/ApolloClient__Core_ObservableQuery.bs.js
@@ -0,0 +1,70 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+import * as Curry from "bs-platform/lib/es6/curry.mjs";
+import * as Caml_option from "bs-platform/lib/es6/caml_option.mjs";
+import * as ApolloClient__Core_Types from "./ApolloClient__Core_Types.bs.js";
+import * as ApolloClient__ZenObservable from "../../../zen-observable/ApolloClient__ZenObservable.bs.js";
+
+function fakeMap(js, fn) {
+  return (function (js, fn) {
+              var originalSubscribe = js.subscribe.bind(js);
+              js.subscribe = function (onNext, onError, onComplete) {
+                var newOnNext = function (result) {
+                  var parsedData = result.data ? fn(result.data, onError) : undefined;
+                  var transformedResult = parsedData
+                    ? Object.assign({}, result, { data: parsedData })
+                    : result;
+                  return onNext(transformedResult);
+                };
+                return originalSubscribe(newOnNext, onError, onComplete);
+              };
+              return js;
+            })(js, fn);
+}
+
+var Js_ = {
+  fakeMap: fakeMap
+};
+
+function preserveJsPropsAndContext(js, t) {
+  return (function (js, t) {
+            return Object.assign(js, t)
+          })(js, t);
+}
+
+function fromJs(js, safeParse) {
+  var parseWithOnErrorCall = function (jsData, onError) {
+    var data = Curry._1(safeParse, jsData);
+    if (data.TAG === /* Ok */0) {
+      return Caml_option.some(data._0);
+    }
+    Curry._1(onError, data._0.error);
+    
+  };
+  var observableWithParsedData = fakeMap(js, parseWithOnErrorCall);
+  return preserveJsPropsAndContext(observableWithParsedData, {
+              rescript_subscribe: (function (onNext, onError, onComplete, param) {
+                  return ApolloClient__ZenObservable.Subscription.fromJs(js.subscribe((function (jsApolloQueryResult) {
+                                    return Curry._1(onNext, ApolloClient__Core_Types.ApolloQueryResult.fromJs(jsApolloQueryResult, safeParse));
+                                  }), onError !== undefined ? Caml_option.valFromOption(onError) : undefined, onComplete !== undefined ? Caml_option.valFromOption(onComplete) : undefined));
+                })
+            });
+}
+
+var ObservableQuery = {
+  ApolloQueryResult: undefined,
+  Subscription: undefined,
+  Observer: undefined,
+  Js_: Js_,
+  preserveJsPropsAndContext: preserveJsPropsAndContext,
+  fromJs: fromJs
+};
+
+var Types;
+
+export {
+  Types ,
+  ObservableQuery ,
+  
+}
+/* ApolloClient__Core_Types Not a pure module */
diff --git a/node_modules/rescript-apollo-client/src/@apollo/client/core/ApolloClient__Core_Types.bs.js b/node_modules/rescript-apollo-client/src/@apollo/client/core/ApolloClient__Core_Types.bs.js
new file mode 100644
index 0000000..39c13d8
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/@apollo/client/core/ApolloClient__Core_Types.bs.js
@@ -0,0 +1,151 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+import * as Curry from "bs-platform/lib/es6/curry.mjs";
+import * as Js_dict from "bs-platform/lib/es6/js_dict.mjs";
+import * as Caml_option from "bs-platform/lib/es6/caml_option.mjs";
+import * as ApolloClient__Utils from "../../../ApolloClient__Utils.bs.js";
+import * as ApolloClient__Link_Core_Types from "../link/core/ApolloClient__Link_Core_Types.bs.js";
+import * as ApolloClient__Core_NetworkStatus from "./ApolloClient__Core_NetworkStatus.bs.js";
+import * as ApolloClient__Errors_ApolloError from "../errors/ApolloClient__Errors_ApolloError.bs.js";
+
+var Js_ = {};
+
+var OperationVariables = {
+  Js_: Js_
+};
+
+var Js_$1 = {};
+
+function toJs(t) {
+  return {
+          query: t.query,
+          variables: t.variables,
+          context: t.context
+        };
+}
+
+var PureQueryOptions = {
+  Js_: Js_$1,
+  toJs: toJs
+};
+
+var Js_$2 = {};
+
+function fromJs(js, safeParse) {
+  var match = ApolloClient__Utils.safeParseAndLiftToCommonResultProps(js.data, js.errors, undefined, safeParse);
+  return {
+          data: match[0],
+          error: match[1],
+          loading: js.loading,
+          networkStatus: ApolloClient__Core_NetworkStatus.NetworkStatus.fromJs(js.networkStatus)
+        };
+}
+
+function fromError(error) {
+  return {
+          data: undefined,
+          error: error,
+          loading: false,
+          networkStatus: /* Error */6
+        };
+}
+
+function toResult(apolloQueryResult) {
+  var data = apolloQueryResult.data;
+  if (data !== undefined) {
+    return {
+            TAG: /* Ok */0,
+            _0: {
+              data: Caml_option.valFromOption(data),
+              error: apolloQueryResult.error,
+              loading: apolloQueryResult.loading,
+              networkStatus: apolloQueryResult.networkStatus
+            }
+          };
+  } else if (apolloQueryResult.error !== undefined) {
+    return {
+            TAG: /* Error */1,
+            _0: apolloQueryResult.error
+          };
+  } else {
+    return {
+            TAG: /* Error */1,
+            _0: ApolloClient__Errors_ApolloError.make(undefined, undefined, "No data and no error on ApolloQueryResult.t. Shouldn't this be impossible?", undefined, undefined)
+          };
+  }
+}
+
+var ApolloQueryResult = {
+  Js_: Js_$2,
+  fromJs: fromJs,
+  fromError: fromError,
+  toResult: toResult
+};
+
+var Js_$3 = {};
+
+function toJs$1(t, safeParse) {
+  return function (previousResult, jsOptions) {
+    return Curry._2(t, previousResult, {
+                mutationResult: ApolloClient__Link_Core_Types.FetchResult.fromJs(jsOptions.mutationResult, safeParse),
+                queryName: jsOptions.queryName,
+                queryVariables: jsOptions.queryVariables
+              });
+  };
+}
+
+var MutationQueryReducer = {
+  Js_: Js_$3,
+  toJs: toJs$1
+};
+
+var Js_$4 = {};
+
+function toJs$2(t, safeParse) {
+  return Js_dict.map((function (mutationQueryReducer) {
+                return toJs$1(mutationQueryReducer, safeParse);
+              }), t);
+}
+
+var MutationQueryReducersMap = {
+  Js_: Js_$4,
+  toJs: toJs$2
+};
+
+var Js_$5 = {};
+
+var Resolvers = {
+  Js_: Js_$5
+};
+
+var ApolloError;
+
+var Graphql;
+
+var FetchResult;
+
+var NetworkStatus;
+
+var Resolver;
+
+var Types;
+
+var Utils;
+
+export {
+  ApolloError ,
+  Graphql ,
+  FetchResult ,
+  NetworkStatus ,
+  Resolver ,
+  Types ,
+  Utils ,
+  OperationVariables ,
+  PureQueryOptions ,
+  ApolloQueryResult ,
+  MutationQueryReducer ,
+  MutationQueryReducersMap ,
+  Resolvers ,
+  
+}
+/* ApolloClient__Utils Not a pure module */
diff --git a/node_modules/rescript-apollo-client/src/@apollo/client/core/ApolloClient__Core_WatchQueryOptions.bs.js b/node_modules/rescript-apollo-client/src/@apollo/client/core/ApolloClient__Core_WatchQueryOptions.bs.js
new file mode 100644
index 0000000..994be45
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/@apollo/client/core/ApolloClient__Core_WatchQueryOptions.bs.js
@@ -0,0 +1,293 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+import * as Curry from "bs-platform/lib/es6/curry.mjs";
+import * as Belt_Array from "bs-platform/lib/es6/belt_Array.mjs";
+import * as Belt_Option from "bs-platform/lib/es6/belt_Option.mjs";
+import * as ApolloClient__Core_Types from "./ApolloClient__Core_Types.bs.js";
+import * as ApolloClient__Link_Core_Types from "../link/core/ApolloClient__Link_Core_Types.bs.js";
+
+var Js_ = {};
+
+function toJs(x) {
+  switch (x) {
+    case /* None */0 :
+        return "none";
+    case /* Ignore */1 :
+        return "ignore";
+    case /* All */2 :
+        return "all";
+    
+  }
+}
+
+var ErrorPolicy = {
+  Js_: Js_,
+  toJs: toJs
+};
+
+var Js_$1 = {};
+
+function toJs$1(x) {
+  switch (x) {
+    case /* CacheFirst */0 :
+        return "cache-first";
+    case /* CacheOnly */1 :
+        return "cache-only";
+    case /* NetworkOnly */2 :
+        return "network-only";
+    case /* NoCache */3 :
+        return "no-cache";
+    case /* Standby */4 :
+        return "standby";
+    
+  }
+}
+
+var FetchPolicy = {
+  Js_: Js_$1,
+  toJs: toJs$1
+};
+
+var Js_$2 = {};
+
+function toJs$2(x) {
+  return "no-cache";
+}
+
+var FetchPolicy__noCacheExtracted = {
+  Js_: Js_$2,
+  toJs: toJs$2
+};
+
+var Js_$3 = {};
+
+function toJs$3(x) {
+  switch (x) {
+    case /* CacheAndNetwork */0 :
+        return "cache-and-network";
+    case /* CacheFirst */1 :
+        return "cache-first";
+    case /* CacheOnly */2 :
+        return "cache-only";
+    case /* NetworkOnly */3 :
+        return "network-only";
+    case /* NoCache */4 :
+        return "no-cache";
+    case /* Standby */5 :
+        return "standby";
+    
+  }
+}
+
+var WatchQueryFetchPolicy = {
+  Js_: Js_$3,
+  toJs: toJs$3
+};
+
+var Js_$4 = {};
+
+function toJs$4(t, mapJsVariables, serializeVariables) {
+  return {
+          fetchPolicy: Belt_Option.map(t.fetchPolicy, toJs$1),
+          query: t.query,
+          variables: Curry._1(mapJsVariables, Curry._1(serializeVariables, t.variables)),
+          errorPolicy: Belt_Option.map(t.errorPolicy, toJs),
+          context: t.context
+        };
+}
+
+var QueryOptions = {
+  Js_: Js_$4,
+  toJs: toJs$4
+};
+
+var Js_$5 = {};
+
+function toJs$5(t, mapJsVariables, serializeVariables) {
+  return {
+          fetchPolicy: Belt_Option.map(t.fetchPolicy, toJs$3),
+          query: t.query,
+          variables: Curry._1(mapJsVariables, Curry._1(serializeVariables, t.variables)),
+          errorPolicy: Belt_Option.map(t.errorPolicy, toJs),
+          context: t.context
+        };
+}
+
+var WatchQueryOptions = {
+  Js_: Js_$5,
+  toJs: toJs$5
+};
+
+var Js_$6 = {};
+
+function toJs$6(t, onParseError, querySafeParse, querySerialize, subscriptionSafeParse) {
+  return function (jsQueryData, param) {
+    var match = Curry._1(querySafeParse, jsQueryData);
+    var match$1 = Curry._1(subscriptionSafeParse, param.subscriptionData.data);
+    if (match.TAG === /* Ok */0) {
+      if (match$1.TAG === /* Ok */0) {
+        return Curry._1(querySerialize, Curry._2(t, match._0, {
+                        subscriptionData: {
+                          data: match$1._0
+                        }
+                      }));
+      }
+      Curry._1(onParseError, match$1._0);
+      return jsQueryData;
+    }
+    Curry._1(onParseError, match._0);
+    return jsQueryData;
+  };
+}
+
+var UpdateQueryFn = {
+  Js_: Js_$6,
+  toJs: toJs$6
+};
+
+var Js_$7 = {};
+
+function toJs$7(t, onUpdateQueryParseError, querySafeParse, querySerialize, subscriptionSafeParse) {
+  return {
+          document: t.document,
+          variables: t.variables,
+          updateQuery: Belt_Option.map(t.updateQuery, (function (param) {
+                  return toJs$6(param, onUpdateQueryParseError, querySafeParse, querySerialize, subscriptionSafeParse);
+                })),
+          onError: t.onError,
+          context: t.context
+        };
+}
+
+var SubscribeToMoreOptions = {
+  Js_: Js_$7,
+  toJs: toJs$7
+};
+
+var Js_$8 = {};
+
+function toJs$8(t, mapJsVariables, serializeVariables) {
+  return {
+          query: t.query,
+          variables: Curry._1(mapJsVariables, Curry._1(serializeVariables, t.variables)),
+          fetchPolicy: Belt_Option.map(t.fetchPolicy, toJs$1),
+          errorPolicy: Belt_Option.map(t.errorPolicy, toJs),
+          context: t.context
+        };
+}
+
+var SubscriptionOptions = {
+  Js_: Js_$8,
+  toJs: toJs$8
+};
+
+var Js_$9 = {};
+
+function toJs$9(mutationUpdaterFn, safeParse) {
+  return function (cache, jsFetchResult) {
+    return Curry._2(mutationUpdaterFn, cache, ApolloClient__Link_Core_Types.FetchResult.fromJs(jsFetchResult, safeParse));
+  };
+}
+
+var MutationUpdaterFn = {
+  Js_: Js_$9,
+  toJs: toJs$9
+};
+
+function string(v) {
+  return v;
+}
+
+function pureQueryOptions(v) {
+  return v;
+}
+
+var Union = {
+  string: string,
+  pureQueryOptions: pureQueryOptions
+};
+
+var Js_$10 = {
+  Union: Union
+};
+
+function toJs$10(__x) {
+  return Belt_Array.map(__x, (function (x) {
+                if (x.TAG === /* PureQueryOptions */0) {
+                  return ApolloClient__Core_Types.PureQueryOptions.toJs(x._0);
+                } else {
+                  return x._0;
+                }
+              }));
+}
+
+var RefetchQueryDescription = {
+  Js_: Js_$10,
+  toJs: toJs$10
+};
+
+var Js_$11 = {};
+
+function toJs$11(t, mapJsVariables, safeParse, serialize, serializeVariables) {
+  var func = ApolloClient__Core_Types.MutationQueryReducersMap.toJs;
+  return {
+          mutation: t.mutation,
+          context: t.context,
+          fetchPolicy: Belt_Option.map(t.fetchPolicy, toJs$2),
+          awaitRefetchQueries: t.awaitRefetchQueries,
+          errorPolicy: Belt_Option.map(t.errorPolicy, toJs),
+          optimisticResponse: Belt_Option.map(t.optimisticResponse, (function (optimisticResponse) {
+                  return function (variables) {
+                    return Curry._1(serialize, Curry._1(optimisticResponse, variables));
+                  };
+                })),
+          update: Belt_Option.map(t.update, (function (param) {
+                  return toJs$9(param, safeParse);
+                })),
+          updateQueries: Belt_Option.map(t.updateQueries, (function (param) {
+                  return Curry._2(func, param, safeParse);
+                })),
+          refetchQueries: Belt_Option.map(t.refetchQueries, toJs$10),
+          variables: Curry._1(mapJsVariables, Curry._1(serializeVariables, t.variables))
+        };
+}
+
+var MutationOptions = {
+  Js_: Js_$11,
+  toJs: toJs$11
+};
+
+var ApolloCache;
+
+var FetchResult;
+
+var Graphql;
+
+var MutationQueryReducersMap;
+
+var Types;
+
+var PureQueryOptions;
+
+export {
+  ApolloCache ,
+  FetchResult ,
+  Graphql ,
+  MutationQueryReducersMap ,
+  Types ,
+  PureQueryOptions ,
+  ErrorPolicy ,
+  FetchPolicy ,
+  FetchPolicy__noCacheExtracted ,
+  WatchQueryFetchPolicy ,
+  QueryOptions ,
+  WatchQueryOptions ,
+  UpdateQueryFn ,
+  SubscribeToMoreOptions ,
+  SubscriptionOptions ,
+  MutationUpdaterFn ,
+  RefetchQueryDescription ,
+  MutationOptions ,
+  
+}
+/* ApolloClient__Core_Types Not a pure module */
diff --git a/node_modules/rescript-apollo-client/src/@apollo/client/errors/ApolloClient__Errors.bs.js b/node_modules/rescript-apollo-client/src/@apollo/client/errors/ApolloClient__Errors.bs.js
new file mode 100644
index 0000000..381d125
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/@apollo/client/errors/ApolloClient__Errors.bs.js
@@ -0,0 +1,10 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+
+var ApolloError;
+
+export {
+  ApolloError ,
+  
+}
+/* No side effect */
diff --git a/node_modules/rescript-apollo-client/src/@apollo/client/errors/ApolloClient__Errors_ApolloError.bs.js b/node_modules/rescript-apollo-client/src/@apollo/client/errors/ApolloClient__Errors_ApolloError.bs.js
new file mode 100644
index 0000000..e794d59
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/@apollo/client/errors/ApolloClient__Errors_ApolloError.bs.js
@@ -0,0 +1,156 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+import * as Belt_Option from "bs-platform/lib/es6/belt_Option.mjs";
+import * as Caml_option from "bs-platform/lib/es6/caml_option.mjs";
+import * as Client from "@apollo/client";
+
+var ensureError = (function (unknown) {
+    if (unknown instanceof Error) {
+      return unknown;
+    } else {
+      unknown = unknown || {};
+      const message = unknown.message;
+      const errorMessage = unknown.errorMessage;
+      const keys = Object.keys(unknown);
+      const error = new Error(message || errorMessage || "[Non-error exception with keys: " + keys.join(", ") + "]");
+
+      keys.forEach(function(key) {
+        error[key] = unknown[key];
+      });
+
+      return error;
+    }
+  });
+
+function error(v) {
+  return v;
+}
+
+function serverError(v) {
+  return v;
+}
+
+function serverParseError(v) {
+  return v;
+}
+
+function classify(v) {
+  if ((function (v) { return "bodyText" in v && "response" in v && "statusCode" in v})(v)) {
+    return {
+            TAG: /* ServerError */1,
+            _0: v
+          };
+  } else if ((function (v) { return "result" in v && "response" in v && "statusCode" in v})(v)) {
+    return {
+            TAG: /* ServerParseError */2,
+            _0: v
+          };
+  } else {
+    return {
+            TAG: /* Error */0,
+            _0: v
+          };
+  }
+}
+
+var NetworkErrorUnion = {
+  error: error,
+  serverError: serverError,
+  serverParseError: serverParseError,
+  classify: classify
+};
+
+function ensureApolloError(error) {
+  return (function (error, makeApolloError, ensureError) {
+            var error = error || {};
+            if (Array.isArray(error.graphQLErrors)) {
+              return error;
+            } else if (error && typeof error.message === "string" && error.extensions) {
+              return makeApolloError({graphQLErrors: [error]});
+            } else {
+              return makeApolloError({networkError: ensureError(error)}) 
+            }
+          })(error, (function (prim) {
+                return new Client.ApolloError(prim);
+              }), ensureError);
+}
+
+var Js_ = {
+  NetworkErrorUnion: NetworkErrorUnion,
+  ensureApolloError: ensureApolloError
+};
+
+function fromJs(untrustedJs) {
+  var js = ensureApolloError(untrustedJs);
+  return {
+          extraInfo: js.extraInfo,
+          graphQLErrors: Belt_Option.getWithDefault(js.graphQLErrors, []),
+          networkError: Belt_Option.map(Caml_option.nullable_to_opt(js.networkError), (function (networkError) {
+                  var error = classify(networkError);
+                  switch (error.TAG | 0) {
+                    case /* Error */0 :
+                        return {
+                                TAG: /* FetchFailure */0,
+                                _0: error._0
+                              };
+                    case /* ServerError */1 :
+                        var error$1 = error._0;
+                        return {
+                                TAG: /* BadStatus */1,
+                                _0: error$1.statusCode,
+                                _1: error$1
+                              };
+                    case /* ServerParseError */2 :
+                        return {
+                                TAG: /* BadBody */2,
+                                _0: error._0
+                              };
+                    
+                  }
+                })),
+          name: js.name,
+          message: js.message,
+          stack: js.stack
+        };
+}
+
+function make(graphQLErrors, networkError, errorMessage, extraInfo, param) {
+  var errorWithoutNetworkError = fromJs(new Client.ApolloError({
+            graphQLErrors: graphQLErrors,
+            networkError: undefined,
+            errorMessage: errorMessage,
+            extraInfo: extraInfo
+          }));
+  return {
+          extraInfo: errorWithoutNetworkError.extraInfo,
+          graphQLErrors: errorWithoutNetworkError.graphQLErrors,
+          networkError: networkError,
+          name: errorWithoutNetworkError.name,
+          message: errorWithoutNetworkError.message,
+          stack: errorWithoutNetworkError.stack
+        };
+}
+
+var Graphql;
+
+var GraphQLError;
+
+var ServerError;
+
+var ServerParseError;
+
+var Types;
+
+export {
+  Graphql ,
+  GraphQLError ,
+  ServerError ,
+  ServerParseError ,
+  Types ,
+  ensureError ,
+  Js_ ,
+  fromJs ,
+  make ,
+  
+}
+/* @apollo/client Not a pure module */
diff --git a/node_modules/rescript-apollo-client/src/@apollo/client/link/ApolloClient__Link.bs.js b/node_modules/rescript-apollo-client/src/@apollo/client/link/ApolloClient__Link.bs.js
new file mode 100644
index 0000000..72adc81
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/@apollo/client/link/ApolloClient__Link.bs.js
@@ -0,0 +1,25 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+
+var Context;
+
+var Core;
+
+var $$Error;
+
+var Http;
+
+var Utils;
+
+var Ws;
+
+export {
+  Context ,
+  Core ,
+  $$Error ,
+  Http ,
+  Utils ,
+  Ws ,
+  
+}
+/* No side effect */
diff --git a/node_modules/rescript-apollo-client/src/@apollo/client/link/context/ApolloClient__Link_Context.bs.js b/node_modules/rescript-apollo-client/src/@apollo/client/link/context/ApolloClient__Link_Context.bs.js
new file mode 100644
index 0000000..b0d450a
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/@apollo/client/link/context/ApolloClient__Link_Context.bs.js
@@ -0,0 +1,33 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+import * as Context from "@apollo/client/link/context";
+
+var Js_ = {};
+
+function setContext(prim) {
+  return Context.setContext(prim);
+}
+
+function setContextAsync(fn) {
+  return Context.setContext(fn);
+}
+
+var ContextLink = {
+  make: setContext,
+  makeAsync: setContextAsync
+};
+
+var ApolloLink;
+
+var GraphQLRequest;
+
+export {
+  ApolloLink ,
+  GraphQLRequest ,
+  Js_ ,
+  setContext ,
+  setContextAsync ,
+  ContextLink ,
+  
+}
+/* @apollo/client/link/context Not a pure module */
diff --git a/node_modules/rescript-apollo-client/src/@apollo/client/link/core/ApolloClient__Link_Core.bs.js b/node_modules/rescript-apollo-client/src/@apollo/client/link/core/ApolloClient__Link_Core.bs.js
new file mode 100644
index 0000000..3486ab5
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/@apollo/client/link/core/ApolloClient__Link_Core.bs.js
@@ -0,0 +1,13 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+
+var ApolloLink;
+
+var Types;
+
+export {
+  ApolloLink ,
+  Types ,
+  
+}
+/* No side effect */
diff --git a/node_modules/rescript-apollo-client/src/@apollo/client/link/core/ApolloClient__Link_Core_ApolloLink.bs.js b/node_modules/rescript-apollo-client/src/@apollo/client/link/core/ApolloClient__Link_Core_ApolloLink.bs.js
new file mode 100644
index 0000000..d91050b
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/@apollo/client/link/core/ApolloClient__Link_Core_ApolloLink.bs.js
@@ -0,0 +1,63 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+import * as Curry from "bs-platform/lib/es6/curry.mjs";
+import * as Client from "@apollo/client";
+import * as ApolloClient__Link_Core_Types from "./ApolloClient__Link_Core_Types.bs.js";
+
+var Static = {};
+
+var Js_ = {
+  Static: Static
+};
+
+function make(requestHandler) {
+  return new Client.ApolloLink(ApolloClient__Link_Core_Types.RequestHandler.toJs(requestHandler));
+}
+
+function concat(prim, prim$1) {
+  return prim.concat(prim$1);
+}
+
+function from(prim, prim$1) {
+  return prim.from(prim$1);
+}
+
+function setOnError(prim, prim$1) {
+  prim.onError(prim$1);
+  
+}
+
+function split(t, test, whenTrue, whenFalse) {
+  return t.split((function (jsOperation) {
+                return Curry._1(test, ApolloClient__Link_Core_Types.Operation.fromJs(jsOperation));
+              }), whenTrue, whenFalse);
+}
+
+var FetchResult;
+
+var GraphQLRequest;
+
+var Observable;
+
+var Operation;
+
+var RequestHandler;
+
+var Static$1;
+
+export {
+  FetchResult ,
+  GraphQLRequest ,
+  Observable ,
+  Operation ,
+  RequestHandler ,
+  Js_ ,
+  Static$1 as Static,
+  make ,
+  concat ,
+  from ,
+  setOnError ,
+  split ,
+  
+}
+/* @apollo/client Not a pure module */
diff --git a/node_modules/rescript-apollo-client/src/@apollo/client/link/core/ApolloClient__Link_Core_Types.bs.js b/node_modules/rescript-apollo-client/src/@apollo/client/link/core/ApolloClient__Link_Core_Types.bs.js
new file mode 100644
index 0000000..22f725f
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/@apollo/client/link/core/ApolloClient__Link_Core_Types.bs.js
@@ -0,0 +1,140 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+import * as Curry from "bs-platform/lib/es6/curry.mjs";
+import * as Js_null from "bs-platform/lib/es6/js_null.mjs";
+import * as Caml_option from "bs-platform/lib/es6/caml_option.mjs";
+import * as ApolloClient__Utils from "../../../../ApolloClient__Utils.bs.js";
+import * as ApolloClient__Errors_ApolloError from "../../errors/ApolloClient__Errors_ApolloError.bs.js";
+
+var Js_ = {};
+
+var GraphQLRequest = {
+  Js_: Js_
+};
+
+var Js_$1 = {};
+
+var preserveJsPropsAndContext = (function (js, t) {
+        return Object.assign(js, t)
+      });
+
+function fromJs(js) {
+  return preserveJsPropsAndContext(js, {
+              query: js.query,
+              variables: js.variables,
+              operationName: js.operationName,
+              extensions: js.extensions,
+              rescript_setContext: (function (context) {
+                  return js.setContext(context);
+                }),
+              rescript_getContext: (function (param) {
+                  return js.getContext();
+                })
+            });
+}
+
+var Operation = {
+  Js_: Js_$1,
+  preserveJsPropsAndContext: preserveJsPropsAndContext,
+  fromJs: fromJs
+};
+
+var Js_$2 = {};
+
+function fromJs$1(js, safeParse) {
+  var match = ApolloClient__Utils.safeParseAndLiftToCommonResultProps(Caml_option.nullable_to_opt(js.data), js.errors, undefined, safeParse);
+  return {
+          data: match[0],
+          extensions: js.extensions,
+          context: js.context,
+          error: match[1]
+        };
+}
+
+function fromError(error) {
+  return {
+          data: undefined,
+          extensions: undefined,
+          context: undefined,
+          error: error
+        };
+}
+
+function toResult(fetchResult) {
+  var data = fetchResult.data;
+  if (data !== undefined) {
+    return {
+            TAG: /* Ok */0,
+            _0: {
+              data: Caml_option.valFromOption(data),
+              error: fetchResult.error,
+              extensions: fetchResult.extensions,
+              context: fetchResult.context
+            }
+          };
+  } else if (fetchResult.error !== undefined) {
+    return {
+            TAG: /* Error */1,
+            _0: fetchResult.error
+          };
+  } else {
+    return {
+            TAG: /* Error */1,
+            _0: ApolloClient__Errors_ApolloError.make(undefined, undefined, "No data and no error on FetchResult.t. Shouldn't this be impossible?", undefined, undefined)
+          };
+  }
+}
+
+var FetchResult = {
+  Js_: Js_$2,
+  fromJs: fromJs$1,
+  fromError: fromError,
+  toResult: toResult
+};
+
+var Js_$3 = {};
+
+var NextLink = {
+  Js_: Js_$3
+};
+
+var Js_$4 = {};
+
+function toJs(t) {
+  return function (operation, forward) {
+    return Js_null.fromOption(Curry._2(t, operation, forward));
+  };
+}
+
+var RequestHandler = {
+  Js_: Js_$4,
+  toJs: toJs
+};
+
+var ApolloError;
+
+var Graphql;
+
+var GraphQLError;
+
+var Observable;
+
+var Types;
+
+var Utils;
+
+export {
+  ApolloError ,
+  Graphql ,
+  GraphQLError ,
+  Observable ,
+  Types ,
+  Utils ,
+  GraphQLRequest ,
+  Operation ,
+  FetchResult ,
+  NextLink ,
+  RequestHandler ,
+  
+}
+/* ApolloClient__Utils Not a pure module */
diff --git a/node_modules/rescript-apollo-client/src/@apollo/client/link/error/ApolloClient__Link_Error.bs.js b/node_modules/rescript-apollo-client/src/@apollo/client/link/error/ApolloClient__Link_Error.bs.js
new file mode 100644
index 0000000..841f212
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/@apollo/client/link/error/ApolloClient__Link_Error.bs.js
@@ -0,0 +1,145 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+import * as Curry from "bs-platform/lib/es6/curry.mjs";
+import * as Belt_Option from "bs-platform/lib/es6/belt_Option.mjs";
+import * as $$Error from "@apollo/client/link/error";
+import * as ApolloClient__Link_Core_Types from "../core/ApolloClient__Link_Core_Types.bs.js";
+
+function error(v) {
+  return v;
+}
+
+function serverError(v) {
+  return v;
+}
+
+function serverParseError(v) {
+  return v;
+}
+
+function classify(v) {
+  if ((function (v) { return "bodyText" in v && "response" in v && "statusCode" in v})(v)) {
+    return {
+            TAG: /* ServerError */1,
+            _0: v
+          };
+  } else if ((function (v) { return "result" in v && "response" in v && "statusCode" in v})(v)) {
+    return {
+            TAG: /* ServerParseError */2,
+            _0: v
+          };
+  } else {
+    return {
+            TAG: /* Error */0,
+            _0: v
+          };
+  }
+}
+
+var NetworkErrorUnion = {
+  error: error,
+  serverError: serverError,
+  serverParseError: serverParseError,
+  classify: classify
+};
+
+var Js_ = {
+  NetworkErrorUnion: NetworkErrorUnion
+};
+
+function fromJs(js) {
+  return {
+          graphQLErrors: js.graphQLErrors,
+          networkError: Belt_Option.map(js.networkError, (function (networkError) {
+                  var error = classify(networkError);
+                  switch (error.TAG | 0) {
+                    case /* Error */0 :
+                        return {
+                                TAG: /* FetchFailure */0,
+                                _0: error._0
+                              };
+                    case /* ServerError */1 :
+                        var error$1 = error._0;
+                        return {
+                                TAG: /* BadStatus */1,
+                                _0: error$1.statusCode,
+                                _1: error$1
+                              };
+                    case /* ServerParseError */2 :
+                        return {
+                                TAG: /* BadBody */2,
+                                _0: error._0
+                              };
+                    
+                  }
+                })),
+          response: js.response,
+          operation: ApolloClient__Link_Core_Types.Operation.fromJs(js.operation),
+          forward: (function (operation) {
+              return Curry._1(js.forward(), operation);
+            })
+        };
+}
+
+var ErrorResponse = {
+  Js_: Js_,
+  fromJs: fromJs
+};
+
+var Js_$1 = {};
+
+var ErrorHandler = {
+  Js_: Js_$1
+};
+
+var Js_$2 = {};
+
+function onError(errorCb) {
+  return $$Error.onError(function (jsErrorResponse) {
+              return Curry._1(errorCb, fromJs(jsErrorResponse));
+            });
+}
+
+var ErrorLink = {
+  make: onError
+};
+
+var ApolloLink;
+
+var ApolloError;
+
+var GraphQLError;
+
+var ExecutionResult;
+
+var FetchResult;
+
+var NextLink;
+
+var Observable;
+
+var Operation;
+
+var ServerError;
+
+var ServerParseError;
+
+export {
+  ApolloLink ,
+  ApolloError ,
+  GraphQLError ,
+  ExecutionResult ,
+  FetchResult ,
+  NextLink ,
+  Observable ,
+  Operation ,
+  ServerError ,
+  ServerParseError ,
+  ErrorResponse ,
+  ErrorHandler ,
+  Js_$2 as Js_,
+  onError ,
+  ErrorLink ,
+  
+}
+/* @apollo/client/link/error Not a pure module */
diff --git a/node_modules/rescript-apollo-client/src/@apollo/client/link/http/ApolloClient__Link_Http.bs.js b/node_modules/rescript-apollo-client/src/@apollo/client/link/http/ApolloClient__Link_Http.bs.js
new file mode 100644
index 0000000..ef6443c
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/@apollo/client/link/http/ApolloClient__Link_Http.bs.js
@@ -0,0 +1,19 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+
+var CreateHttpLink;
+
+var HttpLink;
+
+var ParseAndCheckHttpResponse;
+
+var SelectHttpOptionsAndBody;
+
+export {
+  CreateHttpLink ,
+  HttpLink ,
+  ParseAndCheckHttpResponse ,
+  SelectHttpOptionsAndBody ,
+  
+}
+/* No side effect */
diff --git a/node_modules/rescript-apollo-client/src/@apollo/client/link/http/ApolloClient__Link_Http_CreateHttpLink.bs.js b/node_modules/rescript-apollo-client/src/@apollo/client/link/http/ApolloClient__Link_Http_CreateHttpLink.bs.js
new file mode 100644
index 0000000..582d06c
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/@apollo/client/link/http/ApolloClient__Link_Http_CreateHttpLink.bs.js
@@ -0,0 +1,22 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+import * as Client from "@apollo/client";
+
+var Js_ = {};
+
+function createHttpLink(prim) {
+  return Client.createHttpLink(prim);
+}
+
+var ApolloLink;
+
+var HttpOptions;
+
+export {
+  ApolloLink ,
+  HttpOptions ,
+  Js_ ,
+  createHttpLink ,
+  
+}
+/* @apollo/client Not a pure module */
diff --git a/node_modules/rescript-apollo-client/src/@apollo/client/link/http/ApolloClient__Link_Http_HttpLink.bs.js b/node_modules/rescript-apollo-client/src/@apollo/client/link/http/ApolloClient__Link_Http_HttpLink.bs.js
new file mode 100644
index 0000000..fbea298
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/@apollo/client/link/http/ApolloClient__Link_Http_HttpLink.bs.js
@@ -0,0 +1,33 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+import * as Client from "@apollo/client";
+
+var Js_ = {};
+
+function make(uri, includeExtensions, $$fetch, headers, credentials, fetchOptions, useGETForQueries, param) {
+  return new Client.HttpLink({
+              uri: uri,
+              includeExtensions: includeExtensions,
+              fetch: $$fetch,
+              headers: headers,
+              credentials: credentials,
+              fetchOptions: fetchOptions,
+              useGETForQueries: useGETForQueries
+            });
+}
+
+var ApolloLink;
+
+var HttpOptions;
+
+var UriFunction;
+
+export {
+  ApolloLink ,
+  HttpOptions ,
+  UriFunction ,
+  Js_ ,
+  make ,
+  
+}
+/* @apollo/client Not a pure module */
diff --git a/node_modules/rescript-apollo-client/src/@apollo/client/link/http/ApolloClient__Link_Http_ParseAndCheckHttpResponse.bs.js b/node_modules/rescript-apollo-client/src/@apollo/client/link/http/ApolloClient__Link_Http_ParseAndCheckHttpResponse.bs.js
new file mode 100644
index 0000000..9f7e67a
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/@apollo/client/link/http/ApolloClient__Link_Http_ParseAndCheckHttpResponse.bs.js
@@ -0,0 +1,14 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+
+var Js_ = {};
+
+var ServerParseError = {
+  Js_: Js_
+};
+
+export {
+  ServerParseError ,
+  
+}
+/* No side effect */
diff --git a/node_modules/rescript-apollo-client/src/@apollo/client/link/http/ApolloClient__Link_Http_SelectHttpOptionsAndBody.bs.js b/node_modules/rescript-apollo-client/src/@apollo/client/link/http/ApolloClient__Link_Http_SelectHttpOptionsAndBody.bs.js
new file mode 100644
index 0000000..c9fc8bc
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/@apollo/client/link/http/ApolloClient__Link_Http_SelectHttpOptionsAndBody.bs.js
@@ -0,0 +1,24 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+
+var Js_ = {};
+
+var UriFunction = {
+  Js_: Js_
+};
+
+var Js_$1 = {};
+
+var HttpOptions = {
+  Js_: Js_$1
+};
+
+var Operation;
+
+export {
+  Operation ,
+  UriFunction ,
+  HttpOptions ,
+  
+}
+/* No side effect */
diff --git a/node_modules/rescript-apollo-client/src/@apollo/client/link/utils/ApolloClient__Link_Utils.bs.js b/node_modules/rescript-apollo-client/src/@apollo/client/link/utils/ApolloClient__Link_Utils.bs.js
new file mode 100644
index 0000000..fbe0194
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/@apollo/client/link/utils/ApolloClient__Link_Utils.bs.js
@@ -0,0 +1,10 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+
+var ThrowServerError;
+
+export {
+  ThrowServerError ,
+  
+}
+/* No side effect */
diff --git a/node_modules/rescript-apollo-client/src/@apollo/client/link/utils/ApolloClient__Link_Utils_ThrowServerError.bs.js b/node_modules/rescript-apollo-client/src/@apollo/client/link/utils/ApolloClient__Link_Utils_ThrowServerError.bs.js
new file mode 100644
index 0000000..0a0cc6b
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/@apollo/client/link/utils/ApolloClient__Link_Utils_ThrowServerError.bs.js
@@ -0,0 +1,14 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+
+var Js_ = {};
+
+var ServerError = {
+  Js_: Js_
+};
+
+export {
+  ServerError ,
+  
+}
+/* No side effect */
diff --git a/node_modules/rescript-apollo-client/src/@apollo/client/link/ws/ApolloClient__Link_Ws.bs.js b/node_modules/rescript-apollo-client/src/@apollo/client/link/ws/ApolloClient__Link_Ws.bs.js
new file mode 100644
index 0000000..735c499
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/@apollo/client/link/ws/ApolloClient__Link_Ws.bs.js
@@ -0,0 +1,49 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+import * as Belt_Option from "bs-platform/lib/es6/belt_Option.mjs";
+import * as Ws from "@apollo/client/link/ws";
+import * as ApolloClient__SubscriptionsTransportWs from "../../../../subscriptions-transport-ws/ApolloClient__SubscriptionsTransportWs.bs.js";
+
+var Js_ = {};
+
+var Configuration = {
+  Js_: Js_
+};
+
+var Js_$1 = {};
+
+function make(uri, options, webSocketImpl, param) {
+  return new Ws.WebSocketLink(({
+                NAME: "Configuration",
+                VAL: {
+                  uri: uri,
+                  options: Belt_Option.map(options, ApolloClient__SubscriptionsTransportWs.ClientOptions.toJs),
+                  webSocketImpl: webSocketImpl
+                }
+              }).VAL);
+}
+
+function makeWithSubscriptionClient(subscriptionClient) {
+  return new Ws.WebSocketLink(subscriptionClient);
+}
+
+var WebSocketLink = {
+  ClientOptions: undefined,
+  SubscriptionClient: undefined,
+  Configuration: Configuration,
+  Js_: Js_$1,
+  make: make,
+  makeWithSubscriptionClient: makeWithSubscriptionClient
+};
+
+var ApolloLink;
+
+var Graphql;
+
+export {
+  ApolloLink ,
+  Graphql ,
+  WebSocketLink ,
+  
+}
+/* @apollo/client/link/ws Not a pure module */
diff --git a/node_modules/rescript-apollo-client/src/@apollo/client/react/ApolloClient__React.bs.js b/node_modules/rescript-apollo-client/src/@apollo/client/react/ApolloClient__React.bs.js
new file mode 100644
index 0000000..4134a0e
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/@apollo/client/react/ApolloClient__React.bs.js
@@ -0,0 +1,32 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+import * as ApolloClient__React_Hooks_UseQuery from "./hooks/ApolloClient__React_Hooks_UseQuery.bs.js";
+import * as ApolloClient__React_Hooks_UseMutation from "./hooks/ApolloClient__React_Hooks_UseMutation.bs.js";
+import * as ApolloClient__React_Hooks_UseLazyQuery from "./hooks/ApolloClient__React_Hooks_UseLazyQuery.bs.js";
+import * as ApolloClient__React_Hooks_UseSubscription from "./hooks/ApolloClient__React_Hooks_UseSubscription.bs.js";
+
+var Context;
+
+var Hooks;
+
+var Types;
+
+var useLazyQuery = ApolloClient__React_Hooks_UseLazyQuery.useLazyQuery;
+
+var useMutation = ApolloClient__React_Hooks_UseMutation.useMutation;
+
+var useQuery = ApolloClient__React_Hooks_UseQuery.useQuery;
+
+var useSubscription = ApolloClient__React_Hooks_UseSubscription.useSubscription;
+
+export {
+  Context ,
+  Hooks ,
+  Types ,
+  useLazyQuery ,
+  useMutation ,
+  useQuery ,
+  useSubscription ,
+  
+}
+/* ApolloClient__React_Hooks_UseQuery Not a pure module */
diff --git a/node_modules/rescript-apollo-client/src/@apollo/client/react/context/ApolloClient__React_Context.bs.js b/node_modules/rescript-apollo-client/src/@apollo/client/react/context/ApolloClient__React_Context.bs.js
new file mode 100644
index 0000000..3058ad9
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/@apollo/client/react/context/ApolloClient__React_Context.bs.js
@@ -0,0 +1,10 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+
+var ApolloProvider;
+
+export {
+  ApolloProvider ,
+  
+}
+/* No side effect */
diff --git a/node_modules/rescript-apollo-client/src/@apollo/client/react/context/ApolloClient__React_Context_ApolloProvider.bs.js b/node_modules/rescript-apollo-client/src/@apollo/client/react/context/ApolloClient__React_Context_ApolloProvider.bs.js
new file mode 100644
index 0000000..26cc978
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/@apollo/client/react/context/ApolloClient__React_Context_ApolloProvider.bs.js
@@ -0,0 +1,10 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+
+var ApolloClient;
+
+export {
+  ApolloClient ,
+  
+}
+/* No side effect */
diff --git a/node_modules/rescript-apollo-client/src/@apollo/client/react/hooks/ApolloClient__React_Hooks.bs.js b/node_modules/rescript-apollo-client/src/@apollo/client/react/hooks/ApolloClient__React_Hooks.bs.js
new file mode 100644
index 0000000..c17399e
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/@apollo/client/react/hooks/ApolloClient__React_Hooks.bs.js
@@ -0,0 +1,19 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+
+var UseApolloClient;
+
+var UseMutation;
+
+var UseQuery;
+
+var UseSubscription;
+
+export {
+  UseApolloClient ,
+  UseMutation ,
+  UseQuery ,
+  UseSubscription ,
+  
+}
+/* No side effect */
diff --git a/node_modules/rescript-apollo-client/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseApolloClient.bs.js b/node_modules/rescript-apollo-client/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseApolloClient.bs.js
new file mode 100644
index 0000000..26cc978
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseApolloClient.bs.js
@@ -0,0 +1,10 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+
+var ApolloClient;
+
+export {
+  ApolloClient ,
+  
+}
+/* No side effect */
diff --git a/node_modules/rescript-apollo-client/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseLazyQuery.bs.js b/node_modules/rescript-apollo-client/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseLazyQuery.bs.js
new file mode 100644
index 0000000..d7c8c77
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseLazyQuery.bs.js
@@ -0,0 +1,97 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+import * as Caml_option from "bs-platform/lib/es6/caml_option.mjs";
+import * as Client from "@apollo/client";
+import * as ApolloClient__Utils from "../../../../ApolloClient__Utils.bs.js";
+import * as ApolloClient__React_Types from "../types/ApolloClient__React_Types.bs.js";
+
+var Js_ = {};
+
+function useLazyQuery(Operation, client, context, displayName, errorPolicy, fetchPolicy, notifyOnNetworkStatusChange, onCompleted, onError, partialRefetch, pollInterval, ssr, param) {
+  var safeParse = function (param) {
+    return ApolloClient__Utils.safeParse(Operation.parse, param);
+  };
+  var jsQueryTuple = Client.useLazyQuery(Operation.query, ApolloClient__React_Types.LazyQueryHookOptions.toJs({
+            query: undefined,
+            displayName: displayName,
+            onCompleted: onCompleted,
+            onError: onError,
+            client: client,
+            context: context,
+            errorPolicy: errorPolicy,
+            fetchPolicy: fetchPolicy,
+            notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,
+            partialRefetch: partialRefetch,
+            pollInterval: pollInterval,
+            ssr: ssr,
+            variables: undefined
+          }, safeParse, Operation.serializeVariables));
+  return ApolloClient__Utils.useGuaranteedMemo1((function (param) {
+                return ApolloClient__React_Types.QueryTuple.fromJs(jsQueryTuple, safeParse, Operation.serialize, Operation.serializeVariables);
+              }), jsQueryTuple);
+}
+
+function useLazyQueryWithVariables(Operation, client, context, displayName, errorPolicy, fetchPolicy, $staropt$star, notifyOnNetworkStatusChange, onCompleted, onError, partialRefetch, pollInterval, ssr, variables) {
+  var mapJsVariables = $staropt$star !== undefined ? $staropt$star : (function (prim) {
+        return prim;
+      });
+  var safeParse = function (param) {
+    return ApolloClient__Utils.safeParse(Operation.parse, param);
+  };
+  var jsQueryTuple = Client.useLazyQuery(Operation.query, ApolloClient__React_Types.LazyQueryHookOptions.toJs({
+            query: undefined,
+            displayName: displayName,
+            onCompleted: onCompleted,
+            onError: onError,
+            client: client,
+            context: context,
+            errorPolicy: errorPolicy,
+            fetchPolicy: fetchPolicy,
+            notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,
+            partialRefetch: partialRefetch,
+            pollInterval: pollInterval,
+            ssr: ssr,
+            variables: Caml_option.some(variables)
+          }, safeParse, Operation.serializeVariables));
+  return ApolloClient__Utils.useGuaranteedMemo1((function (param) {
+                return ApolloClient__React_Types.QueryTuple__noVariables.fromJs(jsQueryTuple, mapJsVariables, safeParse, Operation.serialize, Operation.serializeVariables, variables);
+              }), jsQueryTuple);
+}
+
+var ApolloClient;
+
+var ApolloError;
+
+var ErrorPolicy;
+
+var Graphql;
+
+var LazyQueryHookOptions;
+
+var QueryTuple;
+
+var QueryTuple__noVariables;
+
+var Types;
+
+var Utils;
+
+var WatchQueryFetchPolicy;
+
+export {
+  ApolloClient ,
+  ApolloError ,
+  ErrorPolicy ,
+  Graphql ,
+  LazyQueryHookOptions ,
+  QueryTuple ,
+  QueryTuple__noVariables ,
+  Types ,
+  Utils ,
+  WatchQueryFetchPolicy ,
+  Js_ ,
+  useLazyQuery ,
+  useLazyQueryWithVariables ,
+  
+}
+/* @apollo/client Not a pure module */
diff --git a/node_modules/rescript-apollo-client/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseMutation.bs.js b/node_modules/rescript-apollo-client/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseMutation.bs.js
new file mode 100644
index 0000000..44f3b77
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseMutation.bs.js
@@ -0,0 +1,128 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+import * as Caml_option from "bs-platform/lib/es6/caml_option.mjs";
+import * as Client from "@apollo/client";
+import * as ApolloClient__Utils from "../../../../ApolloClient__Utils.bs.js";
+import * as ApolloClient__React_Types from "../types/ApolloClient__React_Types.bs.js";
+
+var Js_ = {};
+
+function useMutation(Operation, awaitRefetchQueries, context, client, errorPolicy, fetchPolicy, ignoreResults, notifyOnNetworkStatusChange, onError, onCompleted, optimisticResponse, refetchQueries, update, param) {
+  var safeParse = function (param) {
+    return ApolloClient__Utils.safeParse(Operation.parse, param);
+  };
+  var jsMutationTuple = Client.useMutation(Operation.query, ApolloClient__React_Types.MutationHookOptions.toJs({
+            mutation: undefined,
+            awaitRefetchQueries: awaitRefetchQueries,
+            context: context,
+            client: client,
+            errorPolicy: errorPolicy,
+            fetchPolicy: fetchPolicy,
+            ignoreResults: ignoreResults,
+            notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,
+            onError: onError,
+            onCompleted: onCompleted,
+            optimisticResponse: optimisticResponse,
+            refetchQueries: refetchQueries,
+            update: update,
+            variables: undefined
+          }, (function (prim) {
+              return prim;
+            }), safeParse, Operation.serialize, Operation.serializeVariables));
+  return ApolloClient__Utils.useGuaranteedMemo1((function (param) {
+                return ApolloClient__React_Types.MutationTuple.fromJs(jsMutationTuple, safeParse, Operation.serialize, Operation.serializeVariables);
+              }), jsMutationTuple);
+}
+
+function useMutationWithVariables(Operation, awaitRefetchQueries, context, client, errorPolicy, fetchPolicy, ignoreResults, $staropt$star, notifyOnNetworkStatusChange, onError, onCompleted, optimisticResponse, refetchQueries, update, variables) {
+  var mapJsVariables = $staropt$star !== undefined ? $staropt$star : (function (prim) {
+        return prim;
+      });
+  var safeParse = function (param) {
+    return ApolloClient__Utils.safeParse(Operation.parse, param);
+  };
+  var jsMutationTuple = Client.useMutation(Operation.query, ApolloClient__React_Types.MutationHookOptions.toJs({
+            mutation: undefined,
+            awaitRefetchQueries: awaitRefetchQueries,
+            context: context,
+            client: client,
+            errorPolicy: errorPolicy,
+            fetchPolicy: fetchPolicy,
+            ignoreResults: ignoreResults,
+            notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,
+            onError: onError,
+            onCompleted: onCompleted,
+            optimisticResponse: optimisticResponse,
+            refetchQueries: refetchQueries,
+            update: update,
+            variables: Caml_option.some(variables)
+          }, mapJsVariables, safeParse, Operation.serialize, Operation.serializeVariables));
+  return ApolloClient__Utils.useGuaranteedMemo1((function (param) {
+                var match = ApolloClient__React_Types.MutationTuple__noVariables.fromJs(jsMutationTuple, mapJsVariables, safeParse, Operation.serialize, Operation.serializeVariables, variables);
+                return [
+                        match[0],
+                        match[1]
+                      ];
+              }), jsMutationTuple);
+}
+
+function Extend(M) {
+  var use = function (awaitRefetchQueries, context, client, errorPolicy, fetchPolicy, ignoreResults, notifyOnNetworkStatusChange, onError, onCompleted, optimisticResponse, refetchQueries, update, param) {
+    return useMutation(M, awaitRefetchQueries, context, client, errorPolicy, fetchPolicy, ignoreResults, notifyOnNetworkStatusChange, onError, onCompleted, optimisticResponse, refetchQueries, update, undefined);
+  };
+  var useWithVariables = function (awaitRefetchQueries, context, client, errorPolicy, fetchPolicy, ignoreResults, mapJsVariables, notifyOnNetworkStatusChange, onError, onCompleted, optimisticResponse, refetchQueries, update, variables) {
+    return useMutationWithVariables(M, awaitRefetchQueries, context, client, errorPolicy, fetchPolicy, ignoreResults, mapJsVariables, notifyOnNetworkStatusChange, onError, onCompleted, optimisticResponse, refetchQueries, update, variables);
+  };
+  return {
+          use: use,
+          useWithVariables: useWithVariables
+        };
+}
+
+var ApolloClient;
+
+var ApolloError;
+
+var ErrorPolicy;
+
+var FetchPolicy__noCacheExtracted;
+
+var Graphql;
+
+var MutationHookOptions;
+
+var MutationTuple;
+
+var MutationTuple__noVariables;
+
+var MutationUpdaterFn;
+
+var OperationVariables;
+
+var RefetchQueryDescription;
+
+var Types;
+
+var Utils;
+
+export {
+  ApolloClient ,
+  ApolloError ,
+  ErrorPolicy ,
+  FetchPolicy__noCacheExtracted ,
+  Graphql ,
+  MutationHookOptions ,
+  MutationTuple ,
+  MutationTuple__noVariables ,
+  MutationUpdaterFn ,
+  OperationVariables ,
+  RefetchQueryDescription ,
+  Types ,
+  Utils ,
+  Js_ ,
+  useMutation ,
+  useMutationWithVariables ,
+  Extend ,
+  
+}
+/* @apollo/client Not a pure module */
diff --git a/node_modules/rescript-apollo-client/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.bs.js b/node_modules/rescript-apollo-client/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.bs.js
new file mode 100644
index 0000000..94472ed
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.bs.js
@@ -0,0 +1,107 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+import * as Curry from "bs-platform/lib/es6/curry.mjs";
+import * as Client from "@apollo/client";
+import * as ApolloClient__Utils from "../../../../ApolloClient__Utils.bs.js";
+import * as ApolloClient__React_Types from "../types/ApolloClient__React_Types.bs.js";
+import * as ApolloClient__React_Hooks_UseLazyQuery from "./ApolloClient__React_Hooks_UseLazyQuery.bs.js";
+
+var Js_ = {};
+
+function useQuery(Operation, client, context, displayName, errorPolicy, fetchPolicy, $staropt$star, notifyOnNetworkStatusChange, onCompleted, onError, partialRefetch, pollInterval, skip, ssr, variables) {
+  var mapJsVariables = $staropt$star !== undefined ? $staropt$star : (function (prim) {
+        return prim;
+      });
+  var safeParse = function (param) {
+    return ApolloClient__Utils.safeParse(Operation.parse, param);
+  };
+  var jsQueryResult = Client.useQuery(Operation.query, ApolloClient__React_Types.QueryHookOptions.toJs({
+            query: undefined,
+            displayName: displayName,
+            skip: skip,
+            onCompleted: onCompleted,
+            onError: onError,
+            client: client,
+            context: context,
+            errorPolicy: errorPolicy,
+            fetchPolicy: fetchPolicy,
+            notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,
+            partialRefetch: partialRefetch,
+            pollInterval: pollInterval,
+            ssr: ssr,
+            variables: variables
+          }, mapJsVariables, safeParse, Operation.serializeVariables));
+  return ApolloClient__Utils.useGuaranteedMemo1((function (param) {
+                return ApolloClient__React_Types.QueryResult.fromJs(jsQueryResult, safeParse, Operation.serialize, Operation.serializeVariables);
+              }), jsQueryResult);
+}
+
+function Extend(M) {
+  var refetchQueryDescription = function (context, mapJsVariablesOpt, variables) {
+    var mapJsVariables = mapJsVariablesOpt !== undefined ? mapJsVariablesOpt : (function (prim) {
+          return prim;
+        });
+    var jsVariables = Curry._1(mapJsVariables, Curry._1(M.serializeVariables, variables));
+    return {
+            TAG: /* PureQueryOptions */0,
+            _0: {
+              query: M.query,
+              variables: jsVariables,
+              context: context
+            }
+          };
+  };
+  var use = function (client, context, displayName, errorPolicy, fetchPolicy, mapJsVariables, notifyOnNetworkStatusChange, onCompleted, onError, partialRefetch, pollInterval, skip, ssr, variables) {
+    return useQuery(M, client, context, displayName, errorPolicy, fetchPolicy, mapJsVariables, notifyOnNetworkStatusChange, onCompleted, onError, partialRefetch, pollInterval, skip, ssr, variables);
+  };
+  var useLazy = function (client, context, displayName, errorPolicy, fetchPolicy, notifyOnNetworkStatusChange, onCompleted, onError, partialRefetch, pollInterval, ssr, param) {
+    return ApolloClient__React_Hooks_UseLazyQuery.useLazyQuery(M, client, context, displayName, errorPolicy, fetchPolicy, notifyOnNetworkStatusChange, onCompleted, onError, partialRefetch, pollInterval, ssr, undefined);
+  };
+  var useLazyWithVariables = function (client, context, displayName, errorPolicy, fetchPolicy, mapJsVariables, notifyOnNetworkStatusChange, onCompleted, onError, partialRefetch, pollInterval, ssr, variables) {
+    return ApolloClient__React_Hooks_UseLazyQuery.useLazyQueryWithVariables(M, client, context, displayName, errorPolicy, fetchPolicy, mapJsVariables, notifyOnNetworkStatusChange, onCompleted, onError, partialRefetch, pollInterval, ssr, variables);
+  };
+  return {
+          refetchQueryDescription: refetchQueryDescription,
+          use: use,
+          useLazy: useLazy,
+          useLazyWithVariables: useLazyWithVariables
+        };
+}
+
+var ApolloClient;
+
+var ApolloError;
+
+var ErrorPolicy;
+
+var Graphql;
+
+var QueryHookOptions;
+
+var QueryResult;
+
+var RefetchQueryDescription;
+
+var Types;
+
+var Utils;
+
+var WatchQueryFetchPolicy;
+
+export {
+  ApolloClient ,
+  ApolloError ,
+  ErrorPolicy ,
+  Graphql ,
+  QueryHookOptions ,
+  QueryResult ,
+  RefetchQueryDescription ,
+  Types ,
+  Utils ,
+  WatchQueryFetchPolicy ,
+  Js_ ,
+  useQuery ,
+  Extend ,
+  
+}
+/* @apollo/client Not a pure module */
diff --git a/node_modules/rescript-apollo-client/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseSubscription.bs.js b/node_modules/rescript-apollo-client/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseSubscription.bs.js
new file mode 100644
index 0000000..e03d308
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseSubscription.bs.js
@@ -0,0 +1,80 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+import * as Belt_Option from "bs-platform/lib/es6/belt_Option.mjs";
+import * as Client from "@apollo/client";
+import * as ApolloClient__Utils from "../../../../ApolloClient__Utils.bs.js";
+import * as ApolloClient__React_Types from "../types/ApolloClient__React_Types.bs.js";
+import * as ApolloClient__Errors_ApolloError from "../../errors/ApolloClient__Errors_ApolloError.bs.js";
+
+var Js_ = {};
+
+function useSubscription(Operation, client, fetchPolicy, $staropt$star, onSubscriptionData, onSubscriptionComplete, shouldResubscribe, skip, variables) {
+  var mapJsVariables = $staropt$star !== undefined ? $staropt$star : (function (prim) {
+        return prim;
+      });
+  var safeParse = function (param) {
+    return ApolloClient__Utils.safeParse(Operation.parse, param);
+  };
+  var jsSubscriptionResult = Client.useSubscription(Operation.query, ApolloClient__React_Types.SubscriptionHookOptions.toJs({
+            subscription: undefined,
+            variables: variables,
+            fetchPolicy: fetchPolicy,
+            shouldResubscribe: shouldResubscribe,
+            client: client,
+            skip: skip,
+            onSubscriptionData: onSubscriptionData,
+            onSubscriptionComplete: onSubscriptionComplete
+          }, mapJsVariables, safeParse, Operation.serializeVariables));
+  return ApolloClient__Utils.useGuaranteedMemo1((function (param) {
+                return {
+                        variables: jsSubscriptionResult.variables,
+                        loading: jsSubscriptionResult.loading,
+                        data: Belt_Option.map(jsSubscriptionResult.data, Operation.parse),
+                        error: Belt_Option.map(jsSubscriptionResult.error, ApolloClient__Errors_ApolloError.fromJs)
+                      };
+              }), jsSubscriptionResult);
+}
+
+function Extend(M) {
+  var use = function (client, fetchPolicy, onSubscriptionData, onSubscriptionComplete, shouldResubscribe, skip, variables) {
+    return useSubscription(M, client, fetchPolicy, undefined, onSubscriptionData, onSubscriptionComplete, shouldResubscribe, skip, variables);
+  };
+  return {
+          use: use
+        };
+}
+
+var ApolloClient;
+
+var ApolloError;
+
+var BaseSubscriptionOptions;
+
+var FetchPolicy;
+
+var Graphql;
+
+var OnSubscriptionDataOptions;
+
+var SubscriptionHookOptions;
+
+var Types;
+
+var Utils;
+
+export {
+  ApolloClient ,
+  ApolloError ,
+  BaseSubscriptionOptions ,
+  FetchPolicy ,
+  Graphql ,
+  OnSubscriptionDataOptions ,
+  SubscriptionHookOptions ,
+  Types ,
+  Utils ,
+  Js_ ,
+  useSubscription ,
+  Extend ,
+  
+}
+/* @apollo/client Not a pure module */
diff --git a/node_modules/rescript-apollo-client/src/@apollo/client/react/types/ApolloClient__React_Types.bs.js b/node_modules/rescript-apollo-client/src/@apollo/client/react/types/ApolloClient__React_Types.bs.js
new file mode 100644
index 0000000..b40b962
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/@apollo/client/react/types/ApolloClient__React_Types.bs.js
@@ -0,0 +1,728 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+import * as Curry from "bs-platform/lib/es6/curry.mjs";
+import * as Belt_Option from "bs-platform/lib/es6/belt_Option.mjs";
+import * as Caml_option from "bs-platform/lib/es6/caml_option.mjs";
+import * as ApolloClient__Utils from "../../../../ApolloClient__Utils.bs.js";
+import * as ApolloClient__Core_Types from "../../core/ApolloClient__Core_Types.bs.js";
+import * as ApolloClient__Link_Core_Types from "../../link/core/ApolloClient__Link_Core_Types.bs.js";
+import * as ApolloClient__Core_NetworkStatus from "../../core/ApolloClient__Core_NetworkStatus.bs.js";
+import * as ApolloClient__Errors_ApolloError from "../../errors/ApolloClient__Errors_ApolloError.bs.js";
+import * as ApolloClient__Core_WatchQueryOptions from "../../core/ApolloClient__Core_WatchQueryOptions.bs.js";
+
+var Js_ = {};
+
+function toJs(t, mapJsVariables, safeParse, serializeVariables) {
+  return {
+          query: t.query,
+          displayName: t.displayName,
+          skip: t.skip,
+          onCompleted: Belt_Option.map(t.onCompleted, (function (onCompleted, jsData) {
+                  return Curry._1(onCompleted, Curry._1(safeParse, jsData));
+                })),
+          onError: Belt_Option.map(t.onError, (function (onError) {
+                  return function (jsApolloError) {
+                    return Curry._1(onError, ApolloClient__Errors_ApolloError.fromJs(jsApolloError));
+                  };
+                })),
+          client: t.client,
+          context: t.context,
+          errorPolicy: Belt_Option.map(t.errorPolicy, ApolloClient__Core_WatchQueryOptions.ErrorPolicy.toJs),
+          fetchPolicy: Belt_Option.map(t.fetchPolicy, ApolloClient__Core_WatchQueryOptions.WatchQueryFetchPolicy.toJs),
+          notifyOnNetworkStatusChange: t.notifyOnNetworkStatusChange,
+          partialRefetch: t.partialRefetch,
+          pollInterval: t.pollInterval,
+          ssr: t.ssr,
+          variables: Curry._1(mapJsVariables, Curry._1(serializeVariables, t.variables))
+        };
+}
+
+var QueryHookOptions = {
+  Js_: Js_,
+  toJs: toJs
+};
+
+function make(prim, prim$1, prim$2, prim$3, prim$4, prim$5, prim$6, prim$7, prim$8, prim$9, prim$10, prim$11, prim$12, prim$13) {
+  var tmp = {};
+  if (prim !== undefined) {
+    tmp.query = Caml_option.valFromOption(prim);
+  }
+  if (prim$1 !== undefined) {
+    tmp.displayName = Caml_option.valFromOption(prim$1);
+  }
+  if (prim$2 !== undefined) {
+    tmp.onCompleted = Caml_option.valFromOption(prim$2);
+  }
+  if (prim$3 !== undefined) {
+    tmp.onError = Caml_option.valFromOption(prim$3);
+  }
+  if (prim$4 !== undefined) {
+    tmp.client = Caml_option.valFromOption(prim$4);
+  }
+  if (prim$5 !== undefined) {
+    tmp.context = Caml_option.valFromOption(prim$5);
+  }
+  if (prim$6 !== undefined) {
+    tmp.errorPolicy = Caml_option.valFromOption(prim$6);
+  }
+  if (prim$7 !== undefined) {
+    tmp.fetchPolicy = Caml_option.valFromOption(prim$7);
+  }
+  if (prim$8 !== undefined) {
+    tmp.notifyOnNetworkStatusChange = Caml_option.valFromOption(prim$8);
+  }
+  if (prim$9 !== undefined) {
+    tmp.partialRefetch = Caml_option.valFromOption(prim$9);
+  }
+  if (prim$10 !== undefined) {
+    tmp.pollInterval = Caml_option.valFromOption(prim$10);
+  }
+  if (prim$11 !== undefined) {
+    tmp.ssr = Caml_option.valFromOption(prim$11);
+  }
+  if (prim$12 !== undefined) {
+    tmp.variables = Caml_option.valFromOption(prim$12);
+  }
+  return tmp;
+}
+
+var Js_$1 = {
+  make: make
+};
+
+function toJs$1(t, safeParse, serializeVariables) {
+  return make(t.query, t.displayName, Belt_Option.map(t.onCompleted, (function (onCompleted, jsData) {
+                    return Curry._1(onCompleted, Curry._1(safeParse, jsData));
+                  })), Belt_Option.map(t.onError, (function (onError) {
+                    return function (jsApolloError) {
+                      return Curry._1(onError, ApolloClient__Errors_ApolloError.fromJs(jsApolloError));
+                    };
+                  })), t.client, t.context, Belt_Option.map(t.errorPolicy, ApolloClient__Core_WatchQueryOptions.ErrorPolicy.toJs), Belt_Option.map(t.fetchPolicy, ApolloClient__Core_WatchQueryOptions.WatchQueryFetchPolicy.toJs), t.notifyOnNetworkStatusChange, t.partialRefetch, t.pollInterval, t.ssr, Belt_Option.map(t.variables, serializeVariables), undefined);
+}
+
+var LazyQueryHookOptions = {
+  Js_: Js_$1,
+  toJs: toJs$1
+};
+
+var Js_$2 = {};
+
+var QueryLazyOptions = {
+  Js_: Js_$2
+};
+
+var Js_$3 = {};
+
+function fromJs(js, safeParse, serialize, serializeVariables) {
+  var match = ApolloClient__Utils.safeParseAndLiftToCommonResultProps(js.data, undefined, Belt_Option.map(js.error, ApolloClient__Errors_ApolloError.fromJs), safeParse);
+  var previousData = Belt_Option.map(js.previousData, safeParse);
+  var fetchMore = function (context, mapJsVariablesOpt, variables, updateQuery, param) {
+    var mapJsVariables = mapJsVariablesOpt !== undefined ? mapJsVariablesOpt : (function (prim) {
+          return prim;
+        });
+    var parseErrorDuringCall = {
+      contents: undefined
+    };
+    var tmp = {};
+    var tmp$1 = Belt_Option.map(variables, (function (v) {
+            return Curry._1(mapJsVariables, Curry._1(serializeVariables, v));
+          }));
+    if (tmp$1 !== undefined) {
+      tmp.variables = Caml_option.valFromOption(tmp$1);
+    }
+    if (context !== undefined) {
+      tmp.context = Caml_option.valFromOption(context);
+    }
+    var tmp$2 = Belt_Option.map(updateQuery, (function (updateQuery) {
+            return function (previousResult, jsFetchMoreOptions) {
+              var match = Curry._1(safeParse, previousResult);
+              var match$1 = Belt_Option.map(jsFetchMoreOptions.fetchMoreResult, safeParse);
+              if (match.TAG === /* Ok */0) {
+                var previousResult$1 = match._0;
+                if (match$1 === undefined) {
+                  return Curry._1(serialize, Curry._2(updateQuery, previousResult$1, {
+                                  fetchMoreResult: undefined,
+                                  variables: jsFetchMoreOptions.variables
+                                }));
+                }
+                if (match$1.TAG === /* Ok */0) {
+                  return Curry._1(serialize, Curry._2(updateQuery, previousResult$1, {
+                                  fetchMoreResult: Caml_option.some(match$1._0),
+                                  variables: jsFetchMoreOptions.variables
+                                }));
+                }
+                parseErrorDuringCall.contents = {
+                  TAG: /* Error */1,
+                  _0: match$1._0
+                };
+                return previousResult;
+              }
+              parseErrorDuringCall.contents = {
+                TAG: /* Error */1,
+                _0: match._0
+              };
+              return previousResult;
+            };
+          }));
+    if (tmp$2 !== undefined) {
+      tmp.updateQuery = Caml_option.valFromOption(tmp$2);
+    }
+    var __x = js.fetchMore(tmp);
+    var __x$1 = __x.then(function (jsApolloQueryResult) {
+          var match = parseErrorDuringCall.contents;
+          var tmp;
+          tmp = match !== undefined && match.TAG !== /* Ok */0 ? ({
+                TAG: /* Error */1,
+                _0: ApolloClient__Errors_ApolloError.make(undefined, {
+                      TAG: /* ParseError */3,
+                      _0: match._0
+                    }, undefined, undefined, undefined)
+              }) : ApolloClient__Core_Types.ApolloQueryResult.toResult(ApolloClient__Core_Types.ApolloQueryResult.fromJs(jsApolloQueryResult, safeParse));
+          return Promise.resolve(tmp);
+        });
+    return __x$1.catch(function (error) {
+                return Promise.resolve({
+                            TAG: /* Error */1,
+                            _0: ApolloClient__Errors_ApolloError.make(undefined, {
+                                  TAG: /* FetchFailure */0,
+                                  _0: ApolloClient__Utils.ensureError(error)
+                                }, undefined, undefined, undefined)
+                          });
+              });
+  };
+  var refetch = function (mapJsVariablesOpt, variables, param) {
+    var mapJsVariables = mapJsVariablesOpt !== undefined ? mapJsVariablesOpt : (function (prim) {
+          return prim;
+        });
+    var __x = js.refetch(Belt_Option.map(variables, (function (v) {
+                return Curry._1(mapJsVariables, Curry._1(serializeVariables, v));
+              })));
+    var __x$1 = __x.then(function (jsApolloQueryResult) {
+          return Promise.resolve(ApolloClient__Core_Types.ApolloQueryResult.toResult(ApolloClient__Core_Types.ApolloQueryResult.fromJs(jsApolloQueryResult, safeParse)));
+        });
+    return __x$1.catch(function (error) {
+                return Promise.resolve({
+                            TAG: /* Error */1,
+                            _0: ApolloClient__Errors_ApolloError.make(undefined, {
+                                  TAG: /* FetchFailure */0,
+                                  _0: ApolloClient__Utils.ensureError(error)
+                                }, undefined, undefined, undefined)
+                          });
+              });
+  };
+  var startPolling = function (pollInterval) {
+    js.startPolling(pollInterval);
+    
+  };
+  var stopPolling = function (param) {
+    js.stopPolling();
+    
+  };
+  var subscribeToMore = function (Operation, updateQuery, onError, context, variables) {
+    var subscriptionSafeParse = function (param) {
+      return ApolloClient__Utils.safeParse(Operation.parse, param);
+    };
+    js.subscribeToMore(ApolloClient__Core_WatchQueryOptions.SubscribeToMoreOptions.toJs({
+              document: Operation.query,
+              variables: variables,
+              updateQuery: updateQuery,
+              onError: Belt_Option.map(onError, (function (onError, error) {
+                      return Curry._1(onError, {
+                                  TAG: /* SubscriptionError */1,
+                                  _0: error
+                                });
+                    })),
+              context: context
+            }, (function (parseError) {
+                if (onError !== undefined) {
+                  return Curry._1(onError, {
+                              TAG: /* ParseError */0,
+                              _0: parseError
+                            });
+                }
+                
+              }), safeParse, serialize, subscriptionSafeParse));
+    
+  };
+  var updateQuery = function (updateQueryFn) {
+    js.updateQuery(function (jsPreviousData, options) {
+          return Curry._1(serialize, Curry._2(updateQueryFn, Curry._1(safeParse, jsPreviousData), options));
+        });
+    
+  };
+  return {
+          called: js.called,
+          client: js.client,
+          data: match[0],
+          previousData: previousData,
+          error: match[1],
+          loading: js.loading,
+          networkStatus: ApolloClient__Core_NetworkStatus.NetworkStatus.fromJs(js.networkStatus),
+          fetchMore: fetchMore,
+          refetch: refetch,
+          startPolling: startPolling,
+          stopPolling: stopPolling,
+          subscribeToMore: subscribeToMore,
+          updateQuery: updateQuery
+        };
+}
+
+var QueryResult = {
+  Js_: Js_$3,
+  fromJs: fromJs
+};
+
+var Js_$4 = {};
+
+function fromJs$1(js) {
+  return {
+          loading: js.loading,
+          networkStatus: ApolloClient__Core_NetworkStatus.NetworkStatus.fromJs(js.networkStatus),
+          called: js.called
+        };
+}
+
+var UnexecutedLazyResult = {
+  Js_: Js_$4,
+  fromJs: fromJs$1
+};
+
+function unexecutedLazyResult(v) {
+  return v;
+}
+
+function queryResult(v) {
+  return v;
+}
+
+function classify(v) {
+  if ((function (value) { return "client" in value})(v)) {
+    return {
+            TAG: /* QueryResult */1,
+            _0: v
+          };
+  } else {
+    return {
+            TAG: /* UnexecutedLazyResult */0,
+            _0: v
+          };
+  }
+}
+
+var Union = {
+  unexecutedLazyResult: unexecutedLazyResult,
+  queryResult: queryResult,
+  classify: classify
+};
+
+var Js_$5 = {
+  Union: Union
+};
+
+function fromJs$2(js, safeParse, serialize, serializeVariables) {
+  var v = classify(js);
+  if (v.TAG === /* UnexecutedLazyResult */0) {
+    return {
+            TAG: /* Unexecuted */1,
+            _0: fromJs$1(v._0)
+          };
+  } else {
+    return {
+            TAG: /* Executed */0,
+            _0: fromJs(v._0, safeParse, serialize, serializeVariables)
+          };
+  }
+}
+
+var LazyQueryResult = {
+  Js_: Js_$5,
+  fromJs: fromJs$2
+};
+
+var Js_$6 = {};
+
+function fromJs$3(param, safeParse, serialize, serializeVariables) {
+  var jsExecuteQuery = param[0];
+  return [
+          (function (context, mapJsVariablesOpt, variables) {
+              var mapJsVariables = mapJsVariablesOpt !== undefined ? mapJsVariablesOpt : (function (prim) {
+                    return prim;
+                  });
+              return Curry._1(jsExecuteQuery, {
+                          variables: Curry._1(mapJsVariables, Curry._1(serializeVariables, variables)),
+                          context: context
+                        });
+            }),
+          fromJs$2(param[1], safeParse, serialize, serializeVariables)
+        ];
+}
+
+var QueryTuple = {
+  Js_: Js_$6,
+  fromJs: fromJs$3
+};
+
+var Js_$7 = {};
+
+function fromJs$4(param, mapJsVariables, safeParse, serialize, serializeVariables, variables) {
+  var jsExecuteQuery = param[0];
+  return [
+          (function (context, param) {
+              return Curry._1(jsExecuteQuery, {
+                          variables: Curry._1(mapJsVariables, Curry._1(serializeVariables, variables)),
+                          context: context
+                        });
+            }),
+          fromJs$2(param[1], safeParse, serialize, serializeVariables)
+        ];
+}
+
+var QueryTuple__noVariables = {
+  Js_: Js_$7,
+  fromJs: fromJs$4
+};
+
+var Js_$8 = {};
+
+var BaseMutationOptions = {
+  Js_: Js_$8
+};
+
+function make$1(prim, prim$1, prim$2, prim$3, prim$4, prim$5, prim$6, prim$7, prim$8, prim$9, prim$10, prim$11, prim$12, prim$13) {
+  var tmp = {};
+  if (prim !== undefined) {
+    tmp.mutation = Caml_option.valFromOption(prim);
+  }
+  if (prim$1 !== undefined) {
+    tmp.awaitRefetchQueries = Caml_option.valFromOption(prim$1);
+  }
+  if (prim$2 !== undefined) {
+    tmp.client = Caml_option.valFromOption(prim$2);
+  }
+  if (prim$3 !== undefined) {
+    tmp.context = Caml_option.valFromOption(prim$3);
+  }
+  if (prim$4 !== undefined) {
+    tmp.errorPolicy = Caml_option.valFromOption(prim$4);
+  }
+  if (prim$5 !== undefined) {
+    tmp.fetchPolicy = Caml_option.valFromOption(prim$5);
+  }
+  if (prim$6 !== undefined) {
+    tmp.ignoreResults = Caml_option.valFromOption(prim$6);
+  }
+  if (prim$7 !== undefined) {
+    tmp.notifyOnNetworkStatusChange = Caml_option.valFromOption(prim$7);
+  }
+  if (prim$8 !== undefined) {
+    tmp.onError = Caml_option.valFromOption(prim$8);
+  }
+  if (prim$9 !== undefined) {
+    tmp.optimisticResponse = Caml_option.valFromOption(prim$9);
+  }
+  if (prim$10 !== undefined) {
+    tmp.refetchQueries = Caml_option.valFromOption(prim$10);
+  }
+  if (prim$11 !== undefined) {
+    tmp.update = Caml_option.valFromOption(prim$11);
+  }
+  if (prim$12 !== undefined) {
+    tmp.variables = Caml_option.valFromOption(prim$12);
+  }
+  return tmp;
+}
+
+var Js_$9 = {
+  make: make$1
+};
+
+function toJs$2(t, mapJsVariables, safeParse, serialize, serializeVariables) {
+  var func = ApolloClient__Core_WatchQueryOptions.MutationUpdaterFn.toJs;
+  return make$1(t.mutation, t.awaitRefetchQueries, t.client, t.context, Belt_Option.map(t.errorPolicy, ApolloClient__Core_WatchQueryOptions.ErrorPolicy.toJs), Belt_Option.map(t.fetchPolicy, ApolloClient__Core_WatchQueryOptions.FetchPolicy__noCacheExtracted.toJs), t.ignoreResults, t.notifyOnNetworkStatusChange, Belt_Option.map(t.onError, (function (onError) {
+                    return function (jsApolloError) {
+                      return Curry._1(onError, ApolloClient__Errors_ApolloError.fromJs(jsApolloError));
+                    };
+                  })), Belt_Option.map(t.optimisticResponse, (function (optimisticResponse, variables) {
+                    return Curry._1(serialize, Curry._1(optimisticResponse, variables));
+                  })), Belt_Option.map(t.refetchQueries, ApolloClient__Core_WatchQueryOptions.RefetchQueryDescription.toJs), Belt_Option.map(t.update, (function (param) {
+                    return Curry._2(func, param, safeParse);
+                  })), Belt_Option.map(t.variables, (function (v) {
+                    return Curry._1(mapJsVariables, Curry._1(serializeVariables, v));
+                  })), undefined);
+}
+
+var MutationHookOptions = {
+  Js_: Js_$9,
+  toJs: toJs$2
+};
+
+var Js_$10 = {};
+
+function fromJs$5(js, safeParse) {
+  var match = ApolloClient__Utils.safeParseAndLiftToCommonResultProps(Caml_option.nullable_to_opt(js.data), undefined, Belt_Option.map(js.error, ApolloClient__Errors_ApolloError.fromJs), safeParse);
+  return {
+          data: match[0],
+          error: match[1],
+          loading: js.loading,
+          called: js.called,
+          client: js.client
+        };
+}
+
+var MutationResult = {
+  Js_: Js_$10,
+  fromJs: fromJs$5
+};
+
+var Js_$11 = {};
+
+function toJs$3(t, mapJsVariables, safeParse, serialize, serializeVariables) {
+  var func = ApolloClient__Core_WatchQueryOptions.MutationUpdaterFn.toJs;
+  return {
+          variables: Curry._1(mapJsVariables, Curry._1(serializeVariables, t.variables)),
+          optimisticResponse: Belt_Option.map(t.optimisticResponse, (function (optimisticResponse) {
+                  return function (variables) {
+                    return Curry._1(serialize, Curry._1(optimisticResponse, variables));
+                  };
+                })),
+          refetchQueries: Belt_Option.map(t.refetchQueries, ApolloClient__Core_WatchQueryOptions.RefetchQueryDescription.toJs),
+          awaitRefetchQueries: t.awaitRefetchQueries,
+          update: Belt_Option.map(t.update, (function (param) {
+                  return Curry._2(func, param, safeParse);
+                })),
+          context: t.context,
+          fetchPolicy: Belt_Option.map(t.fetchPolicy, ApolloClient__Core_WatchQueryOptions.WatchQueryFetchPolicy.toJs)
+        };
+}
+
+var MutationFunctionOptions = {
+  Js_: Js_$11,
+  toJs: toJs$3
+};
+
+var Js_$12 = {};
+
+function fromJs$6(param, safeParse, serialize, serializeVariables) {
+  var jsMutationFn = param[0];
+  var mutationFn = function (awaitRefetchQueries, context, fetchPolicy, mapJsVariablesOpt, optimisticResponse, refetchQueries, update, variables) {
+    var mapJsVariables = mapJsVariablesOpt !== undefined ? mapJsVariablesOpt : (function (prim) {
+          return prim;
+        });
+    var __x = Curry._1(jsMutationFn, toJs$3({
+              variables: variables,
+              optimisticResponse: optimisticResponse,
+              refetchQueries: refetchQueries,
+              awaitRefetchQueries: awaitRefetchQueries,
+              update: update,
+              context: context,
+              fetchPolicy: fetchPolicy
+            }, mapJsVariables, safeParse, serialize, serializeVariables));
+    var __x$1 = __x.then(function (jsFetchResult) {
+          return Promise.resolve(ApolloClient__Link_Core_Types.FetchResult.toResult(ApolloClient__Link_Core_Types.FetchResult.fromJs(jsFetchResult, safeParse)));
+        });
+    return __x$1.catch(function (error) {
+                return Promise.resolve({
+                            TAG: /* Error */1,
+                            _0: ApolloClient__Errors_ApolloError.make(undefined, {
+                                  TAG: /* FetchFailure */0,
+                                  _0: ApolloClient__Utils.ensureError(error)
+                                }, undefined, undefined, undefined)
+                          });
+              });
+  };
+  return [
+          mutationFn,
+          fromJs$5(param[1], safeParse)
+        ];
+}
+
+var MutationTuple = {
+  Js_: Js_$12,
+  fromJs: fromJs$6
+};
+
+var Js_$13 = {};
+
+function fromJs$7(param, mapJsVariables, safeParse, serialize, serializeVariables, variables) {
+  var jsMutationFn = param[0];
+  var mutationFn = function (optimisticResponse, refetchQueries, awaitRefetchQueries, update, context, fetchPolicy, param) {
+    var __x = Curry._1(jsMutationFn, toJs$3({
+              variables: variables,
+              optimisticResponse: optimisticResponse,
+              refetchQueries: refetchQueries,
+              awaitRefetchQueries: awaitRefetchQueries,
+              update: update,
+              context: context,
+              fetchPolicy: fetchPolicy
+            }, mapJsVariables, safeParse, serialize, serializeVariables));
+    var __x$1 = __x.then(function (jsFetchResult) {
+          return Promise.resolve(ApolloClient__Link_Core_Types.FetchResult.toResult(ApolloClient__Link_Core_Types.FetchResult.fromJs(jsFetchResult, safeParse)));
+        });
+    return __x$1.catch(function (error) {
+                return Promise.resolve({
+                            TAG: /* Error */1,
+                            _0: ApolloClient__Errors_ApolloError.make(undefined, {
+                                  TAG: /* FetchFailure */0,
+                                  _0: ApolloClient__Utils.ensureError(error)
+                                }, undefined, undefined, undefined)
+                          });
+              });
+  };
+  return [
+          mutationFn,
+          fromJs$5(param[1], safeParse)
+        ];
+}
+
+var MutationTuple__noVariables = {
+  Js_: Js_$13,
+  fromJs: fromJs$7
+};
+
+var Js_$14 = {};
+
+function fromJs$8(js, safeParse) {
+  var match = ApolloClient__Utils.safeParseAndLiftToCommonResultProps(js.data, undefined, Belt_Option.map(js.error, ApolloClient__Errors_ApolloError.fromJs), safeParse);
+  return {
+          loading: js.loading,
+          data: match[0],
+          error: match[1]
+        };
+}
+
+var SubscriptionResult = {
+  Js_: Js_$14,
+  fromJs: fromJs$8
+};
+
+var Js_$15 = {};
+
+function fromJs$9(js, safeParse) {
+  return {
+          client: js.client,
+          subscriptionData: fromJs$8(js.subscriptionData, safeParse)
+        };
+}
+
+var OnSubscriptionDataOptions = {
+  Js_: Js_$15,
+  fromJs: fromJs$9
+};
+
+var Js_$16 = {};
+
+function fromJs$10(js) {
+  return {
+          variables: js.variables,
+          fetchPolicy: js.fetchPolicy,
+          shouldResubscribe: js.shouldResubscribe,
+          client: js.client,
+          skip: js.skip,
+          onSubscriptionData: js.onSubscriptionData,
+          onSubscriptionComplete: js.onSubscriptionComplete
+        };
+}
+
+var BaseSubscriptionOptions = {
+  Js_: Js_$16,
+  fromJs: fromJs$10
+};
+
+var Js_$17 = {};
+
+function toJs$4(t, mapJsVariables, safeParse, serializeVariables) {
+  return {
+          subscription: t.subscription,
+          variables: Curry._1(mapJsVariables, Curry._1(serializeVariables, t.variables)),
+          fetchPolicy: t.fetchPolicy,
+          shouldResubscribe: Belt_Option.map(t.shouldResubscribe, (function (shouldResubscribe) {
+                  return function (jsBaseSubscriptionOptions) {
+                    return Curry._1(shouldResubscribe, fromJs$10(jsBaseSubscriptionOptions));
+                  };
+                })),
+          client: t.client,
+          skip: t.skip,
+          onSubscriptionData: Belt_Option.map(t.onSubscriptionData, (function (onSubscriptionData) {
+                  return function (jsOnSubscriptionDataOptions) {
+                    return Curry._1(onSubscriptionData, fromJs$9(jsOnSubscriptionDataOptions, safeParse));
+                  };
+                })),
+          onSubscriptionComplete: t.onSubscriptionComplete
+        };
+}
+
+var SubscriptionHookOptions = {
+  Js_: Js_$17,
+  toJs: toJs$4
+};
+
+var ApolloClient;
+
+var ApolloError;
+
+var ApolloQueryResult;
+
+var ErrorPolicy;
+
+var FetchPolicy;
+
+var FetchPolicy__noCacheExtracted;
+
+var FetchResult;
+
+var Graphql;
+
+var MutationUpdaterFn;
+
+var NetworkStatus;
+
+var RefetchQueryDescription;
+
+var SubscribeToMoreOptions;
+
+var Types;
+
+var UpdateQueryFn;
+
+var Utils;
+
+var WatchQueryFetchPolicy;
+
+export {
+  ApolloClient ,
+  ApolloError ,
+  ApolloQueryResult ,
+  ErrorPolicy ,
+  FetchPolicy ,
+  FetchPolicy__noCacheExtracted ,
+  FetchResult ,
+  Graphql ,
+  MutationUpdaterFn ,
+  NetworkStatus ,
+  RefetchQueryDescription ,
+  SubscribeToMoreOptions ,
+  Types ,
+  UpdateQueryFn ,
+  Utils ,
+  WatchQueryFetchPolicy ,
+  QueryHookOptions ,
+  LazyQueryHookOptions ,
+  QueryLazyOptions ,
+  QueryResult ,
+  UnexecutedLazyResult ,
+  LazyQueryResult ,
+  QueryTuple ,
+  QueryTuple__noVariables ,
+  BaseMutationOptions ,
+  MutationHookOptions ,
+  MutationResult ,
+  MutationFunctionOptions ,
+  MutationTuple ,
+  MutationTuple__noVariables ,
+  SubscriptionResult ,
+  OnSubscriptionDataOptions ,
+  BaseSubscriptionOptions ,
+  SubscriptionHookOptions ,
+  
+}
+/* ApolloClient__Utils Not a pure module */
diff --git a/node_modules/rescript-apollo-client/src/@apollo/client/utilities/ApolloClient__Utilities.bs.js b/node_modules/rescript-apollo-client/src/@apollo/client/utilities/ApolloClient__Utilities.bs.js
new file mode 100644
index 0000000..d90545a
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/@apollo/client/utilities/ApolloClient__Utilities.bs.js
@@ -0,0 +1,22 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+import * as Utilities from "@apollo/client/utilities";
+
+function getOperationDefinition(prim) {
+  return Utilities.getOperationDefinition(prim);
+}
+
+var Graphql;
+
+var Observables;
+
+var Policies;
+
+export {
+  getOperationDefinition ,
+  Graphql ,
+  Observables ,
+  Policies ,
+  
+}
+/* @apollo/client/utilities Not a pure module */
diff --git a/node_modules/rescript-apollo-client/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql.bs.js b/node_modules/rescript-apollo-client/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql.bs.js
new file mode 100644
index 0000000..9fc840a
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql.bs.js
@@ -0,0 +1,16 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+
+var Fragments;
+
+var GetFromAst;
+
+var StoreUtils;
+
+export {
+  Fragments ,
+  GetFromAst ,
+  StoreUtils ,
+  
+}
+/* No side effect */
diff --git a/node_modules/rescript-apollo-client/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_Fragments.bs.js b/node_modules/rescript-apollo-client/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_Fragments.bs.js
new file mode 100644
index 0000000..c8120c1
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_Fragments.bs.js
@@ -0,0 +1,17 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+
+var Js_ = {};
+
+var FragmentMap = {
+  Js_: Js_
+};
+
+var FragmentDefinitionNode;
+
+export {
+  FragmentDefinitionNode ,
+  FragmentMap ,
+  
+}
+/* No side effect */
diff --git a/node_modules/rescript-apollo-client/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_GetFromAst.bs.js b/node_modules/rescript-apollo-client/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_GetFromAst.bs.js
new file mode 100644
index 0000000..b15ff2a
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_GetFromAst.bs.js
@@ -0,0 +1,10 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+
+var Graphql;
+
+export {
+  Graphql ,
+  
+}
+/* No side effect */
diff --git a/node_modules/rescript-apollo-client/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_StoreUtils.bs.js b/node_modules/rescript-apollo-client/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_StoreUtils.bs.js
new file mode 100644
index 0000000..c54b381
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/@apollo/client/utilities/graphql/ApolloClient__Utilities_Graphql_StoreUtils.bs.js
@@ -0,0 +1,14 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+
+var Js_ = {};
+
+var StoreValue = {
+  Js_: Js_
+};
+
+export {
+  StoreValue ,
+  
+}
+/* No side effect */
diff --git a/node_modules/rescript-apollo-client/src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables.bs.js b/node_modules/rescript-apollo-client/src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables.bs.js
new file mode 100644
index 0000000..bc80404
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables.bs.js
@@ -0,0 +1,10 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+
+var Observable;
+
+export {
+  Observable ,
+  
+}
+/* No side effect */
diff --git a/node_modules/rescript-apollo-client/src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables_Observable.bs.js b/node_modules/rescript-apollo-client/src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables_Observable.bs.js
new file mode 100644
index 0000000..bc80404
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/@apollo/client/utilities/observables/ApolloClient__Utilities_Observables_Observable.bs.js
@@ -0,0 +1,10 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+
+var Observable;
+
+export {
+  Observable ,
+  
+}
+/* No side effect */
diff --git a/node_modules/rescript-apollo-client/src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies.bs.js b/node_modules/rescript-apollo-client/src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies.bs.js
new file mode 100644
index 0000000..05b732c
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies.bs.js
@@ -0,0 +1,10 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+
+var Pagination;
+
+export {
+  Pagination ,
+  
+}
+/* No side effect */
diff --git a/node_modules/rescript-apollo-client/src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies_Pagination.bs.js b/node_modules/rescript-apollo-client/src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies_Pagination.bs.js
new file mode 100644
index 0000000..eec2ca0
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/@apollo/client/utilities/policies/ApolloClient__Utilities_Policies_Pagination.bs.js
@@ -0,0 +1,34 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+import * as Caml_option from "bs-platform/lib/es6/caml_option.mjs";
+import * as Utilities from "@apollo/client/utilities";
+import * as ApolloClient__Cache_InMemory_Policies_FieldPolicy from "../../cache/inmemory/ApolloClient__Cache_InMemory_Policies_FieldPolicy.bs.js";
+
+var Js_ = {};
+
+function concatPagination(keyArgs) {
+  return Utilities.concatPagination(Caml_option.some(ApolloClient__Cache_InMemory_Policies_FieldPolicy.FieldPolicy_KeyArgs.toJs(keyArgs)));
+}
+
+function offsetLimitPagination(keyArgs) {
+  return Utilities.offsetLimitPagination(Caml_option.some(ApolloClient__Cache_InMemory_Policies_FieldPolicy.FieldPolicy_KeyArgs.toJs(keyArgs)));
+}
+
+function relayStylePagination(keyArgs) {
+  return Utilities.relayStylePagination(Caml_option.some(ApolloClient__Cache_InMemory_Policies_FieldPolicy.FieldPolicy_KeyArgs.toJs(keyArgs)));
+}
+
+var FieldPolicy;
+
+var KeyArgs;
+
+export {
+  FieldPolicy ,
+  KeyArgs ,
+  Js_ ,
+  concatPagination ,
+  offsetLimitPagination ,
+  relayStylePagination ,
+  
+}
+/* @apollo/client/utilities Not a pure module */
diff --git a/node_modules/rescript-apollo-client/src/ApolloClient.bs.js b/node_modules/rescript-apollo-client/src/ApolloClient.bs.js
new file mode 100644
index 0000000..eedb6ea
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/ApolloClient.bs.js
@@ -0,0 +1,44 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+import * as ReasonMLCommunity__ApolloClient from "./ReasonMLCommunity__ApolloClient.bs.js";
+
+var make = ReasonMLCommunity__ApolloClient.make;
+
+var DefaultWatchQueryOptions = ReasonMLCommunity__ApolloClient.DefaultWatchQueryOptions;
+
+var DefaultQueryOptions = ReasonMLCommunity__ApolloClient.DefaultQueryOptions;
+
+var DefaultMutateOptions = ReasonMLCommunity__ApolloClient.DefaultMutateOptions;
+
+var DefaultOptions = ReasonMLCommunity__ApolloClient.DefaultOptions;
+
+var React = ReasonMLCommunity__ApolloClient.React;
+
+var Cache = ReasonMLCommunity__ApolloClient.Cache;
+
+var Link = ReasonMLCommunity__ApolloClient.Link;
+
+var Utilities = ReasonMLCommunity__ApolloClient.Utilities;
+
+var Bindings = ReasonMLCommunity__ApolloClient.Bindings;
+
+var GraphQL_PPX = ReasonMLCommunity__ApolloClient.GraphQL_PPX;
+
+var Types = ReasonMLCommunity__ApolloClient.Types;
+
+export {
+  make ,
+  DefaultWatchQueryOptions ,
+  DefaultQueryOptions ,
+  DefaultMutateOptions ,
+  DefaultOptions ,
+  React ,
+  Cache ,
+  Link ,
+  Utilities ,
+  Bindings ,
+  GraphQL_PPX ,
+  Types ,
+  
+}
+/* ReasonMLCommunity__ApolloClient Not a pure module */
diff --git a/node_modules/rescript-apollo-client/src/ApolloClient__Types.bs.js b/node_modules/rescript-apollo-client/src/ApolloClient__Types.bs.js
new file mode 100644
index 0000000..b15ff2a
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/ApolloClient__Types.bs.js
@@ -0,0 +1,10 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+
+var Graphql;
+
+export {
+  Graphql ,
+  
+}
+/* No side effect */
diff --git a/node_modules/rescript-apollo-client/src/ApolloClient__Utils.bs.js b/node_modules/rescript-apollo-client/src/ApolloClient__Utils.bs.js
new file mode 100644
index 0000000..876a6f0
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/ApolloClient__Utils.bs.js
@@ -0,0 +1,96 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+import * as Curry from "bs-platform/lib/es6/curry.mjs";
+import * as React from "react";
+import * as Js_exn from "bs-platform/lib/es6/js_exn.mjs";
+import * as Belt_Option from "bs-platform/lib/es6/belt_Option.mjs";
+import * as Caml_option from "bs-platform/lib/es6/caml_option.mjs";
+import * as Caml_js_exceptions from "bs-platform/lib/es6/caml_js_exceptions.mjs";
+import * as ApolloClient__Errors_ApolloError from "./@apollo/client/errors/ApolloClient__Errors_ApolloError.bs.js";
+
+function safeParse(parse, jsData) {
+  var data;
+  try {
+    data = Curry._1(parse, jsData);
+  }
+  catch (raw_error){
+    var error = Caml_js_exceptions.internalToOCamlException(raw_error);
+    if (error.RE_EXN_ID === Js_exn.$$Error) {
+      return {
+              TAG: /* Error */1,
+              _0: {
+                value: jsData,
+                error: error._1
+              }
+            };
+    }
+    throw error;
+  }
+  return {
+          TAG: /* Ok */0,
+          _0: data
+        };
+}
+
+function safeParseAndLiftToCommonResultProps(jsData, graphQLErrors, apolloError, safeParse) {
+  var existingError = apolloError !== undefined ? apolloError : (
+      graphQLErrors !== undefined ? ApolloClient__Errors_ApolloError.make(graphQLErrors, undefined, undefined, undefined, undefined) : undefined
+    );
+  var match = Belt_Option.map(jsData, Curry.__1(safeParse));
+  if (match !== undefined) {
+    if (match.TAG === /* Ok */0) {
+      return [
+              Caml_option.some(match._0),
+              existingError
+            ];
+    } else if (Belt_Option.isSome(existingError)) {
+      return [
+              undefined,
+              existingError
+            ];
+    } else {
+      return [
+              undefined,
+              ApolloClient__Errors_ApolloError.make(graphQLErrors, {
+                    TAG: /* ParseError */3,
+                    _0: match._0
+                  }, undefined, undefined, undefined)
+            ];
+    }
+  } else {
+    return [
+            undefined,
+            existingError
+          ];
+  }
+}
+
+function useGuaranteedMemo1(f, dependency) {
+  var value = React.useRef(Curry._1(f, undefined));
+  var previousDependency = React.useRef(dependency);
+  if (dependency !== previousDependency.current) {
+    value.current = Curry._1(f, undefined);
+    previousDependency.current = dependency;
+  }
+  return value.current;
+}
+
+var ApolloError;
+
+var Graphql;
+
+var Types;
+
+var ensureError = ApolloClient__Errors_ApolloError.ensureError;
+
+export {
+  ApolloError ,
+  Graphql ,
+  Types ,
+  ensureError ,
+  safeParse ,
+  safeParseAndLiftToCommonResultProps ,
+  useGuaranteedMemo1 ,
+  
+}
+/* react Not a pure module */
diff --git a/node_modules/rescript-apollo-client/src/ReasonMLCommunity__ApolloClient.bs.js b/node_modules/rescript-apollo-client/src/ReasonMLCommunity__ApolloClient.bs.js
new file mode 100644
index 0000000..0cad97f
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/ReasonMLCommunity__ApolloClient.bs.js
@@ -0,0 +1,159 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+import * as Client from "@apollo/client";
+import * as ApolloClient__Core_ApolloClient from "./@apollo/client/core/ApolloClient__Core_ApolloClient.bs.js";
+import * as ApolloClient__Link_Core_ApolloLink from "./@apollo/client/link/core/ApolloClient__Link_Core_ApolloLink.bs.js";
+import * as ApolloClient__React_Hooks_UseQuery from "./@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.bs.js";
+import * as ApolloClient__React_Hooks_UseMutation from "./@apollo/client/react/hooks/ApolloClient__React_Hooks_UseMutation.bs.js";
+import * as ApolloClient__React_Hooks_UseLazyQuery from "./@apollo/client/react/hooks/ApolloClient__React_Hooks_UseLazyQuery.bs.js";
+import * as ApolloClient__Cache_InMemory_ReactiveVars from "./@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_ReactiveVars.bs.js";
+import * as ApolloClient__React_Hooks_UseSubscription from "./@apollo/client/react/hooks/ApolloClient__React_Hooks_UseSubscription.bs.js";
+
+function useApolloClient(prim) {
+  return Client.useApolloClient();
+}
+
+var React = {
+  ApolloProvider: undefined,
+  useApolloClient: useApolloClient,
+  useMutation: ApolloClient__React_Hooks_UseMutation.useMutation,
+  useMutationWithVariables: ApolloClient__React_Hooks_UseMutation.useMutationWithVariables,
+  useLazyQuery: ApolloClient__React_Hooks_UseLazyQuery.useLazyQuery,
+  useLazyQueryWithVariables: ApolloClient__React_Hooks_UseLazyQuery.useLazyQueryWithVariables,
+  useQuery: ApolloClient__React_Hooks_UseQuery.useQuery,
+  useSubscription: ApolloClient__React_Hooks_UseSubscription.useSubscription
+};
+
+var Cache = {
+  InMemoryCache: undefined,
+  makeVar: ApolloClient__Cache_InMemory_ReactiveVars.makeVar
+};
+
+function concat(prim, prim$1) {
+  return Client.ApolloLink.concat(prim, prim$1);
+}
+
+function execute(prim, prim$1) {
+  return Client.ApolloLink.execute(prim, prim$1);
+}
+
+function empty(prim) {
+  return Client.ApolloLink.empty();
+}
+
+function from(prim) {
+  return Client.ApolloLink.from(prim);
+}
+
+function split(prim, prim$1, prim$2) {
+  return Client.ApolloLink.split(prim, prim$1, prim$2);
+}
+
+var Link = {
+  ContextLink: undefined,
+  ErrorLink: undefined,
+  HttpLink: undefined,
+  WebSocketLink: undefined,
+  concat: concat,
+  execute: execute,
+  empty: empty,
+  make: ApolloClient__Link_Core_ApolloLink.make,
+  from: from,
+  split: split
+};
+
+var Bindings = {
+  Client: undefined,
+  Graphql: undefined,
+  SubscriptionTransportWs: undefined,
+  ZenObservable: undefined
+};
+
+var GraphQL_PPX = {
+  ExtendMutation: undefined,
+  ExtendQuery: undefined,
+  ExtendSubscription: undefined
+};
+
+var Types = {
+  ApolloError: undefined,
+  ApolloQueryResult: undefined,
+  ApolloLink: undefined,
+  ApolloCache: undefined,
+  BaseSubscriptionOptions: undefined,
+  ConnectionParamsOptions: undefined,
+  DataProxy: undefined,
+  ErrorPolicy: undefined,
+  ErrorResponse: undefined,
+  FetchPolicy: undefined,
+  FetchPolicy__noCacheExtracted: undefined,
+  FetchResult: undefined,
+  FieldPolicy: undefined,
+  FieldReadFunction: undefined,
+  FieldMergeFunction: undefined,
+  FragmentMatcher: undefined,
+  GraphqlError: undefined,
+  GraphQLRequest: undefined,
+  KeyArgs: undefined,
+  KeySpecifier: undefined,
+  KeyFieldsFunction: undefined,
+  LazyQueryHookOptions: undefined,
+  MutationHookOptions: undefined,
+  MutationOptions: undefined,
+  MutationQueryReducersMap: undefined,
+  MutationTuple: undefined,
+  MutationTuple__noVariables: undefined,
+  MutationUpdaterFn: undefined,
+  Observable: undefined,
+  ObservableQuery: undefined,
+  OnSubscriptionDataOptions: undefined,
+  Operation: undefined,
+  OperationVariables: undefined,
+  QueryHookOptions: undefined,
+  QueryOptions: undefined,
+  QueryTuple: undefined,
+  QueryTuple__noVariables: undefined,
+  QueryResult: undefined,
+  PossibleTypesMap: undefined,
+  PureQueryOptions: undefined,
+  ReactiveVar: undefined,
+  RefetchQueryDescription: undefined,
+  RequestHandler: undefined,
+  Resolvers: undefined,
+  SubscriptionHookOptions: undefined,
+  SubscriptionOptions: undefined,
+  TypePolicies: undefined,
+  TypePolicy: undefined,
+  UriFunction: undefined,
+  WatchQueryFetchPolicy: undefined,
+  WatchQueryOptions: undefined
+};
+
+var make = ApolloClient__Core_ApolloClient.make;
+
+var DefaultWatchQueryOptions;
+
+var DefaultQueryOptions;
+
+var DefaultMutateOptions;
+
+var DefaultOptions;
+
+var Utilities;
+
+export {
+  make ,
+  DefaultWatchQueryOptions ,
+  DefaultQueryOptions ,
+  DefaultMutateOptions ,
+  DefaultOptions ,
+  React ,
+  Cache ,
+  Link ,
+  Utilities ,
+  Bindings ,
+  GraphQL_PPX ,
+  Types ,
+  
+}
+/* @apollo/client Not a pure module */
diff --git a/node_modules/rescript-apollo-client/src/graphql-tag/ApolloClient__GraphqlTag.bs.js b/node_modules/rescript-apollo-client/src/graphql-tag/ApolloClient__GraphqlTag.bs.js
new file mode 100644
index 0000000..d856702
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/graphql-tag/ApolloClient__GraphqlTag.bs.js
@@ -0,0 +1,2 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+/* This output is empty. Its source's type definitions, externals and/or unused code got optimized away. */
diff --git a/node_modules/rescript-apollo-client/src/graphql/ApolloClient__Graphql.bs.js b/node_modules/rescript-apollo-client/src/graphql/ApolloClient__Graphql.bs.js
new file mode 100644
index 0000000..261ecc3
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/graphql/ApolloClient__Graphql.bs.js
@@ -0,0 +1,22 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+
+var $$Error;
+
+var Execution;
+
+var GraphQLError;
+
+var Language;
+
+var $$Location;
+
+export {
+  $$Error ,
+  Execution ,
+  GraphQLError ,
+  Language ,
+  $$Location ,
+  
+}
+/* No side effect */
diff --git a/node_modules/rescript-apollo-client/src/graphql/error/ApolloClient__Graphql_Error.bs.js b/node_modules/rescript-apollo-client/src/graphql/error/ApolloClient__Graphql_Error.bs.js
new file mode 100644
index 0000000..7483dc8
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/graphql/error/ApolloClient__Graphql_Error.bs.js
@@ -0,0 +1,10 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+
+var GraphQLError;
+
+export {
+  GraphQLError ,
+  
+}
+/* No side effect */
diff --git a/node_modules/rescript-apollo-client/src/graphql/error/ApolloClient__Graphql_Error_GraphQLError.bs.js b/node_modules/rescript-apollo-client/src/graphql/error/ApolloClient__Graphql_Error_GraphQLError.bs.js
new file mode 100644
index 0000000..339ee6b
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/graphql/error/ApolloClient__Graphql_Error_GraphQLError.bs.js
@@ -0,0 +1,16 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+
+var Ast;
+
+var $$Location;
+
+var Source;
+
+export {
+  Ast ,
+  $$Location ,
+  Source ,
+  
+}
+/* No side effect */
diff --git a/node_modules/rescript-apollo-client/src/graphql/execution/ApolloClient__Graphql_Execution.bs.js b/node_modules/rescript-apollo-client/src/graphql/execution/ApolloClient__Graphql_Execution.bs.js
new file mode 100644
index 0000000..040367c
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/graphql/execution/ApolloClient__Graphql_Execution.bs.js
@@ -0,0 +1,10 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+
+var Execute;
+
+export {
+  Execute ,
+  
+}
+/* No side effect */
diff --git a/node_modules/rescript-apollo-client/src/graphql/execution/ApolloClient__Graphql_Execution_Execute.bs.js b/node_modules/rescript-apollo-client/src/graphql/execution/ApolloClient__Graphql_Execution_Execute.bs.js
new file mode 100644
index 0000000..fd6510f
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/graphql/execution/ApolloClient__Graphql_Execution_Execute.bs.js
@@ -0,0 +1,17 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+
+var Js_ = {};
+
+var ExecutionResult = {
+  Js_: Js_
+};
+
+var GraphQLError;
+
+export {
+  GraphQLError ,
+  ExecutionResult ,
+  
+}
+/* No side effect */
diff --git a/node_modules/rescript-apollo-client/src/graphql/language/ApolloClient__Graphql_Language.bs.js b/node_modules/rescript-apollo-client/src/graphql/language/ApolloClient__Graphql_Language.bs.js
new file mode 100644
index 0000000..9036ab0
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/graphql/language/ApolloClient__Graphql_Language.bs.js
@@ -0,0 +1,10 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+
+var Ast;
+
+export {
+  Ast ,
+  
+}
+/* No side effect */
diff --git a/node_modules/rescript-apollo-client/src/graphql/language/ApolloClient__Graphql_Language_Ast.bs.js b/node_modules/rescript-apollo-client/src/graphql/language/ApolloClient__Graphql_Language_Ast.bs.js
new file mode 100644
index 0000000..6569cca
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/graphql/language/ApolloClient__Graphql_Language_Ast.bs.js
@@ -0,0 +1,74 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+
+var ASTNode = {};
+
+var _map = {"SOF":"SOF","EOF":"EOF","BANG":"BANG","DOLLAR":"DOLLAR","AMP":"AMP","PAREN_L":"PAREN_L","PAREN_R":"PAREN_R","SPREAD":"SPREAD","COLON":"COLON","EQUALS":"EQUALS","AT":"AT","BRACKET_L":"BRACKET_L","BRACKET_R":"BRACKET_R","BRACE_L":"BRACE_L","PIPE":"PIPE","BRACE_R":"BRACE_R","NAME":"NAME","INT":"INT","FLOAT":"FLOAT","STRING":"STRING","BLOCK_STRING":"BLOCK_STRING","COMMENT":"COMMENT"};
+
+function tToJs(param) {
+  return param;
+}
+
+function tFromJs(param) {
+  return _map[param];
+}
+
+var TokenKindEnum = {
+  tToJs: tToJs,
+  tFromJs: tFromJs
+};
+
+var Token = {};
+
+var $$Location = {};
+
+var NameNode = {};
+
+var NamedTypeNode = {};
+
+var ValueNode = {};
+
+var ArgumentNode = {};
+
+var DirectiveNode = {};
+
+var SelectionNode = {};
+
+var SelectionSetNode = {};
+
+var FieldNode = {};
+
+var FragmentDefinitionNode = {};
+
+var VariableNode = {};
+
+var VariableDefinitionNode = {};
+
+var OperationTypeNode = {};
+
+var OperationDefinitionNode = {};
+
+var Source;
+
+export {
+  ASTNode ,
+  Source ,
+  TokenKindEnum ,
+  Token ,
+  $$Location ,
+  NameNode ,
+  NamedTypeNode ,
+  ValueNode ,
+  ArgumentNode ,
+  DirectiveNode ,
+  SelectionNode ,
+  SelectionSetNode ,
+  FieldNode ,
+  FragmentDefinitionNode ,
+  VariableNode ,
+  VariableDefinitionNode ,
+  OperationTypeNode ,
+  OperationDefinitionNode ,
+  
+}
+/* No side effect */
diff --git a/node_modules/rescript-apollo-client/src/graphql/language/ApolloClient__Graphql_Language_Source.bs.js b/node_modules/rescript-apollo-client/src/graphql/language/ApolloClient__Graphql_Language_Source.bs.js
new file mode 100644
index 0000000..14f77ca
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/graphql/language/ApolloClient__Graphql_Language_Source.bs.js
@@ -0,0 +1,13 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+
+var $$Location = {};
+
+var Source = {};
+
+export {
+  $$Location ,
+  Source ,
+  
+}
+/* No side effect */
diff --git a/node_modules/rescript-apollo-client/src/graphql/location/ApolloClient__Graphql_Location.bs.js b/node_modules/rescript-apollo-client/src/graphql/location/ApolloClient__Graphql_Location.bs.js
new file mode 100644
index 0000000..d856702
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/graphql/location/ApolloClient__Graphql_Location.bs.js
@@ -0,0 +1,2 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+/* This output is empty. Its source's type definitions, externals and/or unused code got optimized away. */
diff --git a/node_modules/rescript-apollo-client/src/subscriptions-transport-ws/ApolloClient__SubscriptionsTransportWs.bs.js b/node_modules/rescript-apollo-client/src/subscriptions-transport-ws/ApolloClient__SubscriptionsTransportWs.bs.js
new file mode 100644
index 0000000..97ab1a0
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/subscriptions-transport-ws/ApolloClient__SubscriptionsTransportWs.bs.js
@@ -0,0 +1,112 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+import * as Belt_Option from "bs-platform/lib/es6/belt_Option.mjs";
+import * as Caml_option from "bs-platform/lib/es6/caml_option.mjs";
+import * as SubscriptionsTransportWs from "subscriptions-transport-ws";
+
+var Js_ = {};
+
+var ConnectionParams = {
+  Js_: Js_
+};
+
+function connectionParams(v) {
+  return v;
+}
+
+function fn(v) {
+  return v;
+}
+
+function promise(v) {
+  return v;
+}
+
+var Union = {
+  connectionParams: connectionParams,
+  fn: fn,
+  promise: promise
+};
+
+var Js_$1 = {
+  Union: Union
+};
+
+function toJs(x) {
+  switch (x.TAG | 0) {
+    case /* ConnectionParams */0 :
+    case /* Function */1 :
+    case /* Promise */2 :
+        return x._0;
+    
+  }
+}
+
+var ConnectionParamsOptions = {
+  Js_: Js_$1,
+  toJs: toJs
+};
+
+var Js_$2 = {};
+
+function toJs$1(t) {
+  return {
+          connectionParams: Belt_Option.map(t.connectionParams, toJs),
+          timeout: t.timeout,
+          reconnect: t.reconnect,
+          reconnectionAttempts: t.reconnectionAttempts,
+          connectionCallback: t.connectionCallback,
+          lazy: t.lazy,
+          inactivityTimeout: t.inactivityTimeout
+        };
+}
+
+function make(connectionParams, timeout, reconnect, reconnectionAttempts, connectionCallback, lazy_, inactivityTimeout, param) {
+  return {
+          connectionParams: connectionParams,
+          timeout: timeout,
+          reconnect: reconnect,
+          reconnectionAttempts: reconnectionAttempts,
+          connectionCallback: connectionCallback,
+          lazy: lazy_,
+          inactivityTimeout: inactivityTimeout
+        };
+}
+
+var ClientOptions = {
+  Js_: Js_$2,
+  toJs: toJs$1,
+  make: make
+};
+
+var Js_$3 = {};
+
+var preserveJsPropsAndContext = (function (js, t) {
+        return Object.assign(js, t)
+      });
+
+function make$1(url, options, webSocketImpl, webSocketProtocols, param) {
+  var jsSubscriptionClient = new SubscriptionsTransportWs.SubscriptionClient(url, Caml_option.option_get(Belt_Option.map(options, toJs$1)), webSocketImpl !== undefined ? Caml_option.valFromOption(webSocketImpl) : undefined, webSocketProtocols !== undefined ? Caml_option.valFromOption(webSocketProtocols) : undefined);
+  var close = function (isForced, closedByUser, param) {
+    jsSubscriptionClient.close(isForced !== undefined ? Caml_option.valFromOption(isForced) : undefined, closedByUser !== undefined ? Caml_option.valFromOption(closedByUser) : undefined);
+    
+  };
+  return preserveJsPropsAndContext(jsSubscriptionClient, {
+              rescript_close: close
+            });
+}
+
+var SubscriptionClient = {
+  Js_: Js_$3,
+  preserveJsPropsAndContext: preserveJsPropsAndContext,
+  make: make$1
+};
+
+export {
+  ConnectionParams ,
+  ConnectionParamsOptions ,
+  ClientOptions ,
+  SubscriptionClient ,
+  
+}
+/* subscriptions-transport-ws Not a pure module */
diff --git a/node_modules/rescript-apollo-client/src/zen-observable/ApolloClient__ZenObservable.bs.js b/node_modules/rescript-apollo-client/src/zen-observable/ApolloClient__ZenObservable.bs.js
new file mode 100644
index 0000000..5fcb7e2
--- /dev/null
+++ b/node_modules/rescript-apollo-client/src/zen-observable/ApolloClient__ZenObservable.bs.js
@@ -0,0 +1,49 @@
+// Generated by ReScript, PLEASE EDIT WITH CARE
+
+import * as Caml_option from "bs-platform/lib/es6/caml_option.mjs";
+
+var Js_ = {};
+
+function fromJs(js) {
+  return {
+          closed: js.closed,
+          unsubscribe: (function (param) {
+              js.unsubscribe();
+              
+            })
+        };
+}
+
+var Subscription = {
+  Js_: Js_,
+  fromJs: fromJs
+};
+
+var Js_$1 = {};
+
+var Observer = {
+  Js_: Js_$1
+};
+
+var Js_$2 = {};
+
+function fromJs$1(t) {
+  return {
+          subscribe: (function (onNext, onError, onComplete, param) {
+              return fromJs(t.subscribe(onNext, onError !== undefined ? Caml_option.valFromOption(onError) : undefined, onComplete !== undefined ? Caml_option.valFromOption(onComplete) : undefined));
+            })
+        };
+}
+
+var Observable = {
+  Js_: Js_$2,
+  fromJs: fromJs$1
+};
+
+export {
+  Subscription ,
+  Observer ,
+  Observable ,
+  
+}
+/* No side effect */
diff --git a/node_modules/rescript-apollo-client/yarn-error.log b/node_modules/rescript-apollo-client/yarn-error.log
new file mode 100644
index 0000000..181756f
--- /dev/null
+++ b/node_modules/rescript-apollo-client/yarn-error.log
@@ -0,0 +1,74 @@
+Arguments: 
+  /Volumes/SSD/.fnm/node-versions/v14.15.4/installation/bin/node /usr/local/Cellar/yarn/1.22.10/libexec/bin/yarn.js install
+
+PATH: 
+  .:/Volumes/SSD/.opam/default/bin:.:/usr/local/opt/gnu-getopt/bin:/Users/mandalarian/Downloads/caramel/bin:/Users/mandalarian/.opam/default/bin/refmt:/Users/mandalarian/local/share/dotnet/dotnet:/usr/local/opt/fzf/bin:/var/folders/rt/7lc5vcw16459dszl8djk35fh0000gn/T/fnm_multishell_98676_1613154469948/bin:/Users/mandalarian/.rbenv/shims:/var/folders/rt/7lc5vcw16459dszl8djk35fh0000gn/T/fnm_multishell_98620_1613154468479/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Library/Apple/usr/bin:/usr/local/aria2/bin:/usr/local/share/dotnet:~/.dotnet/tools:/usr/local/go/bin:/Applications/Postgres.app/Contents/Versions/latest/bin:/Applications/Racket v7.6/bin:/Library/TeX/texbin:.:/Volumes/SSD/.opam/default/bin:/var/folders/rt/7lc5vcw16459dszl8djk35fh0000gn/T/fnm_multishell_51640_1613138900749/bin:/Users/mandalarian/.rbenv/shims:/usr/local/opt/ruby/bin:/usr/local/opt/curl/bin:/usr/local/opt/sqlite/bin:/var/folders/rt/7lc5vcw16459dszl8djk35fh0000gn/T/fnm_multishell_51579_1613138895439/bin:set:-gx:RBENV_SHELL:fish:source:/usr/local/Cellar/rbenv/1.1.2/libexec/../completions/rbenv.fish:command:rbenv:rehash:function:-e:argv[1]:switch:case:shell:/var/folders/rt/7lc5vcw16459dszl8djk35fh0000gn/T//.psub.bbayHQb341:*:end:/Users/mandalarian/.local/bin:set:-gx:RBENV_SHELL:fish:source:/usr/local/Cellar/rbenv/1.1.2/libexec/../completions/rbenv.fish:command:rbenv:rehash:function:rbenv:set:command:set:-e:argv[1]:switch:.:case:rehash:shell:source:/var/folders/rt/7lc5vcw16459dszl8djk35fh0000gn/T//.psub.qMjmWuVSIt:case:*:command:rbenv:.:end:end:/Users/mandalarian/.local/bin
+
+Yarn version: 
+  1.22.10
+
+Node version: 
+  14.15.4
+
+Platform: 
+  darwin x64
+
+Trace: 
+  Error: https://registry.yarnpkg.com/rescript%2freact: Request "https://registry.yarnpkg.com/rescript%2freact" returned a 405
+      at Request.params.callback [as _callback] (/usr/local/Cellar/yarn/1.22.10/libexec/lib/cli.js:66997:18)
+      at Request.self.callback (/usr/local/Cellar/yarn/1.22.10/libexec/lib/cli.js:140749:22)
+      at Request.emit (events.js:315:20)
+      at Request.<anonymous> (/usr/local/Cellar/yarn/1.22.10/libexec/lib/cli.js:141721:10)
+      at Request.emit (events.js:315:20)
+      at IncomingMessage.<anonymous> (/usr/local/Cellar/yarn/1.22.10/libexec/lib/cli.js:141643:12)
+      at Object.onceWrapper (events.js:421:28)
+      at IncomingMessage.emit (events.js:327:22)
+      at endReadableNT (internal/streams/readable.js:1327:12)
+      at processTicksAndRejections (internal/process/task_queues.js:80:21)
+
+npm manifest: 
+  {
+    "name": "rescript-apollo-client",
+    "description": "ReScript bindings for the Apollo Client ecosystem",
+    "version": "1.1.1",
+    "keywords": [
+      "Apollo",
+      "BuckleScript",
+      "GraphQL",
+      "ReScript"
+    ],
+    "license": "MIT",
+    "repository": {
+      "type": "git",
+      "url": "https://github.com/reasonml-community/rescript-apollo-client"
+    },
+    "scripts": {
+      "build": "bsb -make-world",
+      "clean": "bsb -clean-world",
+      "start": "bsb -make-world -w",
+      "test": "jest"
+    },
+    "devDependencies": {
+      "@apollo/client": "3.3.7",
+      "@reasonml-community/graphql-ppx": "^1.0.0",
+      "bs-platform": "8.4.2",
+      "graphql": "^14.0.0",
+      "jest": "26.5.3",
+      "react": "^16.13.1",
+      "react-dom": "^16.13.1",
+      "rescript/react": "^0.10.1",
+      "subscriptions-transport-ws": "^0.9.17"
+    },
+    "peerDependencies": {
+      "@apollo/client": "^3.3.0",
+      "@reasonml-community/graphql-ppx": "^1.0.0",
+      "bs-platform": "^8.2.0 || ^9.0.0",
+      "rescript/react": "^0.10.1"
+    }
+  }
+
+yarn manifest: 
+  No manifest
+
+Lockfile: 
+  No lockfile
diff --git a/node_modules/rescript-apollo-client/yarn.lock b/node_modules/rescript-apollo-client/yarn.lock
new file mode 100644
index 0000000..46d06bf
--- /dev/null
+++ b/node_modules/rescript-apollo-client/yarn.lock
@@ -0,0 +1,3807 @@
+# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
+# yarn lockfile v1
+
+
+"@apollo/client@3.3.7":
+  version "3.3.7"
+  resolved "https://registry.yarnpkg.com/@apollo/client/-/client-3.3.7.tgz#f15bf961dc0c2bee37a47bf86b8881fdc6183810"
+  integrity sha512-Cb0OqqvlehlRHtHIXRIS/Pe5WYU4hHl1FznXTRSxBAN42WmBUM3zy/Unvw183RdWMyV6Kc2pFKOEuaG1K7JTAQ==
+  dependencies:
+    "@graphql-typed-document-node/core" "^3.0.0"
+    "@types/zen-observable" "^0.8.0"
+    "@wry/context" "^0.5.2"
+    "@wry/equality" "^0.3.0"
+    fast-json-stable-stringify "^2.0.0"
+    graphql-tag "^2.11.0"
+    hoist-non-react-statics "^3.3.2"
+    optimism "^0.14.0"
+    prop-types "^15.7.2"
+    symbol-observable "^2.0.0"
+    ts-invariant "^0.6.0"
+    tslib "^1.10.0"
+    zen-observable "^0.8.14"
+
+"@babel/code-frame@^7.0.0", "@babel/code-frame@^7.12.13":
+  version "7.12.13"
+  resolved "https://registry.yarnpkg.com/@babel/code-frame/-/code-frame-7.12.13.tgz#dcfc826beef65e75c50e21d3837d7d95798dd658"
+  integrity sha512-HV1Cm0Q3ZrpCR93tkWOYiuYIgLxZXZFVG2VgK+MBWjUqZTundupbfx2aXarXuw5Ko5aMcjtJgbSs4vUGBS5v6g==
+  dependencies:
+    "@babel/highlight" "^7.12.13"
+
+"@babel/core@^7.1.0", "@babel/core@^7.7.5":
+  version "7.12.16"
+  resolved "https://registry.yarnpkg.com/@babel/core/-/core-7.12.16.tgz#8c6ba456b23b680a6493ddcfcd9d3c3ad51cab7c"
+  integrity sha512-t/hHIB504wWceOeaOoONOhu+gX+hpjfeN6YRBT209X/4sibZQfSF1I0HFRRlBe97UZZosGx5XwUg1ZgNbelmNw==
+  dependencies:
+    "@babel/code-frame" "^7.12.13"
+    "@babel/generator" "^7.12.15"
+    "@babel/helper-module-transforms" "^7.12.13"
+    "@babel/helpers" "^7.12.13"
+    "@babel/parser" "^7.12.16"
+    "@babel/template" "^7.12.13"
+    "@babel/traverse" "^7.12.13"
+    "@babel/types" "^7.12.13"
+    convert-source-map "^1.7.0"
+    debug "^4.1.0"
+    gensync "^1.0.0-beta.1"
+    json5 "^2.1.2"
+    lodash "^4.17.19"
+    semver "^5.4.1"
+    source-map "^0.5.0"
+
+"@babel/generator@^7.12.13", "@babel/generator@^7.12.15":
+  version "7.12.15"
+  resolved "https://registry.yarnpkg.com/@babel/generator/-/generator-7.12.15.tgz#4617b5d0b25cc572474cc1aafee1edeaf9b5368f"
+  integrity sha512-6F2xHxBiFXWNSGb7vyCUTBF8RCLY66rS0zEPcP8t/nQyXjha5EuK4z7H5o7fWG8B4M7y6mqVWq1J+1PuwRhecQ==
+  dependencies:
+    "@babel/types" "^7.12.13"
+    jsesc "^2.5.1"
+    source-map "^0.5.0"
+
+"@babel/helper-function-name@^7.12.13":
+  version "7.12.13"
+  resolved "https://registry.yarnpkg.com/@babel/helper-function-name/-/helper-function-name-7.12.13.tgz#93ad656db3c3c2232559fd7b2c3dbdcbe0eb377a"
+  integrity sha512-TZvmPn0UOqmvi5G4vvw0qZTpVptGkB1GL61R6lKvrSdIxGm5Pky7Q3fpKiIkQCAtRCBUwB0PaThlx9vebCDSwA==
+  dependencies:
+    "@babel/helper-get-function-arity" "^7.12.13"
+    "@babel/template" "^7.12.13"
+    "@babel/types" "^7.12.13"
+
+"@babel/helper-get-function-arity@^7.12.13":
+  version "7.12.13"
+  resolved "https://registry.yarnpkg.com/@babel/helper-get-function-arity/-/helper-get-function-arity-7.12.13.tgz#bc63451d403a3b3082b97e1d8b3fe5bd4091e583"
+  integrity sha512-DjEVzQNz5LICkzN0REdpD5prGoidvbdYk1BVgRUOINaWJP2t6avB27X1guXK1kXNrX0WMfsrm1A/ZBthYuIMQg==
+  dependencies:
+    "@babel/types" "^7.12.13"
+
+"@babel/helper-member-expression-to-functions@^7.12.13":
+  version "7.12.16"
+  resolved "https://registry.yarnpkg.com/@babel/helper-member-expression-to-functions/-/helper-member-expression-to-functions-7.12.16.tgz#41e0916b99f8d5f43da4f05d85f4930fa3d62b22"
+  integrity sha512-zYoZC1uvebBFmj1wFAlXwt35JLEgecefATtKp20xalwEK8vHAixLBXTGxNrVGEmTT+gzOThUgr8UEdgtalc1BQ==
+  dependencies:
+    "@babel/types" "^7.12.13"
+
+"@babel/helper-module-imports@^7.12.13":
+  version "7.12.13"
+  resolved "https://registry.yarnpkg.com/@babel/helper-module-imports/-/helper-module-imports-7.12.13.tgz#ec67e4404f41750463e455cc3203f6a32e93fcb0"
+  integrity sha512-NGmfvRp9Rqxy0uHSSVP+SRIW1q31a7Ji10cLBcqSDUngGentY4FRiHOFZFE1CLU5eiL0oE8reH7Tg1y99TDM/g==
+  dependencies:
+    "@babel/types" "^7.12.13"
+
+"@babel/helper-module-transforms@^7.12.13":
+  version "7.12.13"
+  resolved "https://registry.yarnpkg.com/@babel/helper-module-transforms/-/helper-module-transforms-7.12.13.tgz#01afb052dcad2044289b7b20beb3fa8bd0265bea"
+  integrity sha512-acKF7EjqOR67ASIlDTupwkKM1eUisNAjaSduo5Cz+793ikfnpe7p4Q7B7EWU2PCoSTPWsQkR7hRUWEIZPiVLGA==
+  dependencies:
+    "@babel/helper-module-imports" "^7.12.13"
+    "@babel/helper-replace-supers" "^7.12.13"
+    "@babel/helper-simple-access" "^7.12.13"
+    "@babel/helper-split-export-declaration" "^7.12.13"
+    "@babel/helper-validator-identifier" "^7.12.11"
+    "@babel/template" "^7.12.13"
+    "@babel/traverse" "^7.12.13"
+    "@babel/types" "^7.12.13"
+    lodash "^4.17.19"
+
+"@babel/helper-optimise-call-expression@^7.12.13":
+  version "7.12.13"
+  resolved "https://registry.yarnpkg.com/@babel/helper-optimise-call-expression/-/helper-optimise-call-expression-7.12.13.tgz#5c02d171b4c8615b1e7163f888c1c81c30a2aaea"
+  integrity sha512-BdWQhoVJkp6nVjB7nkFWcn43dkprYauqtk++Py2eaf/GRDFm5BxRqEIZCiHlZUGAVmtwKcsVL1dC68WmzeFmiA==
+  dependencies:
+    "@babel/types" "^7.12.13"
+
+"@babel/helper-plugin-utils@^7.0.0", "@babel/helper-plugin-utils@^7.10.4", "@babel/helper-plugin-utils@^7.12.13", "@babel/helper-plugin-utils@^7.8.0":
+  version "7.12.13"
+  resolved "https://registry.yarnpkg.com/@babel/helper-plugin-utils/-/helper-plugin-utils-7.12.13.tgz#174254d0f2424d8aefb4dd48057511247b0a9eeb"
+  integrity sha512-C+10MXCXJLiR6IeG9+Wiejt9jmtFpxUc3MQqCmPY8hfCjyUGl9kT+B2okzEZrtykiwrc4dbCPdDoz0A/HQbDaA==
+
+"@babel/helper-replace-supers@^7.12.13":
+  version "7.12.13"
+  resolved "https://registry.yarnpkg.com/@babel/helper-replace-supers/-/helper-replace-supers-7.12.13.tgz#00ec4fb6862546bd3d0aff9aac56074277173121"
+  integrity sha512-pctAOIAMVStI2TMLhozPKbf5yTEXc0OJa0eENheb4w09SrgOWEs+P4nTOZYJQCqs8JlErGLDPDJTiGIp3ygbLg==
+  dependencies:
+    "@babel/helper-member-expression-to-functions" "^7.12.13"
+    "@babel/helper-optimise-call-expression" "^7.12.13"
+    "@babel/traverse" "^7.12.13"
+    "@babel/types" "^7.12.13"
+
+"@babel/helper-simple-access@^7.12.13":
+  version "7.12.13"
+  resolved "https://registry.yarnpkg.com/@babel/helper-simple-access/-/helper-simple-access-7.12.13.tgz#8478bcc5cacf6aa1672b251c1d2dde5ccd61a6c4"
+  integrity sha512-0ski5dyYIHEfwpWGx5GPWhH35j342JaflmCeQmsPWcrOQDtCN6C1zKAVRFVbK53lPW2c9TsuLLSUDf0tIGJ5hA==
+  dependencies:
+    "@babel/types" "^7.12.13"
+
+"@babel/helper-split-export-declaration@^7.12.13":
+  version "7.12.13"
+  resolved "https://registry.yarnpkg.com/@babel/helper-split-export-declaration/-/helper-split-export-declaration-7.12.13.tgz#e9430be00baf3e88b0e13e6f9d4eaf2136372b05"
+  integrity sha512-tCJDltF83htUtXx5NLcaDqRmknv652ZWCHyoTETf1CXYJdPC7nohZohjUgieXhv0hTJdRf2FjDueFehdNucpzg==
+  dependencies:
+    "@babel/types" "^7.12.13"
+
+"@babel/helper-validator-identifier@^7.12.11":
+  version "7.12.11"
+  resolved "https://registry.yarnpkg.com/@babel/helper-validator-identifier/-/helper-validator-identifier-7.12.11.tgz#c9a1f021917dcb5ccf0d4e453e399022981fc9ed"
+  integrity sha512-np/lG3uARFybkoHokJUmf1QfEvRVCPbmQeUQpKow5cQ3xWrV9i3rUHodKDJPQfTVX61qKi+UdYk8kik84n7XOw==
+
+"@babel/helpers@^7.12.13":
+  version "7.12.13"
+  resolved "https://registry.yarnpkg.com/@babel/helpers/-/helpers-7.12.13.tgz#3c75e993632e4dadc0274eae219c73eb7645ba47"
+  integrity sha512-oohVzLRZ3GQEk4Cjhfs9YkJA4TdIDTObdBEZGrd6F/T0GPSnuV6l22eMcxlvcvzVIPH3VTtxbseudM1zIE+rPQ==
+  dependencies:
+    "@babel/template" "^7.12.13"
+    "@babel/traverse" "^7.12.13"
+    "@babel/types" "^7.12.13"
+
+"@babel/highlight@^7.12.13":
+  version "7.12.13"
+  resolved "https://registry.yarnpkg.com/@babel/highlight/-/highlight-7.12.13.tgz#8ab538393e00370b26271b01fa08f7f27f2e795c"
+  integrity sha512-kocDQvIbgMKlWxXe9fof3TQ+gkIPOUSEYhJjqUjvKMez3krV7vbzYCDq39Oj11UAVK7JqPVGQPlgE85dPNlQww==
+  dependencies:
+    "@babel/helper-validator-identifier" "^7.12.11"
+    chalk "^2.0.0"
+    js-tokens "^4.0.0"
+
+"@babel/parser@^7.1.0", "@babel/parser@^7.12.13", "@babel/parser@^7.12.16":
+  version "7.12.16"
+  resolved "https://registry.yarnpkg.com/@babel/parser/-/parser-7.12.16.tgz#cc31257419d2c3189d394081635703f549fc1ed4"
+  integrity sha512-c/+u9cqV6F0+4Hpq01jnJO+GLp2DdT63ppz9Xa+6cHaajM9VFzK/iDXiKK65YtpeVwu+ctfS6iqlMqRgQRzeCw==
+
+"@babel/plugin-syntax-async-generators@^7.8.4":
+  version "7.8.4"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-syntax-async-generators/-/plugin-syntax-async-generators-7.8.4.tgz#a983fb1aeb2ec3f6ed042a210f640e90e786fe0d"
+  integrity sha512-tycmZxkGfZaxhMRbXlPXuVFpdWlXpir2W4AMhSJgRKzk/eDlIXOhb2LHWoLpDF7TEHylV5zNhykX6KAgHJmTNw==
+  dependencies:
+    "@babel/helper-plugin-utils" "^7.8.0"
+
+"@babel/plugin-syntax-bigint@^7.8.3":
+  version "7.8.3"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-syntax-bigint/-/plugin-syntax-bigint-7.8.3.tgz#4c9a6f669f5d0cdf1b90a1671e9a146be5300cea"
+  integrity sha512-wnTnFlG+YxQm3vDxpGE57Pj0srRU4sHE/mDkt1qv2YJJSeUAec2ma4WLUnUPeKjyrfntVwe/N6dCXpU+zL3Npg==
+  dependencies:
+    "@babel/helper-plugin-utils" "^7.8.0"
+
+"@babel/plugin-syntax-class-properties@^7.8.3":
+  version "7.12.13"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-syntax-class-properties/-/plugin-syntax-class-properties-7.12.13.tgz#b5c987274c4a3a82b89714796931a6b53544ae10"
+  integrity sha512-fm4idjKla0YahUNgFNLCB0qySdsoPiZP3iQE3rky0mBUtMZ23yDJ9SJdg6dXTSDnulOVqiF3Hgr9nbXvXTQZYA==
+  dependencies:
+    "@babel/helper-plugin-utils" "^7.12.13"
+
+"@babel/plugin-syntax-import-meta@^7.8.3":
+  version "7.10.4"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-syntax-import-meta/-/plugin-syntax-import-meta-7.10.4.tgz#ee601348c370fa334d2207be158777496521fd51"
+  integrity sha512-Yqfm+XDx0+Prh3VSeEQCPU81yC+JWZ2pDPFSS4ZdpfZhp4MkFMaDC1UqseovEKwSUpnIL7+vK+Clp7bfh0iD7g==
+  dependencies:
+    "@babel/helper-plugin-utils" "^7.10.4"
+
+"@babel/plugin-syntax-json-strings@^7.8.3":
+  version "7.8.3"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-syntax-json-strings/-/plugin-syntax-json-strings-7.8.3.tgz#01ca21b668cd8218c9e640cb6dd88c5412b2c96a"
+  integrity sha512-lY6kdGpWHvjoe2vk4WrAapEuBR69EMxZl+RoGRhrFGNYVK8mOPAW8VfbT/ZgrFbXlDNiiaxQnAtgVCZ6jv30EA==
+  dependencies:
+    "@babel/helper-plugin-utils" "^7.8.0"
+
+"@babel/plugin-syntax-logical-assignment-operators@^7.8.3":
+  version "7.10.4"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-syntax-logical-assignment-operators/-/plugin-syntax-logical-assignment-operators-7.10.4.tgz#ca91ef46303530448b906652bac2e9fe9941f699"
+  integrity sha512-d8waShlpFDinQ5MtvGU9xDAOzKH47+FFoney2baFIoMr952hKOLp1HR7VszoZvOsV/4+RRszNY7D17ba0te0ig==
+  dependencies:
+    "@babel/helper-plugin-utils" "^7.10.4"
+
+"@babel/plugin-syntax-nullish-coalescing-operator@^7.8.3":
+  version "7.8.3"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-syntax-nullish-coalescing-operator/-/plugin-syntax-nullish-coalescing-operator-7.8.3.tgz#167ed70368886081f74b5c36c65a88c03b66d1a9"
+  integrity sha512-aSff4zPII1u2QD7y+F8oDsz19ew4IGEJg9SVW+bqwpwtfFleiQDMdzA/R+UlWDzfnHFCxxleFT0PMIrR36XLNQ==
+  dependencies:
+    "@babel/helper-plugin-utils" "^7.8.0"
+
+"@babel/plugin-syntax-numeric-separator@^7.8.3":
+  version "7.10.4"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-syntax-numeric-separator/-/plugin-syntax-numeric-separator-7.10.4.tgz#b9b070b3e33570cd9fd07ba7fa91c0dd37b9af97"
+  integrity sha512-9H6YdfkcK/uOnY/K7/aA2xpzaAgkQn37yzWUMRK7OaPOqOpGS1+n0H5hxT9AUw9EsSjPW8SVyMJwYRtWs3X3ug==
+  dependencies:
+    "@babel/helper-plugin-utils" "^7.10.4"
+
+"@babel/plugin-syntax-object-rest-spread@^7.8.3":
+  version "7.8.3"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-syntax-object-rest-spread/-/plugin-syntax-object-rest-spread-7.8.3.tgz#60e225edcbd98a640332a2e72dd3e66f1af55871"
+  integrity sha512-XoqMijGZb9y3y2XskN+P1wUGiVwWZ5JmoDRwx5+3GmEplNyVM2s2Dg8ILFQm8rWM48orGy5YpI5Bl8U1y7ydlA==
+  dependencies:
+    "@babel/helper-plugin-utils" "^7.8.0"
+
+"@babel/plugin-syntax-optional-catch-binding@^7.8.3":
+  version "7.8.3"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-syntax-optional-catch-binding/-/plugin-syntax-optional-catch-binding-7.8.3.tgz#6111a265bcfb020eb9efd0fdfd7d26402b9ed6c1"
+  integrity sha512-6VPD0Pc1lpTqw0aKoeRTMiB+kWhAoT24PA+ksWSBrFtl5SIRVpZlwN3NNPQjehA2E/91FV3RjLWoVTglWcSV3Q==
+  dependencies:
+    "@babel/helper-plugin-utils" "^7.8.0"
+
+"@babel/plugin-syntax-optional-chaining@^7.8.3":
+  version "7.8.3"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-syntax-optional-chaining/-/plugin-syntax-optional-chaining-7.8.3.tgz#4f69c2ab95167e0180cd5336613f8c5788f7d48a"
+  integrity sha512-KoK9ErH1MBlCPxV0VANkXW2/dw4vlbGDrFgz8bmUsBGYkFRcbRwMh6cIJubdPrkxRwuGdtCk0v/wPTKbQgBjkg==
+  dependencies:
+    "@babel/helper-plugin-utils" "^7.8.0"
+
+"@babel/plugin-syntax-top-level-await@^7.8.3":
+  version "7.12.13"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-syntax-top-level-await/-/plugin-syntax-top-level-await-7.12.13.tgz#c5f0fa6e249f5b739727f923540cf7a806130178"
+  integrity sha512-A81F9pDwyS7yM//KwbCSDqy3Uj4NMIurtplxphWxoYtNPov7cJsDkAFNNyVlIZ3jwGycVsurZ+LtOA8gZ376iQ==
+  dependencies:
+    "@babel/helper-plugin-utils" "^7.12.13"
+
+"@babel/template@^7.12.13", "@babel/template@^7.3.3":
+  version "7.12.13"
+  resolved "https://registry.yarnpkg.com/@babel/template/-/template-7.12.13.tgz#530265be8a2589dbb37523844c5bcb55947fb327"
+  integrity sha512-/7xxiGA57xMo/P2GVvdEumr8ONhFOhfgq2ihK3h1e6THqzTAkHbkXgB0xI9yeTfIUoH3+oAeHhqm/I43OTbbjA==
+  dependencies:
+    "@babel/code-frame" "^7.12.13"
+    "@babel/parser" "^7.12.13"
+    "@babel/types" "^7.12.13"
+
+"@babel/traverse@^7.1.0", "@babel/traverse@^7.12.13":
+  version "7.12.13"
+  resolved "https://registry.yarnpkg.com/@babel/traverse/-/traverse-7.12.13.tgz#689f0e4b4c08587ad26622832632735fb8c4e0c0"
+  integrity sha512-3Zb4w7eE/OslI0fTp8c7b286/cQps3+vdLW3UcwC8VSJC6GbKn55aeVVu2QJNuCDoeKyptLOFrPq8WqZZBodyA==
+  dependencies:
+    "@babel/code-frame" "^7.12.13"
+    "@babel/generator" "^7.12.13"
+    "@babel/helper-function-name" "^7.12.13"
+    "@babel/helper-split-export-declaration" "^7.12.13"
+    "@babel/parser" "^7.12.13"
+    "@babel/types" "^7.12.13"
+    debug "^4.1.0"
+    globals "^11.1.0"
+    lodash "^4.17.19"
+
+"@babel/types@^7.0.0", "@babel/types@^7.12.13", "@babel/types@^7.3.0", "@babel/types@^7.3.3":
+  version "7.12.13"
+  resolved "https://registry.yarnpkg.com/@babel/types/-/types-7.12.13.tgz#8be1aa8f2c876da11a9cf650c0ecf656913ad611"
+  integrity sha512-oKrdZTld2im1z8bDwTOQvUbxKwE+854zc16qWZQlcTqMN00pWxHQ4ZeOq0yDMnisOpRykH2/5Qqcrk/OlbAjiQ==
+  dependencies:
+    "@babel/helper-validator-identifier" "^7.12.11"
+    lodash "^4.17.19"
+    to-fast-properties "^2.0.0"
+
+"@bcoe/v8-coverage@^0.2.3":
+  version "0.2.3"
+  resolved "https://registry.yarnpkg.com/@bcoe/v8-coverage/-/v8-coverage-0.2.3.tgz#75a2e8b51cb758a7553d6804a5932d7aace75c39"
+  integrity sha512-0hYQ8SB4Db5zvZB4axdMHGwEaQjkZzFjQiN9LVYvIFB2nSUHW9tYpxWriPrWDASIxiaXax83REcLxuSdnGPZtw==
+
+"@cnakazawa/watch@^1.0.3":
+  version "1.0.4"
+  resolved "https://registry.yarnpkg.com/@cnakazawa/watch/-/watch-1.0.4.tgz#f864ae85004d0fcab6f50be9141c4da368d1656a"
+  integrity sha512-v9kIhKwjeZThiWrLmj0y17CWoyddASLj9O2yvbZkbvw/N3rWOYy9zkV66ursAoVr0mV15bL8g0c4QZUE6cdDoQ==
+  dependencies:
+    exec-sh "^0.3.2"
+    minimist "^1.2.0"
+
+"@graphql-typed-document-node/core@^3.0.0":
+  version "3.1.0"
+  resolved "https://registry.yarnpkg.com/@graphql-typed-document-node/core/-/core-3.1.0.tgz#0eee6373e11418bfe0b5638f654df7a4ca6a3950"
+  integrity sha512-wYn6r8zVZyQJ6rQaALBEln5B1pzxb9shV5Ef97kTvn6yVGrqyXVnDqnU24MXnFubR+rZjBY9NWuxX3FB2sTsjg==
+
+"@istanbuljs/load-nyc-config@^1.0.0":
+  version "1.1.0"
+  resolved "https://registry.yarnpkg.com/@istanbuljs/load-nyc-config/-/load-nyc-config-1.1.0.tgz#fd3db1d59ecf7cf121e80650bb86712f9b55eced"
+  integrity sha512-VjeHSlIzpv/NyD3N0YuHfXOPDIixcA1q2ZV98wsMqcYlPmv2n3Yb2lYP9XMElnaFVXg5A7YLTeLu6V84uQDjmQ==
+  dependencies:
+    camelcase "^5.3.1"
+    find-up "^4.1.0"
+    get-package-type "^0.1.0"
+    js-yaml "^3.13.1"
+    resolve-from "^5.0.0"
+
+"@istanbuljs/schema@^0.1.2":
+  version "0.1.2"
+  resolved "https://registry.yarnpkg.com/@istanbuljs/schema/-/schema-0.1.2.tgz#26520bf09abe4a5644cd5414e37125a8954241dd"
+  integrity sha512-tsAQNx32a8CoFhjhijUIhI4kccIAgmGhy8LZMZgGfmXcpMbPRUqn5LWmgRttILi6yeGmBJd2xsPkFMs0PzgPCw==
+
+"@jest/console@^26.6.2":
+  version "26.6.2"
+  resolved "https://registry.yarnpkg.com/@jest/console/-/console-26.6.2.tgz#4e04bc464014358b03ab4937805ee36a0aeb98f2"
+  integrity sha512-IY1R2i2aLsLr7Id3S6p2BA82GNWryt4oSvEXLAKc+L2zdi89dSkE8xC1C+0kpATG4JhBJREnQOH7/zmccM2B0g==
+  dependencies:
+    "@jest/types" "^26.6.2"
+    "@types/node" "*"
+    chalk "^4.0.0"
+    jest-message-util "^26.6.2"
+    jest-util "^26.6.2"
+    slash "^3.0.0"
+
+"@jest/core@^26.5.3", "@jest/core@^26.6.3":
+  version "26.6.3"
+  resolved "https://registry.yarnpkg.com/@jest/core/-/core-26.6.3.tgz#7639fcb3833d748a4656ada54bde193051e45fad"
+  integrity sha512-xvV1kKbhfUqFVuZ8Cyo+JPpipAHHAV3kcDBftiduK8EICXmTFddryy3P7NfZt8Pv37rA9nEJBKCCkglCPt/Xjw==
+  dependencies:
+    "@jest/console" "^26.6.2"
+    "@jest/reporters" "^26.6.2"
+    "@jest/test-result" "^26.6.2"
+    "@jest/transform" "^26.6.2"
+    "@jest/types" "^26.6.2"
+    "@types/node" "*"
+    ansi-escapes "^4.2.1"
+    chalk "^4.0.0"
+    exit "^0.1.2"
+    graceful-fs "^4.2.4"
+    jest-changed-files "^26.6.2"
+    jest-config "^26.6.3"
+    jest-haste-map "^26.6.2"
+    jest-message-util "^26.6.2"
+    jest-regex-util "^26.0.0"
+    jest-resolve "^26.6.2"
+    jest-resolve-dependencies "^26.6.3"
+    jest-runner "^26.6.3"
+    jest-runtime "^26.6.3"
+    jest-snapshot "^26.6.2"
+    jest-util "^26.6.2"
+    jest-validate "^26.6.2"
+    jest-watcher "^26.6.2"
+    micromatch "^4.0.2"
+    p-each-series "^2.1.0"
+    rimraf "^3.0.0"
+    slash "^3.0.0"
+    strip-ansi "^6.0.0"
+
+"@jest/environment@^26.6.2":
+  version "26.6.2"
+  resolved "https://registry.yarnpkg.com/@jest/environment/-/environment-26.6.2.tgz#ba364cc72e221e79cc8f0a99555bf5d7577cf92c"
+  integrity sha512-nFy+fHl28zUrRsCeMB61VDThV1pVTtlEokBRgqPrcT1JNq4yRNIyTHfyht6PqtUvY9IsuLGTrbG8kPXjSZIZwA==
+  dependencies:
+    "@jest/fake-timers" "^26.6.2"
+    "@jest/types" "^26.6.2"
+    "@types/node" "*"
+    jest-mock "^26.6.2"
+
+"@jest/fake-timers@^26.6.2":
+  version "26.6.2"
+  resolved "https://registry.yarnpkg.com/@jest/fake-timers/-/fake-timers-26.6.2.tgz#459c329bcf70cee4af4d7e3f3e67848123535aad"
+  integrity sha512-14Uleatt7jdzefLPYM3KLcnUl1ZNikaKq34enpb5XG9i81JpppDb5muZvonvKyrl7ftEHkKS5L5/eB/kxJ+bvA==
+  dependencies:
+    "@jest/types" "^26.6.2"
+    "@sinonjs/fake-timers" "^6.0.1"
+    "@types/node" "*"
+    jest-message-util "^26.6.2"
+    jest-mock "^26.6.2"
+    jest-util "^26.6.2"
+
+"@jest/globals@^26.6.2":
+  version "26.6.2"
+  resolved "https://registry.yarnpkg.com/@jest/globals/-/globals-26.6.2.tgz#5b613b78a1aa2655ae908eba638cc96a20df720a"
+  integrity sha512-85Ltnm7HlB/KesBUuALwQ68YTU72w9H2xW9FjZ1eL1U3lhtefjjl5c2MiUbpXt/i6LaPRvoOFJ22yCBSfQ0JIA==
+  dependencies:
+    "@jest/environment" "^26.6.2"
+    "@jest/types" "^26.6.2"
+    expect "^26.6.2"
+
+"@jest/reporters@^26.6.2":
+  version "26.6.2"
+  resolved "https://registry.yarnpkg.com/@jest/reporters/-/reporters-26.6.2.tgz#1f518b99637a5f18307bd3ecf9275f6882a667f6"
+  integrity sha512-h2bW53APG4HvkOnVMo8q3QXa6pcaNt1HkwVsOPMBV6LD/q9oSpxNSYZQYkAnjdMjrJ86UuYeLo+aEZClV6opnw==
+  dependencies:
+    "@bcoe/v8-coverage" "^0.2.3"
+    "@jest/console" "^26.6.2"
+    "@jest/test-result" "^26.6.2"
+    "@jest/transform" "^26.6.2"
+    "@jest/types" "^26.6.2"
+    chalk "^4.0.0"
+    collect-v8-coverage "^1.0.0"
+    exit "^0.1.2"
+    glob "^7.1.2"
+    graceful-fs "^4.2.4"
+    istanbul-lib-coverage "^3.0.0"
+    istanbul-lib-instrument "^4.0.3"
+    istanbul-lib-report "^3.0.0"
+    istanbul-lib-source-maps "^4.0.0"
+    istanbul-reports "^3.0.2"
+    jest-haste-map "^26.6.2"
+    jest-resolve "^26.6.2"
+    jest-util "^26.6.2"
+    jest-worker "^26.6.2"
+    slash "^3.0.0"
+    source-map "^0.6.0"
+    string-length "^4.0.1"
+    terminal-link "^2.0.0"
+    v8-to-istanbul "^7.0.0"
+  optionalDependencies:
+    node-notifier "^8.0.0"
+
+"@jest/source-map@^26.6.2":
+  version "26.6.2"
+  resolved "https://registry.yarnpkg.com/@jest/source-map/-/source-map-26.6.2.tgz#29af5e1e2e324cafccc936f218309f54ab69d535"
+  integrity sha512-YwYcCwAnNmOVsZ8mr3GfnzdXDAl4LaenZP5z+G0c8bzC9/dugL8zRmxZzdoTl4IaS3CryS1uWnROLPFmb6lVvA==
+  dependencies:
+    callsites "^3.0.0"
+    graceful-fs "^4.2.4"
+    source-map "^0.6.0"
+
+"@jest/test-result@^26.6.2":
+  version "26.6.2"
+  resolved "https://registry.yarnpkg.com/@jest/test-result/-/test-result-26.6.2.tgz#55da58b62df134576cc95476efa5f7949e3f5f18"
+  integrity sha512-5O7H5c/7YlojphYNrK02LlDIV2GNPYisKwHm2QTKjNZeEzezCbwYs9swJySv2UfPMyZ0VdsmMv7jIlD/IKYQpQ==
+  dependencies:
+    "@jest/console" "^26.6.2"
+    "@jest/types" "^26.6.2"
+    "@types/istanbul-lib-coverage" "^2.0.0"
+    collect-v8-coverage "^1.0.0"
+
+"@jest/test-sequencer@^26.6.3":
+  version "26.6.3"
+  resolved "https://registry.yarnpkg.com/@jest/test-sequencer/-/test-sequencer-26.6.3.tgz#98e8a45100863886d074205e8ffdc5a7eb582b17"
+  integrity sha512-YHlVIjP5nfEyjlrSr8t/YdNfU/1XEt7c5b4OxcXCjyRhjzLYu/rO69/WHPuYcbCWkz8kAeZVZp2N2+IOLLEPGw==
+  dependencies:
+    "@jest/test-result" "^26.6.2"
+    graceful-fs "^4.2.4"
+    jest-haste-map "^26.6.2"
+    jest-runner "^26.6.3"
+    jest-runtime "^26.6.3"
+
+"@jest/transform@^26.6.2":
+  version "26.6.2"
+  resolved "https://registry.yarnpkg.com/@jest/transform/-/transform-26.6.2.tgz#5ac57c5fa1ad17b2aae83e73e45813894dcf2e4b"
+  integrity sha512-E9JjhUgNzvuQ+vVAL21vlyfy12gP0GhazGgJC4h6qUt1jSdUXGWJ1wfu/X7Sd8etSgxV4ovT1pb9v5D6QW4XgA==
+  dependencies:
+    "@babel/core" "^7.1.0"
+    "@jest/types" "^26.6.2"
+    babel-plugin-istanbul "^6.0.0"
+    chalk "^4.0.0"
+    convert-source-map "^1.4.0"
+    fast-json-stable-stringify "^2.0.0"
+    graceful-fs "^4.2.4"
+    jest-haste-map "^26.6.2"
+    jest-regex-util "^26.0.0"
+    jest-util "^26.6.2"
+    micromatch "^4.0.2"
+    pirates "^4.0.1"
+    slash "^3.0.0"
+    source-map "^0.6.1"
+    write-file-atomic "^3.0.0"
+
+"@jest/types@^26.6.2":
+  version "26.6.2"
+  resolved "https://registry.yarnpkg.com/@jest/types/-/types-26.6.2.tgz#bef5a532030e1d88a2f5a6d933f84e97226ed48e"
+  integrity sha512-fC6QCp7Sc5sX6g8Tvbmj4XUTbyrik0akgRy03yjXbQaBWWNWGE7SGtJk98m0N8nzegD/7SggrUlivxo5ax4KWQ==
+  dependencies:
+    "@types/istanbul-lib-coverage" "^2.0.0"
+    "@types/istanbul-reports" "^3.0.0"
+    "@types/node" "*"
+    "@types/yargs" "^15.0.0"
+    chalk "^4.0.0"
+
+"@reasonml-community/graphql-ppx@^1.0.0":
+  version "1.0.2"
+  resolved "https://registry.yarnpkg.com/@reasonml-community/graphql-ppx/-/graphql-ppx-1.0.2.tgz#5641413a8873d412dc6a0b00a1fe273323406fb8"
+  integrity sha512-A4KURw/hpGWvW6Dkmg8LpF3GlWZ1FCyP3MhHLUlmViboZ51bRSnO0lU4hK8TE6x5/B2Uik59YACJZX47VqWmOw==
+
+"@rescript/react@^0.10.1":
+  version "0.10.1"
+  resolved "https://registry.yarnpkg.com/@rescript/react/-/react-0.10.1.tgz#ddce66ba664a104354d559c350ca4ebf17ab5a26"
+  integrity sha512-5eIfGnV1yhjv03ktK6fQ6iEfsZKXKXXrq5hx4+ngEY4R/RU8o/oH9ne375m9RJMugV/jsE8hMoEeSSg2YQy3Ag==
+
+"@sinonjs/commons@^1.7.0":
+  version "1.8.2"
+  resolved "https://registry.yarnpkg.com/@sinonjs/commons/-/commons-1.8.2.tgz#858f5c4b48d80778fde4b9d541f27edc0d56488b"
+  integrity sha512-sruwd86RJHdsVf/AtBoijDmUqJp3B6hF/DGC23C+JaegnDHaZyewCjoVGTdg3J0uz3Zs7NnIT05OBOmML72lQw==
+  dependencies:
+    type-detect "4.0.8"
+
+"@sinonjs/fake-timers@^6.0.1":
+  version "6.0.1"
+  resolved "https://registry.yarnpkg.com/@sinonjs/fake-timers/-/fake-timers-6.0.1.tgz#293674fccb3262ac782c7aadfdeca86b10c75c40"
+  integrity sha512-MZPUxrmFubI36XS1DI3qmI0YdN1gks62JtFZvxR67ljjSNCeK6U08Zx4msEWOXuofgqUt6zPHSi1H9fbjR/NRA==
+  dependencies:
+    "@sinonjs/commons" "^1.7.0"
+
+"@types/babel__core@^7.0.0", "@types/babel__core@^7.1.7":
+  version "7.1.12"
+  resolved "https://registry.yarnpkg.com/@types/babel__core/-/babel__core-7.1.12.tgz#4d8e9e51eb265552a7e4f1ff2219ab6133bdfb2d"
+  integrity sha512-wMTHiiTiBAAPebqaPiPDLFA4LYPKr6Ph0Xq/6rq1Ur3v66HXyG+clfR9CNETkD7MQS8ZHvpQOtA53DLws5WAEQ==
+  dependencies:
+    "@babel/parser" "^7.1.0"
+    "@babel/types" "^7.0.0"
+    "@types/babel__generator" "*"
+    "@types/babel__template" "*"
+    "@types/babel__traverse" "*"
+
+"@types/babel__generator@*":
+  version "7.6.2"
+  resolved "https://registry.yarnpkg.com/@types/babel__generator/-/babel__generator-7.6.2.tgz#f3d71178e187858f7c45e30380f8f1b7415a12d8"
+  integrity sha512-MdSJnBjl+bdwkLskZ3NGFp9YcXGx5ggLpQQPqtgakVhsWK0hTtNYhjpZLlWQTviGTvF8at+Bvli3jV7faPdgeQ==
+  dependencies:
+    "@babel/types" "^7.0.0"
+
+"@types/babel__template@*":
+  version "7.4.0"
+  resolved "https://registry.yarnpkg.com/@types/babel__template/-/babel__template-7.4.0.tgz#0c888dd70b3ee9eebb6e4f200e809da0076262be"
+  integrity sha512-NTPErx4/FiPCGScH7foPyr+/1Dkzkni+rHiYHHoTjvwou7AQzJkNeD60A9CXRy+ZEN2B1bggmkTMCDb+Mv5k+A==
+  dependencies:
+    "@babel/parser" "^7.1.0"
+    "@babel/types" "^7.0.0"
+
+"@types/babel__traverse@*", "@types/babel__traverse@^7.0.4", "@types/babel__traverse@^7.0.6":
+  version "7.11.0"
+  resolved "https://registry.yarnpkg.com/@types/babel__traverse/-/babel__traverse-7.11.0.tgz#b9a1efa635201ba9bc850323a8793ee2d36c04a0"
+  integrity sha512-kSjgDMZONiIfSH1Nxcr5JIRMwUetDki63FSQfpTCz8ogF3Ulqm8+mr5f78dUYs6vMiB6gBusQqfQmBvHZj/lwg==
+  dependencies:
+    "@babel/types" "^7.3.0"
+
+"@types/graceful-fs@^4.1.2":
+  version "4.1.5"
+  resolved "https://registry.yarnpkg.com/@types/graceful-fs/-/graceful-fs-4.1.5.tgz#21ffba0d98da4350db64891f92a9e5db3cdb4e15"
+  integrity sha512-anKkLmZZ+xm4p8JWBf4hElkM4XR+EZeA2M9BAkkTldmcyDY4mbdIJnRghDJH3Ov5ooY7/UAoENtmdMSkaAd7Cw==
+  dependencies:
+    "@types/node" "*"
+
+"@types/istanbul-lib-coverage@*", "@types/istanbul-lib-coverage@^2.0.0", "@types/istanbul-lib-coverage@^2.0.1":
+  version "2.0.3"
+  resolved "https://registry.yarnpkg.com/@types/istanbul-lib-coverage/-/istanbul-lib-coverage-2.0.3.tgz#4ba8ddb720221f432e443bd5f9117fd22cfd4762"
+  integrity sha512-sz7iLqvVUg1gIedBOvlkxPlc8/uVzyS5OwGz1cKjXzkl3FpL3al0crU8YGU1WoHkxn0Wxbw5tyi6hvzJKNzFsw==
+
+"@types/istanbul-lib-report@*":
+  version "3.0.0"
+  resolved "https://registry.yarnpkg.com/@types/istanbul-lib-report/-/istanbul-lib-report-3.0.0.tgz#c14c24f18ea8190c118ee7562b7ff99a36552686"
+  integrity sha512-plGgXAPfVKFoYfa9NpYDAkseG+g6Jr294RqeqcqDixSbU34MZVJRi/P+7Y8GDpzkEwLaGZZOpKIEmeVZNtKsrg==
+  dependencies:
+    "@types/istanbul-lib-coverage" "*"
+
+"@types/istanbul-reports@^3.0.0":
+  version "3.0.0"
+  resolved "https://registry.yarnpkg.com/@types/istanbul-reports/-/istanbul-reports-3.0.0.tgz#508b13aa344fa4976234e75dddcc34925737d821"
+  integrity sha512-nwKNbvnwJ2/mndE9ItP/zc2TCzw6uuodnF4EHYWD+gCQDVBuRQL5UzbZD0/ezy1iKsFU2ZQiDqg4M9dN4+wZgA==
+  dependencies:
+    "@types/istanbul-lib-report" "*"
+
+"@types/node@*":
+  version "14.14.27"
+  resolved "https://registry.yarnpkg.com/@types/node/-/node-14.14.27.tgz#c7127f8da0498993e13b1a42faf1303d3110d2f2"
+  integrity sha512-Ecfmo4YDQPwuqTCl1yBxLV5ihKfRlkBmzUEDcfIRvDxOTGQEeikr317Ln7Gcv0tjA8dVgKI3rniqW2G1OyKDng==
+
+"@types/normalize-package-data@^2.4.0":
+  version "2.4.0"
+  resolved "https://registry.yarnpkg.com/@types/normalize-package-data/-/normalize-package-data-2.4.0.tgz#e486d0d97396d79beedd0a6e33f4534ff6b4973e"
+  integrity sha512-f5j5b/Gf71L+dbqxIpQ4Z2WlmI/mPJ0fOkGGmFgtb6sAu97EPczzbS3/tJKxmcYDj55OX6ssqwDAWOHIYDRDGA==
+
+"@types/prettier@^2.0.0":
+  version "2.2.0"
+  resolved "https://registry.yarnpkg.com/@types/prettier/-/prettier-2.2.0.tgz#a4e8205a4955690eef712a6d0394a1d2e121e721"
+  integrity sha512-O3SQC6+6AySHwrspYn2UvC6tjo6jCTMMmylxZUFhE1CulVu5l3AxU6ca9lrJDTQDVllF62LIxVSx5fuYL6LiZg==
+
+"@types/stack-utils@^2.0.0":
+  version "2.0.0"
+  resolved "https://registry.yarnpkg.com/@types/stack-utils/-/stack-utils-2.0.0.tgz#7036640b4e21cc2f259ae826ce843d277dad8cff"
+  integrity sha512-RJJrrySY7A8havqpGObOB4W92QXKJo63/jFLLgpvOtsGUqbQZ9Sbgl35KMm1DjC6j7AvmmU2bIno+3IyEaemaw==
+
+"@types/ungap__global-this@^0.3.1":
+  version "0.3.1"
+  resolved "https://registry.yarnpkg.com/@types/ungap__global-this/-/ungap__global-this-0.3.1.tgz#18ce9f657da556037a29d50604335614ce703f4c"
+  integrity sha512-+/DsiV4CxXl6ZWefwHZDXSe1Slitz21tom38qPCaG0DYCS1NnDPIQDTKcmQ/tvK/edJUKkmuIDBJbmKDiB0r/g==
+
+"@types/yargs-parser@*":
+  version "20.2.0"
+  resolved "https://registry.yarnpkg.com/@types/yargs-parser/-/yargs-parser-20.2.0.tgz#dd3e6699ba3237f0348cd085e4698780204842f9"
+  integrity sha512-37RSHht+gzzgYeobbG+KWryeAW8J33Nhr69cjTqSYymXVZEN9NbRYWoYlRtDhHKPVT1FyNKwaTPC1NynKZpzRA==
+
+"@types/yargs@^15.0.0":
+  version "15.0.13"
+  resolved "https://registry.yarnpkg.com/@types/yargs/-/yargs-15.0.13.tgz#34f7fec8b389d7f3c1fd08026a5763e072d3c6dc"
+  integrity sha512-kQ5JNTrbDv3Rp5X2n/iUu37IJBDU2gsZ5R/g1/KHOOEc5IKfUFjXT6DENPGduh08I/pamwtEq4oul7gUqKTQDQ==
+  dependencies:
+    "@types/yargs-parser" "*"
+
+"@types/zen-observable@^0.8.0":
+  version "0.8.2"
+  resolved "https://registry.yarnpkg.com/@types/zen-observable/-/zen-observable-0.8.2.tgz#808c9fa7e4517274ed555fa158f2de4b4f468e71"
+  integrity sha512-HrCIVMLjE1MOozVoD86622S7aunluLb2PJdPfb3nYiEtohm8mIB/vyv0Fd37AdeMFrTUQXEunw78YloMA3Qilg==
+
+"@ungap/global-this@^0.4.2":
+  version "0.4.4"
+  resolved "https://registry.yarnpkg.com/@ungap/global-this/-/global-this-0.4.4.tgz#8a1b2cfcd3e26e079a847daba879308c924dd695"
+  integrity sha512-mHkm6FvepJECMNthFuIgpAEFmPOk71UyXuIxYfjytvFTnSDBIz7jmViO+LfHI/AjrazWije0PnSP3+/NlwzqtA==
+
+"@wry/context@^0.5.2":
+  version "0.5.4"
+  resolved "https://registry.yarnpkg.com/@wry/context/-/context-0.5.4.tgz#b6c28038872e0a0e1ff14eb40b5bf4cab2ab4e06"
+  integrity sha512-/pktJKHUXDr4D6TJqWgudOPJW2Z+Nb+bqk40jufA3uTkLbnCRKdJPiYDIa/c7mfcPH8Hr6O8zjCERpg5Sq04Zg==
+  dependencies:
+    tslib "^1.14.1"
+
+"@wry/equality@^0.3.0":
+  version "0.3.2"
+  resolved "https://registry.yarnpkg.com/@wry/equality/-/equality-0.3.2.tgz#566a8d05225f1e559fc6589c8b50fa085413c6be"
+  integrity sha512-yi0VRqw+ygqM/WVZUze5meAhe2evOHBFXqK8onNVdNNB+Tyn8/07FZpeDklECBHeT9KN9DY2JpCVGNQY6RCRDg==
+  dependencies:
+    tslib "^1.14.1"
+
+"@wry/trie@^0.2.1":
+  version "0.2.2"
+  resolved "https://registry.yarnpkg.com/@wry/trie/-/trie-0.2.2.tgz#99f20f0fcbbcda17006069b155c826cbabfc402f"
+  integrity sha512-OxqBB39x6MfHaa2HpMiRMfhuUnQTddD32Ko020eBeJXq87ivX6xnSSnzKHVbA21p7iqBASz8n/07b6W5wW1BVQ==
+  dependencies:
+    tslib "^1.14.1"
+
+abab@^2.0.3:
+  version "2.0.5"
+  resolved "https://registry.yarnpkg.com/abab/-/abab-2.0.5.tgz#c0b678fb32d60fc1219c784d6a826fe385aeb79a"
+  integrity sha512-9IK9EadsbHo6jLWIpxpR6pL0sazTXV6+SQv25ZB+F7Bj9mJNaOc4nCRabwd5M/JwmUa8idz6Eci6eKfJryPs6Q==
+
+acorn-globals@^6.0.0:
+  version "6.0.0"
+  resolved "https://registry.yarnpkg.com/acorn-globals/-/acorn-globals-6.0.0.tgz#46cdd39f0f8ff08a876619b55f5ac8a6dc770b45"
+  integrity sha512-ZQl7LOWaF5ePqqcX4hLuv/bLXYQNfNWw2c0/yX/TsPRKamzHcTGQnlCjHT3TsmkOUVEPS3crCxiPfdzE/Trlhg==
+  dependencies:
+    acorn "^7.1.1"
+    acorn-walk "^7.1.1"
+
+acorn-walk@^7.1.1:
+  version "7.2.0"
+  resolved "https://registry.yarnpkg.com/acorn-walk/-/acorn-walk-7.2.0.tgz#0de889a601203909b0fbe07b8938dc21d2e967bc"
+  integrity sha512-OPdCF6GsMIP+Az+aWfAAOEt2/+iVDKE7oy6lJ098aoe59oAmK76qV6Gw60SbZ8jHuG2wH058GF4pLFbYamYrVA==
+
+acorn@^7.1.1:
+  version "7.4.1"
+  resolved "https://registry.yarnpkg.com/acorn/-/acorn-7.4.1.tgz#feaed255973d2e77555b83dbc08851a6c63520fa"
+  integrity sha512-nQyp0o1/mNdbTO1PO6kHkwSrmgZ0MT/jCCpNiwbUjGoRN4dlBhqJtoQuCnEOKzgTVwg0ZWiCoQy6SxMebQVh8A==
+
+ajv@^6.12.3:
+  version "6.12.6"
+  resolved "https://registry.yarnpkg.com/ajv/-/ajv-6.12.6.tgz#baf5a62e802b07d977034586f8c3baf5adf26df4"
+  integrity sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==
+  dependencies:
+    fast-deep-equal "^3.1.1"
+    fast-json-stable-stringify "^2.0.0"
+    json-schema-traverse "^0.4.1"
+    uri-js "^4.2.2"
+
+ansi-escapes@^4.2.1:
+  version "4.3.1"
+  resolved "https://registry.yarnpkg.com/ansi-escapes/-/ansi-escapes-4.3.1.tgz#a5c47cc43181f1f38ffd7076837700d395522a61"
+  integrity sha512-JWF7ocqNrp8u9oqpgV+wH5ftbt+cfvv+PTjOvKLT3AdYly/LmORARfEVT1iyjwN+4MqE5UmVKoAdIBqeoCHgLA==
+  dependencies:
+    type-fest "^0.11.0"
+
+ansi-regex@^5.0.0:
+  version "5.0.0"
+  resolved "https://registry.yarnpkg.com/ansi-regex/-/ansi-regex-5.0.0.tgz#388539f55179bf39339c81af30a654d69f87cb75"
+  integrity sha512-bY6fj56OUQ0hU1KjFNDQuJFezqKdrAyFdIevADiqrWHwSlbmBNMHp5ak2f40Pm8JTFyM2mqxkG6ngkHO11f/lg==
+
+ansi-styles@^3.2.1:
+  version "3.2.1"
+  resolved "https://registry.yarnpkg.com/ansi-styles/-/ansi-styles-3.2.1.tgz#41fbb20243e50b12be0f04b8dedbf07520ce841d"
+  integrity sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==
+  dependencies:
+    color-convert "^1.9.0"
+
+ansi-styles@^4.0.0, ansi-styles@^4.1.0:
+  version "4.3.0"
+  resolved "https://registry.yarnpkg.com/ansi-styles/-/ansi-styles-4.3.0.tgz#edd803628ae71c04c85ae7a0906edad34b648937"
+  integrity sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==
+  dependencies:
+    color-convert "^2.0.1"
+
+anymatch@^2.0.0:
+  version "2.0.0"
+  resolved "https://registry.yarnpkg.com/anymatch/-/anymatch-2.0.0.tgz#bcb24b4f37934d9aa7ac17b4adaf89e7c76ef2eb"
+  integrity sha512-5teOsQWABXHHBFP9y3skS5P3d/WfWXpv3FUpy+LorMrNYaT9pI4oLMQX7jzQ2KklNpGpWHzdCXTDT2Y3XGlZBw==
+  dependencies:
+    micromatch "^3.1.4"
+    normalize-path "^2.1.1"
+
+anymatch@^3.0.3:
+  version "3.1.1"
+  resolved "https://registry.yarnpkg.com/anymatch/-/anymatch-3.1.1.tgz#c55ecf02185e2469259399310c173ce31233b142"
+  integrity sha512-mM8522psRCqzV+6LhomX5wgp25YVibjh8Wj23I5RPkPppSVSjyKD2A2mBJmWGa+KN7f2D6LNh9jkBCeyLktzjg==
+  dependencies:
+    normalize-path "^3.0.0"
+    picomatch "^2.0.4"
+
+argparse@^1.0.7:
+  version "1.0.10"
+  resolved "https://registry.yarnpkg.com/argparse/-/argparse-1.0.10.tgz#bcd6791ea5ae09725e17e5ad988134cd40b3d911"
+  integrity sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==
+  dependencies:
+    sprintf-js "~1.0.2"
+
+arr-diff@^4.0.0:
+  version "4.0.0"
+  resolved "https://registry.yarnpkg.com/arr-diff/-/arr-diff-4.0.0.tgz#d6461074febfec71e7e15235761a329a5dc7c520"
+  integrity sha1-1kYQdP6/7HHn4VI1dhoyml3HxSA=
+
+arr-flatten@^1.1.0:
+  version "1.1.0"
+  resolved "https://registry.yarnpkg.com/arr-flatten/-/arr-flatten-1.1.0.tgz#36048bbff4e7b47e136644316c99669ea5ae91f1"
+  integrity sha512-L3hKV5R/p5o81R7O02IGnwpDmkp6E982XhtbuwSe3O4qOtMMMtodicASA1Cny2U+aCXcNpml+m4dPsvsJ3jatg==
+
+arr-union@^3.1.0:
+  version "3.1.0"
+  resolved "https://registry.yarnpkg.com/arr-union/-/arr-union-3.1.0.tgz#e39b09aea9def866a8f206e288af63919bae39c4"
+  integrity sha1-45sJrqne+Gao8gbiiK9jkZuuOcQ=
+
+array-unique@^0.3.2:
+  version "0.3.2"
+  resolved "https://registry.yarnpkg.com/array-unique/-/array-unique-0.3.2.tgz#a894b75d4bc4f6cd679ef3244a9fd8f46ae2d428"
+  integrity sha1-qJS3XUvE9s1nnvMkSp/Y9Gri1Cg=
+
+asn1@~0.2.3:
+  version "0.2.4"
+  resolved "https://registry.yarnpkg.com/asn1/-/asn1-0.2.4.tgz#8d2475dfab553bb33e77b54e59e880bb8ce23136"
+  integrity sha512-jxwzQpLQjSmWXgwaCZE9Nz+glAG01yF1QnWgbhGwHI5A6FRIEY6IVqtHhIepHqI7/kyEyQEagBC5mBEFlIYvdg==
+  dependencies:
+    safer-buffer "~2.1.0"
+
+assert-plus@1.0.0, assert-plus@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/assert-plus/-/assert-plus-1.0.0.tgz#f12e0f3c5d77b0b1cdd9146942e4e96c1e4dd525"
+  integrity sha1-8S4PPF13sLHN2RRpQuTpbB5N1SU=
+
+assign-symbols@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/assign-symbols/-/assign-symbols-1.0.0.tgz#59667f41fadd4f20ccbc2bb96b8d4f7f78ec0367"
+  integrity sha1-WWZ/QfrdTyDMvCu5a41Pf3jsA2c=
+
+async-limiter@~1.0.0:
+  version "1.0.1"
+  resolved "https://registry.yarnpkg.com/async-limiter/-/async-limiter-1.0.1.tgz#dd379e94f0db8310b08291f9d64c3209766617fd"
+  integrity sha512-csOlWGAcRFJaI6m+F2WKdnMKr4HhdhFVBk0H/QbJFMCr+uO2kwohwXQPxw/9OCxp05r5ghVBFSyioixx3gfkNQ==
+
+asynckit@^0.4.0:
+  version "0.4.0"
+  resolved "https://registry.yarnpkg.com/asynckit/-/asynckit-0.4.0.tgz#c79ed97f7f34cb8f2ba1bc9790bcc366474b4b79"
+  integrity sha1-x57Zf380y48robyXkLzDZkdLS3k=
+
+atob@^2.1.2:
+  version "2.1.2"
+  resolved "https://registry.yarnpkg.com/atob/-/atob-2.1.2.tgz#6d9517eb9e030d2436666651e86bd9f6f13533c9"
+  integrity sha512-Wm6ukoaOGJi/73p/cl2GvLjTI5JM1k/O14isD73YML8StrH/7/lRFgmg8nICZgD3bZZvjwCGxtMOD3wWNAu8cg==
+
+aws-sign2@~0.7.0:
+  version "0.7.0"
+  resolved "https://registry.yarnpkg.com/aws-sign2/-/aws-sign2-0.7.0.tgz#b46e890934a9591f2d2f6f86d7e6a9f1b3fe76a8"
+  integrity sha1-tG6JCTSpWR8tL2+G1+ap8bP+dqg=
+
+aws4@^1.8.0:
+  version "1.11.0"
+  resolved "https://registry.yarnpkg.com/aws4/-/aws4-1.11.0.tgz#d61f46d83b2519250e2784daf5b09479a8b41c59"
+  integrity sha512-xh1Rl34h6Fi1DC2WWKfxUTVqRsNnr6LsKz2+hfwDxQJWmrx8+c7ylaqBMcHfl1U1r2dsifOvKX3LQuLNZ+XSvA==
+
+babel-jest@^26.6.3:
+  version "26.6.3"
+  resolved "https://registry.yarnpkg.com/babel-jest/-/babel-jest-26.6.3.tgz#d87d25cb0037577a0c89f82e5755c5d293c01056"
+  integrity sha512-pl4Q+GAVOHwvjrck6jKjvmGhnO3jHX/xuB9d27f+EJZ/6k+6nMuPjorrYp7s++bKKdANwzElBWnLWaObvTnaZA==
+  dependencies:
+    "@jest/transform" "^26.6.2"
+    "@jest/types" "^26.6.2"
+    "@types/babel__core" "^7.1.7"
+    babel-plugin-istanbul "^6.0.0"
+    babel-preset-jest "^26.6.2"
+    chalk "^4.0.0"
+    graceful-fs "^4.2.4"
+    slash "^3.0.0"
+
+babel-plugin-istanbul@^6.0.0:
+  version "6.0.0"
+  resolved "https://registry.yarnpkg.com/babel-plugin-istanbul/-/babel-plugin-istanbul-6.0.0.tgz#e159ccdc9af95e0b570c75b4573b7c34d671d765"
+  integrity sha512-AF55rZXpe7trmEylbaE1Gv54wn6rwU03aptvRoVIGP8YykoSxqdVLV1TfwflBCE/QtHmqtP8SWlTENqbK8GCSQ==
+  dependencies:
+    "@babel/helper-plugin-utils" "^7.0.0"
+    "@istanbuljs/load-nyc-config" "^1.0.0"
+    "@istanbuljs/schema" "^0.1.2"
+    istanbul-lib-instrument "^4.0.0"
+    test-exclude "^6.0.0"
+
+babel-plugin-jest-hoist@^26.6.2:
+  version "26.6.2"
+  resolved "https://registry.yarnpkg.com/babel-plugin-jest-hoist/-/babel-plugin-jest-hoist-26.6.2.tgz#8185bd030348d254c6d7dd974355e6a28b21e62d"
+  integrity sha512-PO9t0697lNTmcEHH69mdtYiOIkkOlj9fySqfO3K1eCcdISevLAE0xY59VLLUj0SoiPiTX/JU2CYFpILydUa5Lw==
+  dependencies:
+    "@babel/template" "^7.3.3"
+    "@babel/types" "^7.3.3"
+    "@types/babel__core" "^7.0.0"
+    "@types/babel__traverse" "^7.0.6"
+
+babel-preset-current-node-syntax@^1.0.0:
+  version "1.0.1"
+  resolved "https://registry.yarnpkg.com/babel-preset-current-node-syntax/-/babel-preset-current-node-syntax-1.0.1.tgz#b4399239b89b2a011f9ddbe3e4f401fc40cff73b"
+  integrity sha512-M7LQ0bxarkxQoN+vz5aJPsLBn77n8QgTFmo8WK0/44auK2xlCXrYcUxHFxgU7qW5Yzw/CjmLRK2uJzaCd7LvqQ==
+  dependencies:
+    "@babel/plugin-syntax-async-generators" "^7.8.4"
+    "@babel/plugin-syntax-bigint" "^7.8.3"
+    "@babel/plugin-syntax-class-properties" "^7.8.3"
+    "@babel/plugin-syntax-import-meta" "^7.8.3"
+    "@babel/plugin-syntax-json-strings" "^7.8.3"
+    "@babel/plugin-syntax-logical-assignment-operators" "^7.8.3"
+    "@babel/plugin-syntax-nullish-coalescing-operator" "^7.8.3"
+    "@babel/plugin-syntax-numeric-separator" "^7.8.3"
+    "@babel/plugin-syntax-object-rest-spread" "^7.8.3"
+    "@babel/plugin-syntax-optional-catch-binding" "^7.8.3"
+    "@babel/plugin-syntax-optional-chaining" "^7.8.3"
+    "@babel/plugin-syntax-top-level-await" "^7.8.3"
+
+babel-preset-jest@^26.6.2:
+  version "26.6.2"
+  resolved "https://registry.yarnpkg.com/babel-preset-jest/-/babel-preset-jest-26.6.2.tgz#747872b1171df032252426586881d62d31798fee"
+  integrity sha512-YvdtlVm9t3k777c5NPQIv6cxFFFapys25HiUmuSgHwIZhfifweR5c5Sf5nwE3MAbfu327CYSvps8Yx6ANLyleQ==
+  dependencies:
+    babel-plugin-jest-hoist "^26.6.2"
+    babel-preset-current-node-syntax "^1.0.0"
+
+backo2@^1.0.2:
+  version "1.0.2"
+  resolved "https://registry.yarnpkg.com/backo2/-/backo2-1.0.2.tgz#31ab1ac8b129363463e35b3ebb69f4dfcfba7947"
+  integrity sha1-MasayLEpNjRj41s+u2n038+6eUc=
+
+balanced-match@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/balanced-match/-/balanced-match-1.0.0.tgz#89b4d199ab2bee49de164ea02b89ce462d71b767"
+  integrity sha1-ibTRmasr7kneFk6gK4nORi1xt2c=
+
+base@^0.11.1:
+  version "0.11.2"
+  resolved "https://registry.yarnpkg.com/base/-/base-0.11.2.tgz#7bde5ced145b6d551a90db87f83c558b4eb48a8f"
+  integrity sha512-5T6P4xPgpp0YDFvSWwEZ4NoE3aM4QBQXDzmVbraCkFj8zHM+mba8SyqB5DbZWyR7mYHo6Y7BdQo3MoA4m0TeQg==
+  dependencies:
+    cache-base "^1.0.1"
+    class-utils "^0.3.5"
+    component-emitter "^1.2.1"
+    define-property "^1.0.0"
+    isobject "^3.0.1"
+    mixin-deep "^1.2.0"
+    pascalcase "^0.1.1"
+
+bcrypt-pbkdf@^1.0.0:
+  version "1.0.2"
+  resolved "https://registry.yarnpkg.com/bcrypt-pbkdf/-/bcrypt-pbkdf-1.0.2.tgz#a4301d389b6a43f9b67ff3ca11a3f6637e360e9e"
+  integrity sha1-pDAdOJtqQ/m2f/PKEaP2Y342Dp4=
+  dependencies:
+    tweetnacl "^0.14.3"
+
+brace-expansion@^1.1.7:
+  version "1.1.11"
+  resolved "https://registry.yarnpkg.com/brace-expansion/-/brace-expansion-1.1.11.tgz#3c7fcbf529d87226f3d2f52b966ff5271eb441dd"
+  integrity sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==
+  dependencies:
+    balanced-match "^1.0.0"
+    concat-map "0.0.1"
+
+braces@^2.3.1:
+  version "2.3.2"
+  resolved "https://registry.yarnpkg.com/braces/-/braces-2.3.2.tgz#5979fd3f14cd531565e5fa2df1abfff1dfaee729"
+  integrity sha512-aNdbnj9P8PjdXU4ybaWLK2IF3jc/EoDYbC7AazW6to3TRsfXxscC9UXOB5iDiEQrkyIbWp2SLQda4+QAa7nc3w==
+  dependencies:
+    arr-flatten "^1.1.0"
+    array-unique "^0.3.2"
+    extend-shallow "^2.0.1"
+    fill-range "^4.0.0"
+    isobject "^3.0.1"
+    repeat-element "^1.1.2"
+    snapdragon "^0.8.1"
+    snapdragon-node "^2.0.1"
+    split-string "^3.0.2"
+    to-regex "^3.0.1"
+
+braces@^3.0.1:
+  version "3.0.2"
+  resolved "https://registry.yarnpkg.com/braces/-/braces-3.0.2.tgz#3454e1a462ee8d599e236df336cd9ea4f8afe107"
+  integrity sha512-b8um+L1RzM3WDSzvhm6gIz1yfTbBt6YTlcEKAvsmqCZZFw46z626lVj9j1yEPW33H5H+lBQpZMP1k8l+78Ha0A==
+  dependencies:
+    fill-range "^7.0.1"
+
+browser-process-hrtime@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/browser-process-hrtime/-/browser-process-hrtime-1.0.0.tgz#3c9b4b7d782c8121e56f10106d84c0d0ffc94626"
+  integrity sha512-9o5UecI3GhkpM6DrXr69PblIuWxPKk9Y0jHBRhdocZ2y7YECBFCsHm79Pr3OyR2AvjhDkabFJaDJMYRazHgsow==
+
+bs-platform@8.4.2:
+  version "8.4.2"
+  resolved "https://registry.yarnpkg.com/bs-platform/-/bs-platform-8.4.2.tgz#778dabd1dfb3bc95e0086c58dabae74e4ebdee8a"
+  integrity sha512-9q7S4/LLV/a68CweN382NJdCCr/lOSsJR3oQYnmPK98ChfO/AdiA3lYQkQTp6T+U0I5Z5RypUAUprNstwDtMDQ==
+
+bser@2.1.1:
+  version "2.1.1"
+  resolved "https://registry.yarnpkg.com/bser/-/bser-2.1.1.tgz#e6787da20ece9d07998533cfd9de6f5c38f4bc05"
+  integrity sha512-gQxTNE/GAfIIrmHLUE3oJyp5FO6HRBfhjnw4/wMmA63ZGDJnWBmgY/lyQBpnDUkGmAhbSe39tx2d/iTOAfglwQ==
+  dependencies:
+    node-int64 "^0.4.0"
+
+buffer-from@^1.0.0:
+  version "1.1.1"
+  resolved "https://registry.yarnpkg.com/buffer-from/-/buffer-from-1.1.1.tgz#32713bc028f75c02fdb710d7c7bcec1f2c6070ef"
+  integrity sha512-MQcXEUbCKtEo7bhqEs6560Hyd4XaovZlO/k9V3hjVUF/zwW7KBVdSK4gIt/bzwS9MbR5qob+F5jusZsb0YQK2A==
+
+cache-base@^1.0.1:
+  version "1.0.1"
+  resolved "https://registry.yarnpkg.com/cache-base/-/cache-base-1.0.1.tgz#0a7f46416831c8b662ee36fe4e7c59d76f666ab2"
+  integrity sha512-AKcdTnFSWATd5/GCPRxr2ChwIJ85CeyrEyjRHlKxQ56d4XJMGym0uAiKn0xbLOGOl3+yRpOTi484dVCEc5AUzQ==
+  dependencies:
+    collection-visit "^1.0.0"
+    component-emitter "^1.2.1"
+    get-value "^2.0.6"
+    has-value "^1.0.0"
+    isobject "^3.0.1"
+    set-value "^2.0.0"
+    to-object-path "^0.3.0"
+    union-value "^1.0.0"
+    unset-value "^1.0.0"
+
+callsites@^3.0.0:
+  version "3.1.0"
+  resolved "https://registry.yarnpkg.com/callsites/-/callsites-3.1.0.tgz#b3630abd8943432f54b3f0519238e33cd7df2f73"
+  integrity sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==
+
+camelcase@^5.0.0, camelcase@^5.3.1:
+  version "5.3.1"
+  resolved "https://registry.yarnpkg.com/camelcase/-/camelcase-5.3.1.tgz#e3c9b31569e106811df242f715725a1f4c494320"
+  integrity sha512-L28STB170nwWS63UjtlEOE3dldQApaJXZkOI1uMFfzf3rRuPegHaHesyee+YxQ+W6SvRDQV6UrdOdRiR153wJg==
+
+camelcase@^6.0.0:
+  version "6.2.0"
+  resolved "https://registry.yarnpkg.com/camelcase/-/camelcase-6.2.0.tgz#924af881c9d525ac9d87f40d964e5cea982a1809"
+  integrity sha512-c7wVvbw3f37nuobQNtgsgG9POC9qMbNuMQmTCqZv23b6MIz0fcYpBiOlv9gEN/hdLdnZTDQhg6e9Dq5M1vKvfg==
+
+capture-exit@^2.0.0:
+  version "2.0.0"
+  resolved "https://registry.yarnpkg.com/capture-exit/-/capture-exit-2.0.0.tgz#fb953bfaebeb781f62898239dabb426d08a509a4"
+  integrity sha512-PiT/hQmTonHhl/HFGN+Lx3JJUznrVYJ3+AQsnthneZbvW7x+f08Tk7yLJTLEOUvBTbduLeeBkxEaYXUOUrRq6g==
+  dependencies:
+    rsvp "^4.8.4"
+
+caseless@~0.12.0:
+  version "0.12.0"
+  resolved "https://registry.yarnpkg.com/caseless/-/caseless-0.12.0.tgz#1b681c21ff84033c826543090689420d187151dc"
+  integrity sha1-G2gcIf+EAzyCZUMJBolCDRhxUdw=
+
+chalk@^2.0.0:
+  version "2.4.2"
+  resolved "https://registry.yarnpkg.com/chalk/-/chalk-2.4.2.tgz#cd42541677a54333cf541a49108c1432b44c9424"
+  integrity sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==
+  dependencies:
+    ansi-styles "^3.2.1"
+    escape-string-regexp "^1.0.5"
+    supports-color "^5.3.0"
+
+chalk@^4.0.0:
+  version "4.1.0"
+  resolved "https://registry.yarnpkg.com/chalk/-/chalk-4.1.0.tgz#4e14870a618d9e2edd97dd8345fd9d9dc315646a"
+  integrity sha512-qwx12AxXe2Q5xQ43Ac//I6v5aXTipYrSESdOgzrN+9XjgEpyjpKuvSGaN4qE93f7TQTlerQQ8S+EQ0EyDoVL1A==
+  dependencies:
+    ansi-styles "^4.1.0"
+    supports-color "^7.1.0"
+
+char-regex@^1.0.2:
+  version "1.0.2"
+  resolved "https://registry.yarnpkg.com/char-regex/-/char-regex-1.0.2.tgz#d744358226217f981ed58f479b1d6bcc29545dcf"
+  integrity sha512-kWWXztvZ5SBQV+eRgKFeh8q5sLuZY2+8WUIzlxWVTg+oGwY14qylx1KbKzHd8P6ZYkAg0xyIDU9JMHhyJMZ1jw==
+
+ci-info@^2.0.0:
+  version "2.0.0"
+  resolved "https://registry.yarnpkg.com/ci-info/-/ci-info-2.0.0.tgz#67a9e964be31a51e15e5010d58e6f12834002f46"
+  integrity sha512-5tK7EtrZ0N+OLFMthtqOj4fI2Jeb88C4CAZPu25LDVUgXJ0A3Js4PMGqrn0JU1W0Mh1/Z8wZzYPxqUrXeBboCQ==
+
+cjs-module-lexer@^0.6.0:
+  version "0.6.0"
+  resolved "https://registry.yarnpkg.com/cjs-module-lexer/-/cjs-module-lexer-0.6.0.tgz#4186fcca0eae175970aee870b9fe2d6cf8d5655f"
+  integrity sha512-uc2Vix1frTfnuzxxu1Hp4ktSvM3QaI4oXl4ZUqL1wjTu/BGki9TrCWoqLTg/drR1KwAEarXuRFCG2Svr1GxPFw==
+
+class-utils@^0.3.5:
+  version "0.3.6"
+  resolved "https://registry.yarnpkg.com/class-utils/-/class-utils-0.3.6.tgz#f93369ae8b9a7ce02fd41faad0ca83033190c463"
+  integrity sha512-qOhPa/Fj7s6TY8H8esGu5QNpMMQxz79h+urzrNYN6mn+9BnxlDGf5QZ+XeCDsxSjPqsSR56XOZOJmpeurnLMeg==
+  dependencies:
+    arr-union "^3.1.0"
+    define-property "^0.2.5"
+    isobject "^3.0.0"
+    static-extend "^0.1.1"
+
+cliui@^6.0.0:
+  version "6.0.0"
+  resolved "https://registry.yarnpkg.com/cliui/-/cliui-6.0.0.tgz#511d702c0c4e41ca156d7d0e96021f23e13225b1"
+  integrity sha512-t6wbgtoCXvAzst7QgXxJYqPt0usEfbgQdftEPbLL/cvv6HPE5VgvqCuAIDR0NgU52ds6rFwqrgakNLrHEjCbrQ==
+  dependencies:
+    string-width "^4.2.0"
+    strip-ansi "^6.0.0"
+    wrap-ansi "^6.2.0"
+
+co@^4.6.0:
+  version "4.6.0"
+  resolved "https://registry.yarnpkg.com/co/-/co-4.6.0.tgz#6ea6bdf3d853ae54ccb8e47bfa0bf3f9031fb184"
+  integrity sha1-bqa989hTrlTMuOR7+gvz+QMfsYQ=
+
+collect-v8-coverage@^1.0.0:
+  version "1.0.1"
+  resolved "https://registry.yarnpkg.com/collect-v8-coverage/-/collect-v8-coverage-1.0.1.tgz#cc2c8e94fc18bbdffe64d6534570c8a673b27f59"
+  integrity sha512-iBPtljfCNcTKNAto0KEtDfZ3qzjJvqE3aTGZsbhjSBlorqpXJlaWWtPO35D+ZImoC3KWejX64o+yPGxhWSTzfg==
+
+collection-visit@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/collection-visit/-/collection-visit-1.0.0.tgz#4bc0373c164bc3291b4d368c829cf1a80a59dca0"
+  integrity sha1-S8A3PBZLwykbTTaMgpzxqApZ3KA=
+  dependencies:
+    map-visit "^1.0.0"
+    object-visit "^1.0.0"
+
+color-convert@^1.9.0:
+  version "1.9.3"
+  resolved "https://registry.yarnpkg.com/color-convert/-/color-convert-1.9.3.tgz#bb71850690e1f136567de629d2d5471deda4c1e8"
+  integrity sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==
+  dependencies:
+    color-name "1.1.3"
+
+color-convert@^2.0.1:
+  version "2.0.1"
+  resolved "https://registry.yarnpkg.com/color-convert/-/color-convert-2.0.1.tgz#72d3a68d598c9bdb3af2ad1e84f21d896abd4de3"
+  integrity sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==
+  dependencies:
+    color-name "~1.1.4"
+
+color-name@1.1.3:
+  version "1.1.3"
+  resolved "https://registry.yarnpkg.com/color-name/-/color-name-1.1.3.tgz#a7d0558bd89c42f795dd42328f740831ca53bc25"
+  integrity sha1-p9BVi9icQveV3UIyj3QIMcpTvCU=
+
+color-name@~1.1.4:
+  version "1.1.4"
+  resolved "https://registry.yarnpkg.com/color-name/-/color-name-1.1.4.tgz#c2a09a87acbde69543de6f63fa3995c826c536a2"
+  integrity sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==
+
+combined-stream@^1.0.6, combined-stream@~1.0.6:
+  version "1.0.8"
+  resolved "https://registry.yarnpkg.com/combined-stream/-/combined-stream-1.0.8.tgz#c3d45a8b34fd730631a110a8a2520682b31d5a7f"
+  integrity sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==
+  dependencies:
+    delayed-stream "~1.0.0"
+
+component-emitter@^1.2.1:
+  version "1.3.0"
+  resolved "https://registry.yarnpkg.com/component-emitter/-/component-emitter-1.3.0.tgz#16e4070fba8ae29b679f2215853ee181ab2eabc0"
+  integrity sha512-Rd3se6QB+sO1TwqZjscQrurpEPIfO0/yYnSin6Q/rD3mOutHvUrCAhJub3r90uNb+SESBuE0QYoB90YdfatsRg==
+
+concat-map@0.0.1:
+  version "0.0.1"
+  resolved "https://registry.yarnpkg.com/concat-map/-/concat-map-0.0.1.tgz#d8a96bd77fd68df7793a73036a3ba0d5405d477b"
+  integrity sha1-2Klr13/Wjfd5OnMDajug1UBdR3s=
+
+convert-source-map@^1.4.0, convert-source-map@^1.6.0, convert-source-map@^1.7.0:
+  version "1.7.0"
+  resolved "https://registry.yarnpkg.com/convert-source-map/-/convert-source-map-1.7.0.tgz#17a2cb882d7f77d3490585e2ce6c524424a3a442"
+  integrity sha512-4FJkXzKXEDB1snCFZlLP4gpC3JILicCpGbzG9f9G7tGqGCzETQ2hWPrcinA9oU4wtf2biUaEH5065UnMeR33oA==
+  dependencies:
+    safe-buffer "~5.1.1"
+
+copy-descriptor@^0.1.0:
+  version "0.1.1"
+  resolved "https://registry.yarnpkg.com/copy-descriptor/-/copy-descriptor-0.1.1.tgz#676f6eb3c39997c2ee1ac3a924fd6124748f578d"
+  integrity sha1-Z29us8OZl8LuGsOpJP1hJHSPV40=
+
+core-util-is@1.0.2:
+  version "1.0.2"
+  resolved "https://registry.yarnpkg.com/core-util-is/-/core-util-is-1.0.2.tgz#b5fd54220aa2bc5ab57aab7140c940754503c1a7"
+  integrity sha1-tf1UIgqivFq1eqtxQMlAdUUDwac=
+
+cross-spawn@^6.0.0:
+  version "6.0.5"
+  resolved "https://registry.yarnpkg.com/cross-spawn/-/cross-spawn-6.0.5.tgz#4a5ec7c64dfae22c3a14124dbacdee846d80cbc4"
+  integrity sha512-eTVLrBSt7fjbDygz805pMnstIs2VTBNkRm0qxZd+M7A5XDdxVRWO5MxGBXZhjY4cqLYLdtrGqRf8mBPmzwSpWQ==
+  dependencies:
+    nice-try "^1.0.4"
+    path-key "^2.0.1"
+    semver "^5.5.0"
+    shebang-command "^1.2.0"
+    which "^1.2.9"
+
+cross-spawn@^7.0.0:
+  version "7.0.3"
+  resolved "https://registry.yarnpkg.com/cross-spawn/-/cross-spawn-7.0.3.tgz#f73a85b9d5d41d045551c177e2882d4ac85728a6"
+  integrity sha512-iRDPJKUPVEND7dHPO8rkbOnPpyDygcDFtWjpeWNCgy8WP2rXcxXL8TskReQl6OrB2G7+UJrags1q15Fudc7G6w==
+  dependencies:
+    path-key "^3.1.0"
+    shebang-command "^2.0.0"
+    which "^2.0.1"
+
+cssom@^0.4.4:
+  version "0.4.4"
+  resolved "https://registry.yarnpkg.com/cssom/-/cssom-0.4.4.tgz#5a66cf93d2d0b661d80bf6a44fb65f5c2e4e0a10"
+  integrity sha512-p3pvU7r1MyyqbTk+WbNJIgJjG2VmTIaB10rI93LzVPrmDJKkzKYMtxxyAvQXR/NS6otuzveI7+7BBq3SjBS2mw==
+
+cssom@~0.3.6:
+  version "0.3.8"
+  resolved "https://registry.yarnpkg.com/cssom/-/cssom-0.3.8.tgz#9f1276f5b2b463f2114d3f2c75250af8c1a36f4a"
+  integrity sha512-b0tGHbfegbhPJpxpiBPU2sCkigAqtM9O121le6bbOlgyV+NyGyCmVfJ6QW9eRjz8CpNfWEOYBIMIGRYkLwsIYg==
+
+cssstyle@^2.2.0:
+  version "2.3.0"
+  resolved "https://registry.yarnpkg.com/cssstyle/-/cssstyle-2.3.0.tgz#ff665a0ddbdc31864b09647f34163443d90b0852"
+  integrity sha512-AZL67abkUzIuvcHqk7c09cezpGNcxUxU4Ioi/05xHk4DQeTkWmGYftIE6ctU6AEt+Gn4n1lDStOtj7FKycP71A==
+  dependencies:
+    cssom "~0.3.6"
+
+dashdash@^1.12.0:
+  version "1.14.1"
+  resolved "https://registry.yarnpkg.com/dashdash/-/dashdash-1.14.1.tgz#853cfa0f7cbe2fed5de20326b8dd581035f6e2f0"
+  integrity sha1-hTz6D3y+L+1d4gMmuN1YEDX24vA=
+  dependencies:
+    assert-plus "^1.0.0"
+
+data-urls@^2.0.0:
+  version "2.0.0"
+  resolved "https://registry.yarnpkg.com/data-urls/-/data-urls-2.0.0.tgz#156485a72963a970f5d5821aaf642bef2bf2db9b"
+  integrity sha512-X5eWTSXO/BJmpdIKCRuKUgSCgAN0OwliVK3yPKbwIWU1Tdw5BRajxlzMidvh+gwko9AfQ9zIj52pzF91Q3YAvQ==
+  dependencies:
+    abab "^2.0.3"
+    whatwg-mimetype "^2.3.0"
+    whatwg-url "^8.0.0"
+
+debug@^2.2.0, debug@^2.3.3:
+  version "2.6.9"
+  resolved "https://registry.yarnpkg.com/debug/-/debug-2.6.9.tgz#5d128515df134ff327e90a4c93f4e077a536341f"
+  integrity sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==
+  dependencies:
+    ms "2.0.0"
+
+debug@^4.1.0, debug@^4.1.1:
+  version "4.3.1"
+  resolved "https://registry.yarnpkg.com/debug/-/debug-4.3.1.tgz#f0d229c505e0c6d8c49ac553d1b13dc183f6b2ee"
+  integrity sha512-doEwdvm4PCeK4K3RQN2ZC2BYUBaxwLARCqZmMjtF8a51J2Rb0xpVloFRnCODwqjpwnAoao4pelN8l3RJdv3gRQ==
+  dependencies:
+    ms "2.1.2"
+
+decamelize@^1.2.0:
+  version "1.2.0"
+  resolved "https://registry.yarnpkg.com/decamelize/-/decamelize-1.2.0.tgz#f6534d15148269b20352e7bee26f501f9a191290"
+  integrity sha1-9lNNFRSCabIDUue+4m9QH5oZEpA=
+
+decimal.js@^10.2.0:
+  version "10.2.1"
+  resolved "https://registry.yarnpkg.com/decimal.js/-/decimal.js-10.2.1.tgz#238ae7b0f0c793d3e3cea410108b35a2c01426a3"
+  integrity sha512-KaL7+6Fw6i5A2XSnsbhm/6B+NuEA7TZ4vqxnd5tXz9sbKtrN9Srj8ab4vKVdK8YAqZO9P1kg45Y6YLoduPf+kw==
+
+decode-uri-component@^0.2.0:
+  version "0.2.0"
+  resolved "https://registry.yarnpkg.com/decode-uri-component/-/decode-uri-component-0.2.0.tgz#eb3913333458775cb84cd1a1fae062106bb87545"
+  integrity sha1-6zkTMzRYd1y4TNGh+uBiEGu4dUU=
+
+deep-is@~0.1.3:
+  version "0.1.3"
+  resolved "https://registry.yarnpkg.com/deep-is/-/deep-is-0.1.3.tgz#b369d6fb5dbc13eecf524f91b070feedc357cf34"
+  integrity sha1-s2nW+128E+7PUk+RsHD+7cNXzzQ=
+
+deepmerge@^4.2.2:
+  version "4.2.2"
+  resolved "https://registry.yarnpkg.com/deepmerge/-/deepmerge-4.2.2.tgz#44d2ea3679b8f4d4ffba33f03d865fc1e7bf4955"
+  integrity sha512-FJ3UgI4gIl+PHZm53knsuSFpE+nESMr7M4v9QcgB7S63Kj/6WqMiFQJpBBYz1Pt+66bZpP3Q7Lye0Oo9MPKEdg==
+
+define-property@^0.2.5:
+  version "0.2.5"
+  resolved "https://registry.yarnpkg.com/define-property/-/define-property-0.2.5.tgz#c35b1ef918ec3c990f9a5bc57be04aacec5c8116"
+  integrity sha1-w1se+RjsPJkPmlvFe+BKrOxcgRY=
+  dependencies:
+    is-descriptor "^0.1.0"
+
+define-property@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/define-property/-/define-property-1.0.0.tgz#769ebaaf3f4a63aad3af9e8d304c9bbe79bfb0e6"
+  integrity sha1-dp66rz9KY6rTr56NMEybvnm/sOY=
+  dependencies:
+    is-descriptor "^1.0.0"
+
+define-property@^2.0.2:
+  version "2.0.2"
+  resolved "https://registry.yarnpkg.com/define-property/-/define-property-2.0.2.tgz#d459689e8d654ba77e02a817f8710d702cb16e9d"
+  integrity sha512-jwK2UV4cnPpbcG7+VRARKTZPUWowwXA8bzH5NP6ud0oeAxyYPuGZUAC7hMugpCdz4BeSZl2Dl9k66CHJ/46ZYQ==
+  dependencies:
+    is-descriptor "^1.0.2"
+    isobject "^3.0.1"
+
+delayed-stream@~1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/delayed-stream/-/delayed-stream-1.0.0.tgz#df3ae199acadfb7d440aaae0b29e2272b24ec619"
+  integrity sha1-3zrhmayt+31ECqrgsp4icrJOxhk=
+
+detect-newline@^3.0.0:
+  version "3.1.0"
+  resolved "https://registry.yarnpkg.com/detect-newline/-/detect-newline-3.1.0.tgz#576f5dfc63ae1a192ff192d8ad3af6308991b651"
+  integrity sha512-TLz+x/vEXm/Y7P7wn1EJFNLxYpUD4TgMosxY6fAVJUnJMbupHBOncxyWUG9OpTaH9EBD7uFI5LfEgmMOc54DsA==
+
+diff-sequences@^26.6.2:
+  version "26.6.2"
+  resolved "https://registry.yarnpkg.com/diff-sequences/-/diff-sequences-26.6.2.tgz#48ba99157de1923412eed41db6b6d4aa9ca7c0b1"
+  integrity sha512-Mv/TDa3nZ9sbc5soK+OoA74BsS3mL37yixCvUAQkiuA4Wz6YtwP/K47n2rv2ovzHZvoiQeA5FTQOschKkEwB0Q==
+
+domexception@^2.0.1:
+  version "2.0.1"
+  resolved "https://registry.yarnpkg.com/domexception/-/domexception-2.0.1.tgz#fb44aefba793e1574b0af6aed2801d057529f304"
+  integrity sha512-yxJ2mFy/sibVQlu5qHjOkf9J3K6zgmCxgJ94u2EdvDOV09H+32LtRswEcUsmUWN72pVLOEnTSRaIVVzVQgS0dg==
+  dependencies:
+    webidl-conversions "^5.0.0"
+
+ecc-jsbn@~0.1.1:
+  version "0.1.2"
+  resolved "https://registry.yarnpkg.com/ecc-jsbn/-/ecc-jsbn-0.1.2.tgz#3a83a904e54353287874c564b7549386849a98c9"
+  integrity sha1-OoOpBOVDUyh4dMVkt1SThoSamMk=
+  dependencies:
+    jsbn "~0.1.0"
+    safer-buffer "^2.1.0"
+
+emittery@^0.7.1:
+  version "0.7.2"
+  resolved "https://registry.yarnpkg.com/emittery/-/emittery-0.7.2.tgz#25595908e13af0f5674ab419396e2fb394cdfa82"
+  integrity sha512-A8OG5SR/ij3SsJdWDJdkkSYUjQdCUx6APQXem0SaEePBSRg4eymGYwBkKo1Y6DU+af/Jn2dBQqDBvjnr9Vi8nQ==
+
+emoji-regex@^8.0.0:
+  version "8.0.0"
+  resolved "https://registry.yarnpkg.com/emoji-regex/-/emoji-regex-8.0.0.tgz#e818fd69ce5ccfcb404594f842963bf53164cc37"
+  integrity sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==
+
+end-of-stream@^1.1.0:
+  version "1.4.4"
+  resolved "https://registry.yarnpkg.com/end-of-stream/-/end-of-stream-1.4.4.tgz#5ae64a5f45057baf3626ec14da0ca5e4b2431eb0"
+  integrity sha512-+uw1inIHVPQoaVuHzRyXd21icM+cnt4CzD5rW+NC1wjOUSTOs+Te7FOv7AhN7vS9x/oIyhLP5PR1H+phQAHu5Q==
+  dependencies:
+    once "^1.4.0"
+
+error-ex@^1.3.1:
+  version "1.3.2"
+  resolved "https://registry.yarnpkg.com/error-ex/-/error-ex-1.3.2.tgz#b4ac40648107fdcdcfae242f428bea8a14d4f1bf"
+  integrity sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==
+  dependencies:
+    is-arrayish "^0.2.1"
+
+escape-string-regexp@^1.0.5:
+  version "1.0.5"
+  resolved "https://registry.yarnpkg.com/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz#1b61c0562190a8dff6ae3bb2cf0200ca130b86d4"
+  integrity sha1-G2HAViGQqN/2rjuyzwIAyhMLhtQ=
+
+escape-string-regexp@^2.0.0:
+  version "2.0.0"
+  resolved "https://registry.yarnpkg.com/escape-string-regexp/-/escape-string-regexp-2.0.0.tgz#a30304e99daa32e23b2fd20f51babd07cffca344"
+  integrity sha512-UpzcLCXolUWcNu5HtVMHYdXJjArjsF9C0aNnquZYY4uW/Vu0miy5YoWvbV345HauVvcAUnpRuhMMcqTcGOY2+w==
+
+escodegen@^1.14.1:
+  version "1.14.3"
+  resolved "https://registry.yarnpkg.com/escodegen/-/escodegen-1.14.3.tgz#4e7b81fba61581dc97582ed78cab7f0e8d63f503"
+  integrity sha512-qFcX0XJkdg+PB3xjZZG/wKSuT1PnQWx57+TVSjIMmILd2yC/6ByYElPwJnslDsuWuSAp4AwJGumarAAmJch5Kw==
+  dependencies:
+    esprima "^4.0.1"
+    estraverse "^4.2.0"
+    esutils "^2.0.2"
+    optionator "^0.8.1"
+  optionalDependencies:
+    source-map "~0.6.1"
+
+esprima@^4.0.0, esprima@^4.0.1:
+  version "4.0.1"
+  resolved "https://registry.yarnpkg.com/esprima/-/esprima-4.0.1.tgz#13b04cdb3e6c5d19df91ab6987a8695619b0aa71"
+  integrity sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==
+
+estraverse@^4.2.0:
+  version "4.3.0"
+  resolved "https://registry.yarnpkg.com/estraverse/-/estraverse-4.3.0.tgz#398ad3f3c5a24948be7725e83d11a7de28cdbd1d"
+  integrity sha512-39nnKffWz8xN1BU/2c79n9nB9HDzo0niYUqx6xyqUnyoAnQyyWpOTdZEeiCch8BBu515t4wp9ZmgVfVhn9EBpw==
+
+esutils@^2.0.2:
+  version "2.0.3"
+  resolved "https://registry.yarnpkg.com/esutils/-/esutils-2.0.3.tgz#74d2eb4de0b8da1293711910d50775b9b710ef64"
+  integrity sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==
+
+eventemitter3@^3.1.0:
+  version "3.1.2"
+  resolved "https://registry.yarnpkg.com/eventemitter3/-/eventemitter3-3.1.2.tgz#2d3d48f9c346698fce83a85d7d664e98535df6e7"
+  integrity sha512-tvtQIeLVHjDkJYnzf2dgVMxfuSGJeM/7UCG17TT4EumTfNtF+0nebF/4zWOIkCreAbtNqhGEboB6BWrwqNaw4Q==
+
+exec-sh@^0.3.2:
+  version "0.3.4"
+  resolved "https://registry.yarnpkg.com/exec-sh/-/exec-sh-0.3.4.tgz#3a018ceb526cc6f6df2bb504b2bfe8e3a4934ec5"
+  integrity sha512-sEFIkc61v75sWeOe72qyrqg2Qg0OuLESziUDk/O/z2qgS15y2gWVFrI6f2Qn/qw/0/NCfCEsmNA4zOjkwEZT1A==
+
+execa@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/execa/-/execa-1.0.0.tgz#c6236a5bb4df6d6f15e88e7f017798216749ddd8"
+  integrity sha512-adbxcyWV46qiHyvSp50TKt05tB4tK3HcmF7/nxfAdhnox83seTDbwnaqKO4sXRy7roHAIFqJP/Rw/AuEbX61LA==
+  dependencies:
+    cross-spawn "^6.0.0"
+    get-stream "^4.0.0"
+    is-stream "^1.1.0"
+    npm-run-path "^2.0.0"
+    p-finally "^1.0.0"
+    signal-exit "^3.0.0"
+    strip-eof "^1.0.0"
+
+execa@^4.0.0:
+  version "4.1.0"
+  resolved "https://registry.yarnpkg.com/execa/-/execa-4.1.0.tgz#4e5491ad1572f2f17a77d388c6c857135b22847a"
+  integrity sha512-j5W0//W7f8UxAn8hXVnwG8tLwdiUy4FJLcSupCg6maBYZDpyBvTApK7KyuI4bKj8KOh1r2YH+6ucuYtJv1bTZA==
+  dependencies:
+    cross-spawn "^7.0.0"
+    get-stream "^5.0.0"
+    human-signals "^1.1.1"
+    is-stream "^2.0.0"
+    merge-stream "^2.0.0"
+    npm-run-path "^4.0.0"
+    onetime "^5.1.0"
+    signal-exit "^3.0.2"
+    strip-final-newline "^2.0.0"
+
+exit@^0.1.2:
+  version "0.1.2"
+  resolved "https://registry.yarnpkg.com/exit/-/exit-0.1.2.tgz#0632638f8d877cc82107d30a0fff1a17cba1cd0c"
+  integrity sha1-BjJjj42HfMghB9MKD/8aF8uhzQw=
+
+expand-brackets@^2.1.4:
+  version "2.1.4"
+  resolved "https://registry.yarnpkg.com/expand-brackets/-/expand-brackets-2.1.4.tgz#b77735e315ce30f6b6eff0f83b04151a22449622"
+  integrity sha1-t3c14xXOMPa27/D4OwQVGiJEliI=
+  dependencies:
+    debug "^2.3.3"
+    define-property "^0.2.5"
+    extend-shallow "^2.0.1"
+    posix-character-classes "^0.1.0"
+    regex-not "^1.0.0"
+    snapdragon "^0.8.1"
+    to-regex "^3.0.1"
+
+expect@^26.6.2:
+  version "26.6.2"
+  resolved "https://registry.yarnpkg.com/expect/-/expect-26.6.2.tgz#c6b996bf26bf3fe18b67b2d0f51fc981ba934417"
+  integrity sha512-9/hlOBkQl2l/PLHJx6JjoDF6xPKcJEsUlWKb23rKE7KzeDqUZKXKNMW27KIue5JMdBV9HgmoJPcc8HtO85t9IA==
+  dependencies:
+    "@jest/types" "^26.6.2"
+    ansi-styles "^4.0.0"
+    jest-get-type "^26.3.0"
+    jest-matcher-utils "^26.6.2"
+    jest-message-util "^26.6.2"
+    jest-regex-util "^26.0.0"
+
+extend-shallow@^2.0.1:
+  version "2.0.1"
+  resolved "https://registry.yarnpkg.com/extend-shallow/-/extend-shallow-2.0.1.tgz#51af7d614ad9a9f610ea1bafbb989d6b1c56890f"
+  integrity sha1-Ua99YUrZqfYQ6huvu5idaxxWiQ8=
+  dependencies:
+    is-extendable "^0.1.0"
+
+extend-shallow@^3.0.0, extend-shallow@^3.0.2:
+  version "3.0.2"
+  resolved "https://registry.yarnpkg.com/extend-shallow/-/extend-shallow-3.0.2.tgz#26a71aaf073b39fb2127172746131c2704028db8"
+  integrity sha1-Jqcarwc7OfshJxcnRhMcJwQCjbg=
+  dependencies:
+    assign-symbols "^1.0.0"
+    is-extendable "^1.0.1"
+
+extend@~3.0.2:
+  version "3.0.2"
+  resolved "https://registry.yarnpkg.com/extend/-/extend-3.0.2.tgz#f8b1136b4071fbd8eb140aff858b1019ec2915fa"
+  integrity sha512-fjquC59cD7CyW6urNXK0FBufkZcoiGG80wTuPujX590cB5Ttln20E2UB4S/WARVqhXffZl2LNgS+gQdPIIim/g==
+
+extglob@^2.0.4:
+  version "2.0.4"
+  resolved "https://registry.yarnpkg.com/extglob/-/extglob-2.0.4.tgz#ad00fe4dc612a9232e8718711dc5cb5ab0285543"
+  integrity sha512-Nmb6QXkELsuBr24CJSkilo6UHHgbekK5UiZgfE6UHD3Eb27YC6oD+bhcT+tJ6cl8dmsgdQxnWlcry8ksBIBLpw==
+  dependencies:
+    array-unique "^0.3.2"
+    define-property "^1.0.0"
+    expand-brackets "^2.1.4"
+    extend-shallow "^2.0.1"
+    fragment-cache "^0.2.1"
+    regex-not "^1.0.0"
+    snapdragon "^0.8.1"
+    to-regex "^3.0.1"
+
+extsprintf@1.3.0:
+  version "1.3.0"
+  resolved "https://registry.yarnpkg.com/extsprintf/-/extsprintf-1.3.0.tgz#96918440e3041a7a414f8c52e3c574eb3c3e1e05"
+  integrity sha1-lpGEQOMEGnpBT4xS48V06zw+HgU=
+
+extsprintf@^1.2.0:
+  version "1.4.0"
+  resolved "https://registry.yarnpkg.com/extsprintf/-/extsprintf-1.4.0.tgz#e2689f8f356fad62cca65a3a91c5df5f9551692f"
+  integrity sha1-4mifjzVvrWLMplo6kcXfX5VRaS8=
+
+fast-deep-equal@^3.1.1:
+  version "3.1.3"
+  resolved "https://registry.yarnpkg.com/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz#3a7d56b559d6cbc3eb512325244e619a65c6c525"
+  integrity sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==
+
+fast-json-stable-stringify@^2.0.0:
+  version "2.1.0"
+  resolved "https://registry.yarnpkg.com/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz#874bf69c6f404c2b5d99c481341399fd55892633"
+  integrity sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==
+
+fast-levenshtein@~2.0.6:
+  version "2.0.6"
+  resolved "https://registry.yarnpkg.com/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz#3d8a5c66883a16a30ca8643e851f19baa7797917"
+  integrity sha1-PYpcZog6FqMMqGQ+hR8Zuqd5eRc=
+
+fb-watchman@^2.0.0:
+  version "2.0.1"
+  resolved "https://registry.yarnpkg.com/fb-watchman/-/fb-watchman-2.0.1.tgz#fc84fb39d2709cf3ff6d743706157bb5708a8a85"
+  integrity sha512-DkPJKQeY6kKwmuMretBhr7G6Vodr7bFwDYTXIkfG1gjvNpaxBTQV3PbXg6bR1c1UP4jPOX0jHUbbHANL9vRjVg==
+  dependencies:
+    bser "2.1.1"
+
+fill-range@^4.0.0:
+  version "4.0.0"
+  resolved "https://registry.yarnpkg.com/fill-range/-/fill-range-4.0.0.tgz#d544811d428f98eb06a63dc402d2403c328c38f7"
+  integrity sha1-1USBHUKPmOsGpj3EAtJAPDKMOPc=
+  dependencies:
+    extend-shallow "^2.0.1"
+    is-number "^3.0.0"
+    repeat-string "^1.6.1"
+    to-regex-range "^2.1.0"
+
+fill-range@^7.0.1:
+  version "7.0.1"
+  resolved "https://registry.yarnpkg.com/fill-range/-/fill-range-7.0.1.tgz#1919a6a7c75fe38b2c7c77e5198535da9acdda40"
+  integrity sha512-qOo9F+dMUmC2Lcb4BbVvnKJxTPjCm+RRpe4gDuGrzkL7mEVl/djYSu2OdQ2Pa302N4oqkSg9ir6jaLWJ2USVpQ==
+  dependencies:
+    to-regex-range "^5.0.1"
+
+find-up@^4.0.0, find-up@^4.1.0:
+  version "4.1.0"
+  resolved "https://registry.yarnpkg.com/find-up/-/find-up-4.1.0.tgz#97afe7d6cdc0bc5928584b7c8d7b16e8a9aa5d19"
+  integrity sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==
+  dependencies:
+    locate-path "^5.0.0"
+    path-exists "^4.0.0"
+
+for-in@^1.0.2:
+  version "1.0.2"
+  resolved "https://registry.yarnpkg.com/for-in/-/for-in-1.0.2.tgz#81068d295a8142ec0ac726c6e2200c30fb6d5e80"
+  integrity sha1-gQaNKVqBQuwKxybG4iAMMPttXoA=
+
+forever-agent@~0.6.1:
+  version "0.6.1"
+  resolved "https://registry.yarnpkg.com/forever-agent/-/forever-agent-0.6.1.tgz#fbc71f0c41adeb37f96c577ad1ed42d8fdacca91"
+  integrity sha1-+8cfDEGt6zf5bFd60e1C2P2sypE=
+
+form-data@~2.3.2:
+  version "2.3.3"
+  resolved "https://registry.yarnpkg.com/form-data/-/form-data-2.3.3.tgz#dcce52c05f644f298c6a7ab936bd724ceffbf3a6"
+  integrity sha512-1lLKB2Mu3aGP1Q/2eCOx0fNbRMe7XdwktwOruhfqqd0rIJWwN4Dh+E3hrPSlDCXnSR7UtZ1N38rVXm+6+MEhJQ==
+  dependencies:
+    asynckit "^0.4.0"
+    combined-stream "^1.0.6"
+    mime-types "^2.1.12"
+
+fragment-cache@^0.2.1:
+  version "0.2.1"
+  resolved "https://registry.yarnpkg.com/fragment-cache/-/fragment-cache-0.2.1.tgz#4290fad27f13e89be7f33799c6bc5a0abfff0d19"
+  integrity sha1-QpD60n8T6Jvn8zeZxrxaCr//DRk=
+  dependencies:
+    map-cache "^0.2.2"
+
+fs.realpath@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/fs.realpath/-/fs.realpath-1.0.0.tgz#1504ad2523158caa40db4a2787cb01411994ea4f"
+  integrity sha1-FQStJSMVjKpA20onh8sBQRmU6k8=
+
+fsevents@^2.1.2:
+  version "2.3.2"
+  resolved "https://registry.yarnpkg.com/fsevents/-/fsevents-2.3.2.tgz#8a526f78b8fdf4623b709e0b975c52c24c02fd1a"
+  integrity sha512-xiqMQR4xAeHTuB9uWm+fFRcIOgKBMiOBP+eXiyT7jsgVCq1bkVygt00oASowB7EdtpOHaaPgKt812P9ab+DDKA==
+
+function-bind@^1.1.1:
+  version "1.1.1"
+  resolved "https://registry.yarnpkg.com/function-bind/-/function-bind-1.1.1.tgz#a56899d3ea3c9bab874bb9773b7c5ede92f4895d"
+  integrity sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A==
+
+gensync@^1.0.0-beta.1:
+  version "1.0.0-beta.2"
+  resolved "https://registry.yarnpkg.com/gensync/-/gensync-1.0.0-beta.2.tgz#32a6ee76c3d7f52d46b2b1ae5d93fea8580a25e0"
+  integrity sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==
+
+get-caller-file@^2.0.1:
+  version "2.0.5"
+  resolved "https://registry.yarnpkg.com/get-caller-file/-/get-caller-file-2.0.5.tgz#4f94412a82db32f36e3b0b9741f8a97feb031f7e"
+  integrity sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==
+
+get-package-type@^0.1.0:
+  version "0.1.0"
+  resolved "https://registry.yarnpkg.com/get-package-type/-/get-package-type-0.1.0.tgz#8de2d803cff44df3bc6c456e6668b36c3926e11a"
+  integrity sha512-pjzuKtY64GYfWizNAJ0fr9VqttZkNiK2iS430LtIHzjBEr6bX8Am2zm4sW4Ro5wjWW5cAlRL1qAMTcXbjNAO2Q==
+
+get-stream@^4.0.0:
+  version "4.1.0"
+  resolved "https://registry.yarnpkg.com/get-stream/-/get-stream-4.1.0.tgz#c1b255575f3dc21d59bfc79cd3d2b46b1c3a54b5"
+  integrity sha512-GMat4EJ5161kIy2HevLlr4luNjBgvmj413KaQA7jt4V8B4RDsfpHk7WQ9GVqfYyyx8OS/L66Kox+rJRNklLK7w==
+  dependencies:
+    pump "^3.0.0"
+
+get-stream@^5.0.0:
+  version "5.2.0"
+  resolved "https://registry.yarnpkg.com/get-stream/-/get-stream-5.2.0.tgz#4966a1795ee5ace65e706c4b7beb71257d6e22d3"
+  integrity sha512-nBF+F1rAZVCu/p7rjzgA+Yb4lfYXrpl7a6VmJrU8wF9I1CKvP/QwPNZHnOlwbTkY6dvtFIzFMSyQXbLoTQPRpA==
+  dependencies:
+    pump "^3.0.0"
+
+get-value@^2.0.3, get-value@^2.0.6:
+  version "2.0.6"
+  resolved "https://registry.yarnpkg.com/get-value/-/get-value-2.0.6.tgz#dc15ca1c672387ca76bd37ac0a395ba2042a2c28"
+  integrity sha1-3BXKHGcjh8p2vTesCjlbogQqLCg=
+
+getpass@^0.1.1:
+  version "0.1.7"
+  resolved "https://registry.yarnpkg.com/getpass/-/getpass-0.1.7.tgz#5eff8e3e684d569ae4cb2b1282604e8ba62149fa"
+  integrity sha1-Xv+OPmhNVprkyysSgmBOi6YhSfo=
+  dependencies:
+    assert-plus "^1.0.0"
+
+glob@^7.1.1, glob@^7.1.2, glob@^7.1.3, glob@^7.1.4:
+  version "7.1.6"
+  resolved "https://registry.yarnpkg.com/glob/-/glob-7.1.6.tgz#141f33b81a7c2492e125594307480c46679278a6"
+  integrity sha512-LwaxwyZ72Lk7vZINtNNrywX0ZuLyStrdDtabefZKAY5ZGJhVtgdznluResxNmPitE0SAO+O26sWTHeKSI2wMBA==
+  dependencies:
+    fs.realpath "^1.0.0"
+    inflight "^1.0.4"
+    inherits "2"
+    minimatch "^3.0.4"
+    once "^1.3.0"
+    path-is-absolute "^1.0.0"
+
+globals@^11.1.0:
+  version "11.12.0"
+  resolved "https://registry.yarnpkg.com/globals/-/globals-11.12.0.tgz#ab8795338868a0babd8525758018c2a7eb95c42e"
+  integrity sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==
+
+graceful-fs@^4.2.4:
+  version "4.2.6"
+  resolved "https://registry.yarnpkg.com/graceful-fs/-/graceful-fs-4.2.6.tgz#ff040b2b0853b23c3d31027523706f1885d76bee"
+  integrity sha512-nTnJ528pbqxYanhpDYsi4Rd8MAeaBA67+RZ10CM1m3bTAVFEDcd5AuA4a6W5YkGZ1iNXHzZz8T6TBKLeBuNriQ==
+
+graphql-tag@^2.11.0:
+  version "2.11.0"
+  resolved "https://registry.yarnpkg.com/graphql-tag/-/graphql-tag-2.11.0.tgz#1deb53a01c46a7eb401d6cb59dec86fa1cccbffd"
+  integrity sha512-VmsD5pJqWJnQZMUeRwrDhfgoyqcfwEkvtpANqcoUG8/tOLkwNgU9mzub/Mc78OJMhHjx7gfAMTxzdG43VGg3bA==
+
+graphql@^14.0.0:
+  version "14.7.0"
+  resolved "https://registry.yarnpkg.com/graphql/-/graphql-14.7.0.tgz#7fa79a80a69be4a31c27dda824dc04dac2035a72"
+  integrity sha512-l0xWZpoPKpppFzMfvVyFmp9vLN7w/ZZJPefUicMCepfJeQ8sMcztloGYY9DfjVPo6tIUDzU5Hw3MUbIjj9AVVA==
+  dependencies:
+    iterall "^1.2.2"
+
+growly@^1.3.0:
+  version "1.3.0"
+  resolved "https://registry.yarnpkg.com/growly/-/growly-1.3.0.tgz#f10748cbe76af964b7c96c93c6bcc28af120c081"
+  integrity sha1-8QdIy+dq+WS3yWyTxrzCivEgwIE=
+
+har-schema@^2.0.0:
+  version "2.0.0"
+  resolved "https://registry.yarnpkg.com/har-schema/-/har-schema-2.0.0.tgz#a94c2224ebcac04782a0d9035521f24735b7ec92"
+  integrity sha1-qUwiJOvKwEeCoNkDVSHyRzW37JI=
+
+har-validator@~5.1.3:
+  version "5.1.5"
+  resolved "https://registry.yarnpkg.com/har-validator/-/har-validator-5.1.5.tgz#1f0803b9f8cb20c0fa13822df1ecddb36bde1efd"
+  integrity sha512-nmT2T0lljbxdQZfspsno9hgrG3Uir6Ks5afism62poxqBM6sDnMEuPmzTq8XN0OEwqKLLdh1jQI3qyE66Nzb3w==
+  dependencies:
+    ajv "^6.12.3"
+    har-schema "^2.0.0"
+
+has-flag@^3.0.0:
+  version "3.0.0"
+  resolved "https://registry.yarnpkg.com/has-flag/-/has-flag-3.0.0.tgz#b5d454dc2199ae225699f3467e5a07f3b955bafd"
+  integrity sha1-tdRU3CGZriJWmfNGfloH87lVuv0=
+
+has-flag@^4.0.0:
+  version "4.0.0"
+  resolved "https://registry.yarnpkg.com/has-flag/-/has-flag-4.0.0.tgz#944771fd9c81c81265c4d6941860da06bb59479b"
+  integrity sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==
+
+has-value@^0.3.1:
+  version "0.3.1"
+  resolved "https://registry.yarnpkg.com/has-value/-/has-value-0.3.1.tgz#7b1f58bada62ca827ec0a2078025654845995e1f"
+  integrity sha1-ex9YutpiyoJ+wKIHgCVlSEWZXh8=
+  dependencies:
+    get-value "^2.0.3"
+    has-values "^0.1.4"
+    isobject "^2.0.0"
+
+has-value@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/has-value/-/has-value-1.0.0.tgz#18b281da585b1c5c51def24c930ed29a0be6b177"
+  integrity sha1-GLKB2lhbHFxR3vJMkw7SmgvmsXc=
+  dependencies:
+    get-value "^2.0.6"
+    has-values "^1.0.0"
+    isobject "^3.0.0"
+
+has-values@^0.1.4:
+  version "0.1.4"
+  resolved "https://registry.yarnpkg.com/has-values/-/has-values-0.1.4.tgz#6d61de95d91dfca9b9a02089ad384bff8f62b771"
+  integrity sha1-bWHeldkd/Km5oCCJrThL/49it3E=
+
+has-values@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/has-values/-/has-values-1.0.0.tgz#95b0b63fec2146619a6fe57fe75628d5a39efe4f"
+  integrity sha1-lbC2P+whRmGab+V/51Yo1aOe/k8=
+  dependencies:
+    is-number "^3.0.0"
+    kind-of "^4.0.0"
+
+has@^1.0.3:
+  version "1.0.3"
+  resolved "https://registry.yarnpkg.com/has/-/has-1.0.3.tgz#722d7cbfc1f6aa8241f16dd814e011e1f41e8796"
+  integrity sha512-f2dvO0VU6Oej7RkWJGrehjbzMAjFp5/VKPp5tTpWIV4JHHZK1/BxbFRtf/siA2SWTe09caDmVtYYzWEIbBS4zw==
+  dependencies:
+    function-bind "^1.1.1"
+
+hoist-non-react-statics@^3.3.2:
+  version "3.3.2"
+  resolved "https://registry.yarnpkg.com/hoist-non-react-statics/-/hoist-non-react-statics-3.3.2.tgz#ece0acaf71d62c2969c2ec59feff42a4b1a85b45"
+  integrity sha512-/gGivxi8JPKWNm/W0jSmzcMPpfpPLc3dY/6GxhX2hQ9iGj3aDfklV4ET7NjKpSinLpJ5vafa9iiGIEZg10SfBw==
+  dependencies:
+    react-is "^16.7.0"
+
+hosted-git-info@^2.1.4:
+  version "2.8.8"
+  resolved "https://registry.yarnpkg.com/hosted-git-info/-/hosted-git-info-2.8.8.tgz#7539bd4bc1e0e0a895815a2e0262420b12858488"
+  integrity sha512-f/wzC2QaWBs7t9IYqB4T3sR1xviIViXJRJTWBlx2Gf3g0Xi5vI7Yy4koXQ1c9OYDGHN9sBy1DQ2AB8fqZBWhUg==
+
+html-encoding-sniffer@^2.0.1:
+  version "2.0.1"
+  resolved "https://registry.yarnpkg.com/html-encoding-sniffer/-/html-encoding-sniffer-2.0.1.tgz#42a6dc4fd33f00281176e8b23759ca4e4fa185f3"
+  integrity sha512-D5JbOMBIR/TVZkubHT+OyT2705QvogUW4IBn6nHd756OwieSF9aDYFj4dv6HHEVGYbHaLETa3WggZYWWMyy3ZQ==
+  dependencies:
+    whatwg-encoding "^1.0.5"
+
+html-escaper@^2.0.0:
+  version "2.0.2"
+  resolved "https://registry.yarnpkg.com/html-escaper/-/html-escaper-2.0.2.tgz#dfd60027da36a36dfcbe236262c00a5822681453"
+  integrity sha512-H2iMtd0I4Mt5eYiapRdIDjp+XzelXQ0tFE4JS7YFwFevXXMmOp9myNrUvCg0D6ws8iqkRPBfKHgbwig1SmlLfg==
+
+http-signature@~1.2.0:
+  version "1.2.0"
+  resolved "https://registry.yarnpkg.com/http-signature/-/http-signature-1.2.0.tgz#9aecd925114772f3d95b65a60abb8f7c18fbace1"
+  integrity sha1-muzZJRFHcvPZW2WmCruPfBj7rOE=
+  dependencies:
+    assert-plus "^1.0.0"
+    jsprim "^1.2.2"
+    sshpk "^1.7.0"
+
+human-signals@^1.1.1:
+  version "1.1.1"
+  resolved "https://registry.yarnpkg.com/human-signals/-/human-signals-1.1.1.tgz#c5b1cd14f50aeae09ab6c59fe63ba3395fe4dfa3"
+  integrity sha512-SEQu7vl8KjNL2eoGBLF3+wAjpsNfA9XMlXAYj/3EdaNfAlxKthD1xjEQfGOUhllCGGJVNY34bRr6lPINhNjyZw==
+
+iconv-lite@0.4.24:
+  version "0.4.24"
+  resolved "https://registry.yarnpkg.com/iconv-lite/-/iconv-lite-0.4.24.tgz#2022b4b25fbddc21d2f524974a474aafe733908b"
+  integrity sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==
+  dependencies:
+    safer-buffer ">= 2.1.2 < 3"
+
+import-local@^3.0.2:
+  version "3.0.2"
+  resolved "https://registry.yarnpkg.com/import-local/-/import-local-3.0.2.tgz#a8cfd0431d1de4a2199703d003e3e62364fa6db6"
+  integrity sha512-vjL3+w0oulAVZ0hBHnxa/Nm5TAurf9YLQJDhqRZyqb+VKGOB6LU8t9H1Nr5CIo16vh9XfJTOoHwU0B71S557gA==
+  dependencies:
+    pkg-dir "^4.2.0"
+    resolve-cwd "^3.0.0"
+
+imurmurhash@^0.1.4:
+  version "0.1.4"
+  resolved "https://registry.yarnpkg.com/imurmurhash/-/imurmurhash-0.1.4.tgz#9218b9b2b928a238b13dc4fb6b6d576f231453ea"
+  integrity sha1-khi5srkoojixPcT7a21XbyMUU+o=
+
+inflight@^1.0.4:
+  version "1.0.6"
+  resolved "https://registry.yarnpkg.com/inflight/-/inflight-1.0.6.tgz#49bd6331d7d02d0c09bc910a1075ba8165b56df9"
+  integrity sha1-Sb1jMdfQLQwJvJEKEHW6gWW1bfk=
+  dependencies:
+    once "^1.3.0"
+    wrappy "1"
+
+inherits@2:
+  version "2.0.4"
+  resolved "https://registry.yarnpkg.com/inherits/-/inherits-2.0.4.tgz#0fa2c64f932917c3433a0ded55363aae37416b7c"
+  integrity sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==
+
+ip-regex@^2.1.0:
+  version "2.1.0"
+  resolved "https://registry.yarnpkg.com/ip-regex/-/ip-regex-2.1.0.tgz#fa78bf5d2e6913c911ce9f819ee5146bb6d844e9"
+  integrity sha1-+ni/XS5pE8kRzp+BnuUUa7bYROk=
+
+is-accessor-descriptor@^0.1.6:
+  version "0.1.6"
+  resolved "https://registry.yarnpkg.com/is-accessor-descriptor/-/is-accessor-descriptor-0.1.6.tgz#a9e12cb3ae8d876727eeef3843f8a0897b5c98d6"
+  integrity sha1-qeEss66Nh2cn7u84Q/igiXtcmNY=
+  dependencies:
+    kind-of "^3.0.2"
+
+is-accessor-descriptor@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/is-accessor-descriptor/-/is-accessor-descriptor-1.0.0.tgz#169c2f6d3df1f992618072365c9b0ea1f6878656"
+  integrity sha512-m5hnHTkcVsPfqx3AKlyttIPb7J+XykHvJP2B9bZDjlhLIoEq4XoK64Vg7boZlVWYK6LUY94dYPEE7Lh0ZkZKcQ==
+  dependencies:
+    kind-of "^6.0.0"
+
+is-arrayish@^0.2.1:
+  version "0.2.1"
+  resolved "https://registry.yarnpkg.com/is-arrayish/-/is-arrayish-0.2.1.tgz#77c99840527aa8ecb1a8ba697b80645a7a926a9d"
+  integrity sha1-d8mYQFJ6qOyxqLppe4BkWnqSap0=
+
+is-buffer@^1.1.5:
+  version "1.1.6"
+  resolved "https://registry.yarnpkg.com/is-buffer/-/is-buffer-1.1.6.tgz#efaa2ea9daa0d7ab2ea13a97b2b8ad51fefbe8be"
+  integrity sha512-NcdALwpXkTm5Zvvbk7owOUSvVvBKDgKP5/ewfXEznmQFfs4ZRmanOeKBTjRVjka3QFoN6XJ+9F3USqfHqTaU5w==
+
+is-ci@^2.0.0:
+  version "2.0.0"
+  resolved "https://registry.yarnpkg.com/is-ci/-/is-ci-2.0.0.tgz#6bc6334181810e04b5c22b3d589fdca55026404c"
+  integrity sha512-YfJT7rkpQB0updsdHLGWrvhBJfcfzNNawYDNIyQXJz0IViGf75O8EBPKSdvw2rF+LGCsX4FZ8tcr3b19LcZq4w==
+  dependencies:
+    ci-info "^2.0.0"
+
+is-core-module@^2.2.0:
+  version "2.2.0"
+  resolved "https://registry.yarnpkg.com/is-core-module/-/is-core-module-2.2.0.tgz#97037ef3d52224d85163f5597b2b63d9afed981a"
+  integrity sha512-XRAfAdyyY5F5cOXn7hYQDqh2Xmii+DEfIcQGxK/uNwMHhIkPWO0g8msXcbzLe+MpGoR951MlqM/2iIlU4vKDdQ==
+  dependencies:
+    has "^1.0.3"
+
+is-data-descriptor@^0.1.4:
+  version "0.1.4"
+  resolved "https://registry.yarnpkg.com/is-data-descriptor/-/is-data-descriptor-0.1.4.tgz#0b5ee648388e2c860282e793f1856fec3f301b56"
+  integrity sha1-C17mSDiOLIYCgueT8YVv7D8wG1Y=
+  dependencies:
+    kind-of "^3.0.2"
+
+is-data-descriptor@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/is-data-descriptor/-/is-data-descriptor-1.0.0.tgz#d84876321d0e7add03990406abbbbd36ba9268c7"
+  integrity sha512-jbRXy1FmtAoCjQkVmIVYwuuqDFUbaOeDjmed1tOGPrsMhtJA4rD9tkgA0F1qJ3gRFRXcHYVkdeaP50Q5rE/jLQ==
+  dependencies:
+    kind-of "^6.0.0"
+
+is-descriptor@^0.1.0:
+  version "0.1.6"
+  resolved "https://registry.yarnpkg.com/is-descriptor/-/is-descriptor-0.1.6.tgz#366d8240dde487ca51823b1ab9f07a10a78251ca"
+  integrity sha512-avDYr0SB3DwO9zsMov0gKCESFYqCnE4hq/4z3TdUlukEy5t9C0YRq7HLrsN52NAcqXKaepeCD0n+B0arnVG3Hg==
+  dependencies:
+    is-accessor-descriptor "^0.1.6"
+    is-data-descriptor "^0.1.4"
+    kind-of "^5.0.0"
+
+is-descriptor@^1.0.0, is-descriptor@^1.0.2:
+  version "1.0.2"
+  resolved "https://registry.yarnpkg.com/is-descriptor/-/is-descriptor-1.0.2.tgz#3b159746a66604b04f8c81524ba365c5f14d86ec"
+  integrity sha512-2eis5WqQGV7peooDyLmNEPUrps9+SXX5c9pL3xEB+4e9HnGuDa7mB7kHxHw4CbqS9k1T2hOH3miL8n8WtiYVtg==
+  dependencies:
+    is-accessor-descriptor "^1.0.0"
+    is-data-descriptor "^1.0.0"
+    kind-of "^6.0.2"
+
+is-docker@^2.0.0:
+  version "2.1.1"
+  resolved "https://registry.yarnpkg.com/is-docker/-/is-docker-2.1.1.tgz#4125a88e44e450d384e09047ede71adc2d144156"
+  integrity sha512-ZOoqiXfEwtGknTiuDEy8pN2CfE3TxMHprvNer1mXiqwkOT77Rw3YVrUQ52EqAOU3QAWDQ+bQdx7HJzrv7LS2Hw==
+
+is-extendable@^0.1.0, is-extendable@^0.1.1:
+  version "0.1.1"
+  resolved "https://registry.yarnpkg.com/is-extendable/-/is-extendable-0.1.1.tgz#62b110e289a471418e3ec36a617d472e301dfc89"
+  integrity sha1-YrEQ4omkcUGOPsNqYX1HLjAd/Ik=
+
+is-extendable@^1.0.1:
+  version "1.0.1"
+  resolved "https://registry.yarnpkg.com/is-extendable/-/is-extendable-1.0.1.tgz#a7470f9e426733d81bd81e1155264e3a3507cab4"
+  integrity sha512-arnXMxT1hhoKo9k1LZdmlNyJdDDfy2v0fXjFlmok4+i8ul/6WlbVge9bhM74OpNPQPMGUToDtz+KXa1PneJxOA==
+  dependencies:
+    is-plain-object "^2.0.4"
+
+is-fullwidth-code-point@^3.0.0:
+  version "3.0.0"
+  resolved "https://registry.yarnpkg.com/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz#f116f8064fe90b3f7844a38997c0b75051269f1d"
+  integrity sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==
+
+is-generator-fn@^2.0.0:
+  version "2.1.0"
+  resolved "https://registry.yarnpkg.com/is-generator-fn/-/is-generator-fn-2.1.0.tgz#7d140adc389aaf3011a8f2a2a4cfa6faadffb118"
+  integrity sha512-cTIB4yPYL/Grw0EaSzASzg6bBy9gqCofvWN8okThAYIxKJZC+udlRAmGbM0XLeniEJSs8uEgHPGuHSe1XsOLSQ==
+
+is-number@^3.0.0:
+  version "3.0.0"
+  resolved "https://registry.yarnpkg.com/is-number/-/is-number-3.0.0.tgz#24fd6201a4782cf50561c810276afc7d12d71195"
+  integrity sha1-JP1iAaR4LPUFYcgQJ2r8fRLXEZU=
+  dependencies:
+    kind-of "^3.0.2"
+
+is-number@^7.0.0:
+  version "7.0.0"
+  resolved "https://registry.yarnpkg.com/is-number/-/is-number-7.0.0.tgz#7535345b896734d5f80c4d06c50955527a14f12b"
+  integrity sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==
+
+is-plain-object@^2.0.3, is-plain-object@^2.0.4:
+  version "2.0.4"
+  resolved "https://registry.yarnpkg.com/is-plain-object/-/is-plain-object-2.0.4.tgz#2c163b3fafb1b606d9d17928f05c2a1c38e07677"
+  integrity sha512-h5PpgXkWitc38BBMYawTYMWJHFZJVnBquFE57xFpjB8pJFiF6gZ+bU+WyI/yqXiFR5mdLsgYNaPe8uao6Uv9Og==
+  dependencies:
+    isobject "^3.0.1"
+
+is-potential-custom-element-name@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/is-potential-custom-element-name/-/is-potential-custom-element-name-1.0.0.tgz#0c52e54bcca391bb2c494b21e8626d7336c6e397"
+  integrity sha1-DFLlS8yjkbssSUsh6GJtczbG45c=
+
+is-stream@^1.1.0:
+  version "1.1.0"
+  resolved "https://registry.yarnpkg.com/is-stream/-/is-stream-1.1.0.tgz#12d4a3dd4e68e0b79ceb8dbc84173ae80d91ca44"
+  integrity sha1-EtSj3U5o4Lec6428hBc66A2RykQ=
+
+is-stream@^2.0.0:
+  version "2.0.0"
+  resolved "https://registry.yarnpkg.com/is-stream/-/is-stream-2.0.0.tgz#bde9c32680d6fae04129d6ac9d921ce7815f78e3"
+  integrity sha512-XCoy+WlUr7d1+Z8GgSuXmpuUFC9fOhRXglJMx+dwLKTkL44Cjd4W1Z5P+BQZpr+cR93aGP4S/s7Ftw6Nd/kiEw==
+
+is-typedarray@^1.0.0, is-typedarray@~1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/is-typedarray/-/is-typedarray-1.0.0.tgz#e479c80858df0c1b11ddda6940f96011fcda4a9a"
+  integrity sha1-5HnICFjfDBsR3dppQPlgEfzaSpo=
+
+is-windows@^1.0.2:
+  version "1.0.2"
+  resolved "https://registry.yarnpkg.com/is-windows/-/is-windows-1.0.2.tgz#d1850eb9791ecd18e6182ce12a30f396634bb19d"
+  integrity sha512-eXK1UInq2bPmjyX6e3VHIzMLobc4J94i4AWn+Hpq3OU5KkrRC96OAcR3PRJ/pGu6m8TRnBHP9dkXQVsT/COVIA==
+
+is-wsl@^2.2.0:
+  version "2.2.0"
+  resolved "https://registry.yarnpkg.com/is-wsl/-/is-wsl-2.2.0.tgz#74a4c76e77ca9fd3f932f290c17ea326cd157271"
+  integrity sha512-fKzAra0rGJUUBwGBgNkHZuToZcn+TtXHpeCgmkMJMMYx1sQDYaCSyjJBSCa2nH1DGm7s3n1oBnohoVTBaN7Lww==
+  dependencies:
+    is-docker "^2.0.0"
+
+isarray@1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/isarray/-/isarray-1.0.0.tgz#bb935d48582cba168c06834957a54a3e07124f11"
+  integrity sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE=
+
+isexe@^2.0.0:
+  version "2.0.0"
+  resolved "https://registry.yarnpkg.com/isexe/-/isexe-2.0.0.tgz#e8fbf374dc556ff8947a10dcb0572d633f2cfa10"
+  integrity sha1-6PvzdNxVb/iUehDcsFctYz8s+hA=
+
+isobject@^2.0.0:
+  version "2.1.0"
+  resolved "https://registry.yarnpkg.com/isobject/-/isobject-2.1.0.tgz#f065561096a3f1da2ef46272f815c840d87e0c89"
+  integrity sha1-8GVWEJaj8dou9GJy+BXIQNh+DIk=
+  dependencies:
+    isarray "1.0.0"
+
+isobject@^3.0.0, isobject@^3.0.1:
+  version "3.0.1"
+  resolved "https://registry.yarnpkg.com/isobject/-/isobject-3.0.1.tgz#4e431e92b11a9731636aa1f9c8d1ccbcfdab78df"
+  integrity sha1-TkMekrEalzFjaqH5yNHMvP2reN8=
+
+isstream@~0.1.2:
+  version "0.1.2"
+  resolved "https://registry.yarnpkg.com/isstream/-/isstream-0.1.2.tgz#47e63f7af55afa6f92e1500e690eb8b8529c099a"
+  integrity sha1-R+Y/evVa+m+S4VAOaQ64uFKcCZo=
+
+istanbul-lib-coverage@^3.0.0:
+  version "3.0.0"
+  resolved "https://registry.yarnpkg.com/istanbul-lib-coverage/-/istanbul-lib-coverage-3.0.0.tgz#f5944a37c70b550b02a78a5c3b2055b280cec8ec"
+  integrity sha512-UiUIqxMgRDET6eR+o5HbfRYP1l0hqkWOs7vNxC/mggutCMUIhWMm8gAHb8tHlyfD3/l6rlgNA5cKdDzEAf6hEg==
+
+istanbul-lib-instrument@^4.0.0, istanbul-lib-instrument@^4.0.3:
+  version "4.0.3"
+  resolved "https://registry.yarnpkg.com/istanbul-lib-instrument/-/istanbul-lib-instrument-4.0.3.tgz#873c6fff897450118222774696a3f28902d77c1d"
+  integrity sha512-BXgQl9kf4WTCPCCpmFGoJkz/+uhvm7h7PFKUYxh7qarQd3ER33vHG//qaE8eN25l07YqZPpHXU9I09l/RD5aGQ==
+  dependencies:
+    "@babel/core" "^7.7.5"
+    "@istanbuljs/schema" "^0.1.2"
+    istanbul-lib-coverage "^3.0.0"
+    semver "^6.3.0"
+
+istanbul-lib-report@^3.0.0:
+  version "3.0.0"
+  resolved "https://registry.yarnpkg.com/istanbul-lib-report/-/istanbul-lib-report-3.0.0.tgz#7518fe52ea44de372f460a76b5ecda9ffb73d8a6"
+  integrity sha512-wcdi+uAKzfiGT2abPpKZ0hSU1rGQjUQnLvtY5MpQ7QCTahD3VODhcu4wcfY1YtkGaDD5yuydOLINXsfbus9ROw==
+  dependencies:
+    istanbul-lib-coverage "^3.0.0"
+    make-dir "^3.0.0"
+    supports-color "^7.1.0"
+
+istanbul-lib-source-maps@^4.0.0:
+  version "4.0.0"
+  resolved "https://registry.yarnpkg.com/istanbul-lib-source-maps/-/istanbul-lib-source-maps-4.0.0.tgz#75743ce6d96bb86dc7ee4352cf6366a23f0b1ad9"
+  integrity sha512-c16LpFRkR8vQXyHZ5nLpY35JZtzj1PQY1iZmesUbf1FZHbIupcWfjgOXBY9YHkLEQ6puz1u4Dgj6qmU/DisrZg==
+  dependencies:
+    debug "^4.1.1"
+    istanbul-lib-coverage "^3.0.0"
+    source-map "^0.6.1"
+
+istanbul-reports@^3.0.2:
+  version "3.0.2"
+  resolved "https://registry.yarnpkg.com/istanbul-reports/-/istanbul-reports-3.0.2.tgz#d593210e5000683750cb09fc0644e4b6e27fd53b"
+  integrity sha512-9tZvz7AiR3PEDNGiV9vIouQ/EAcqMXFmkcA1CDFTwOB98OZVDL0PH9glHotf5Ugp6GCOTypfzGWI/OqjWNCRUw==
+  dependencies:
+    html-escaper "^2.0.0"
+    istanbul-lib-report "^3.0.0"
+
+iterall@^1.2.1, iterall@^1.2.2:
+  version "1.3.0"
+  resolved "https://registry.yarnpkg.com/iterall/-/iterall-1.3.0.tgz#afcb08492e2915cbd8a0884eb93a8c94d0d72fea"
+  integrity sha512-QZ9qOMdF+QLHxy1QIpUHUU1D5pS2CG2P69LF6L6CPjPYA/XMOmKV3PZpawHoAjHNyB0swdVTRxdYT4tbBbxqwg==
+
+jest-changed-files@^26.6.2:
+  version "26.6.2"
+  resolved "https://registry.yarnpkg.com/jest-changed-files/-/jest-changed-files-26.6.2.tgz#f6198479e1cc66f22f9ae1e22acaa0b429c042d0"
+  integrity sha512-fDS7szLcY9sCtIip8Fjry9oGf3I2ht/QT21bAHm5Dmf0mD4X3ReNUf17y+bO6fR8WgbIZTlbyG1ak/53cbRzKQ==
+  dependencies:
+    "@jest/types" "^26.6.2"
+    execa "^4.0.0"
+    throat "^5.0.0"
+
+jest-cli@^26.5.3:
+  version "26.6.3"
+  resolved "https://registry.yarnpkg.com/jest-cli/-/jest-cli-26.6.3.tgz#43117cfef24bc4cd691a174a8796a532e135e92a"
+  integrity sha512-GF9noBSa9t08pSyl3CY4frMrqp+aQXFGFkf5hEPbh/pIUFYWMK6ZLTfbmadxJVcJrdRoChlWQsA2VkJcDFK8hg==
+  dependencies:
+    "@jest/core" "^26.6.3"
+    "@jest/test-result" "^26.6.2"
+    "@jest/types" "^26.6.2"
+    chalk "^4.0.0"
+    exit "^0.1.2"
+    graceful-fs "^4.2.4"
+    import-local "^3.0.2"
+    is-ci "^2.0.0"
+    jest-config "^26.6.3"
+    jest-util "^26.6.2"
+    jest-validate "^26.6.2"
+    prompts "^2.0.1"
+    yargs "^15.4.1"
+
+jest-config@^26.6.3:
+  version "26.6.3"
+  resolved "https://registry.yarnpkg.com/jest-config/-/jest-config-26.6.3.tgz#64f41444eef9eb03dc51d5c53b75c8c71f645349"
+  integrity sha512-t5qdIj/bCj2j7NFVHb2nFB4aUdfucDn3JRKgrZnplb8nieAirAzRSHP8uDEd+qV6ygzg9Pz4YG7UTJf94LPSyg==
+  dependencies:
+    "@babel/core" "^7.1.0"
+    "@jest/test-sequencer" "^26.6.3"
+    "@jest/types" "^26.6.2"
+    babel-jest "^26.6.3"
+    chalk "^4.0.0"
+    deepmerge "^4.2.2"
+    glob "^7.1.1"
+    graceful-fs "^4.2.4"
+    jest-environment-jsdom "^26.6.2"
+    jest-environment-node "^26.6.2"
+    jest-get-type "^26.3.0"
+    jest-jasmine2 "^26.6.3"
+    jest-regex-util "^26.0.0"
+    jest-resolve "^26.6.2"
+    jest-util "^26.6.2"
+    jest-validate "^26.6.2"
+    micromatch "^4.0.2"
+    pretty-format "^26.6.2"
+
+jest-diff@^26.6.2:
+  version "26.6.2"
+  resolved "https://registry.yarnpkg.com/jest-diff/-/jest-diff-26.6.2.tgz#1aa7468b52c3a68d7d5c5fdcdfcd5e49bd164394"
+  integrity sha512-6m+9Z3Gv9wN0WFVasqjCL/06+EFCMTqDEUl/b87HYK2rAPTyfz4ZIuSlPhY51PIQRWx5TaxeF1qmXKe9gfN3sA==
+  dependencies:
+    chalk "^4.0.0"
+    diff-sequences "^26.6.2"
+    jest-get-type "^26.3.0"
+    pretty-format "^26.6.2"
+
+jest-docblock@^26.0.0:
+  version "26.0.0"
+  resolved "https://registry.yarnpkg.com/jest-docblock/-/jest-docblock-26.0.0.tgz#3e2fa20899fc928cb13bd0ff68bd3711a36889b5"
+  integrity sha512-RDZ4Iz3QbtRWycd8bUEPxQsTlYazfYn/h5R65Fc6gOfwozFhoImx+affzky/FFBuqISPTqjXomoIGJVKBWoo0w==
+  dependencies:
+    detect-newline "^3.0.0"
+
+jest-each@^26.6.2:
+  version "26.6.2"
+  resolved "https://registry.yarnpkg.com/jest-each/-/jest-each-26.6.2.tgz#02526438a77a67401c8a6382dfe5999952c167cb"
+  integrity sha512-Mer/f0KaATbjl8MCJ+0GEpNdqmnVmDYqCTJYTvoo7rqmRiDllmp2AYN+06F93nXcY3ur9ShIjS+CO/uD+BbH4A==
+  dependencies:
+    "@jest/types" "^26.6.2"
+    chalk "^4.0.0"
+    jest-get-type "^26.3.0"
+    jest-util "^26.6.2"
+    pretty-format "^26.6.2"
+
+jest-environment-jsdom@^26.6.2:
+  version "26.6.2"
+  resolved "https://registry.yarnpkg.com/jest-environment-jsdom/-/jest-environment-jsdom-26.6.2.tgz#78d09fe9cf019a357009b9b7e1f101d23bd1da3e"
+  integrity sha512-jgPqCruTlt3Kwqg5/WVFyHIOJHsiAvhcp2qiR2QQstuG9yWox5+iHpU3ZrcBxW14T4fe5Z68jAfLRh7joCSP2Q==
+  dependencies:
+    "@jest/environment" "^26.6.2"
+    "@jest/fake-timers" "^26.6.2"
+    "@jest/types" "^26.6.2"
+    "@types/node" "*"
+    jest-mock "^26.6.2"
+    jest-util "^26.6.2"
+    jsdom "^16.4.0"
+
+jest-environment-node@^26.6.2:
+  version "26.6.2"
+  resolved "https://registry.yarnpkg.com/jest-environment-node/-/jest-environment-node-26.6.2.tgz#824e4c7fb4944646356f11ac75b229b0035f2b0c"
+  integrity sha512-zhtMio3Exty18dy8ee8eJ9kjnRyZC1N4C1Nt/VShN1apyXc8rWGtJ9lI7vqiWcyyXS4BVSEn9lxAM2D+07/Tag==
+  dependencies:
+    "@jest/environment" "^26.6.2"
+    "@jest/fake-timers" "^26.6.2"
+    "@jest/types" "^26.6.2"
+    "@types/node" "*"
+    jest-mock "^26.6.2"
+    jest-util "^26.6.2"
+
+jest-get-type@^26.3.0:
+  version "26.3.0"
+  resolved "https://registry.yarnpkg.com/jest-get-type/-/jest-get-type-26.3.0.tgz#e97dc3c3f53c2b406ca7afaed4493b1d099199e0"
+  integrity sha512-TpfaviN1R2pQWkIihlfEanwOXK0zcxrKEE4MlU6Tn7keoXdN6/3gK/xl0yEh8DOunn5pOVGKf8hB4R9gVh04ig==
+
+jest-haste-map@^26.6.2:
+  version "26.6.2"
+  resolved "https://registry.yarnpkg.com/jest-haste-map/-/jest-haste-map-26.6.2.tgz#dd7e60fe7dc0e9f911a23d79c5ff7fb5c2cafeaa"
+  integrity sha512-easWIJXIw71B2RdR8kgqpjQrbMRWQBgiBwXYEhtGUTaX+doCjBheluShdDMeR8IMfJiTqH4+zfhtg29apJf/8w==
+  dependencies:
+    "@jest/types" "^26.6.2"
+    "@types/graceful-fs" "^4.1.2"
+    "@types/node" "*"
+    anymatch "^3.0.3"
+    fb-watchman "^2.0.0"
+    graceful-fs "^4.2.4"
+    jest-regex-util "^26.0.0"
+    jest-serializer "^26.6.2"
+    jest-util "^26.6.2"
+    jest-worker "^26.6.2"
+    micromatch "^4.0.2"
+    sane "^4.0.3"
+    walker "^1.0.7"
+  optionalDependencies:
+    fsevents "^2.1.2"
+
+jest-jasmine2@^26.6.3:
+  version "26.6.3"
+  resolved "https://registry.yarnpkg.com/jest-jasmine2/-/jest-jasmine2-26.6.3.tgz#adc3cf915deacb5212c93b9f3547cd12958f2edd"
+  integrity sha512-kPKUrQtc8aYwBV7CqBg5pu+tmYXlvFlSFYn18ev4gPFtrRzB15N2gW/Roew3187q2w2eHuu0MU9TJz6w0/nPEg==
+  dependencies:
+    "@babel/traverse" "^7.1.0"
+    "@jest/environment" "^26.6.2"
+    "@jest/source-map" "^26.6.2"
+    "@jest/test-result" "^26.6.2"
+    "@jest/types" "^26.6.2"
+    "@types/node" "*"
+    chalk "^4.0.0"
+    co "^4.6.0"
+    expect "^26.6.2"
+    is-generator-fn "^2.0.0"
+    jest-each "^26.6.2"
+    jest-matcher-utils "^26.6.2"
+    jest-message-util "^26.6.2"
+    jest-runtime "^26.6.3"
+    jest-snapshot "^26.6.2"
+    jest-util "^26.6.2"
+    pretty-format "^26.6.2"
+    throat "^5.0.0"
+
+jest-leak-detector@^26.6.2:
+  version "26.6.2"
+  resolved "https://registry.yarnpkg.com/jest-leak-detector/-/jest-leak-detector-26.6.2.tgz#7717cf118b92238f2eba65054c8a0c9c653a91af"
+  integrity sha512-i4xlXpsVSMeKvg2cEKdfhh0H39qlJlP5Ex1yQxwF9ubahboQYMgTtz5oML35AVA3B4Eu+YsmwaiKVev9KCvLxg==
+  dependencies:
+    jest-get-type "^26.3.0"
+    pretty-format "^26.6.2"
+
+jest-matcher-utils@^26.6.2:
+  version "26.6.2"
+  resolved "https://registry.yarnpkg.com/jest-matcher-utils/-/jest-matcher-utils-26.6.2.tgz#8e6fd6e863c8b2d31ac6472eeb237bc595e53e7a"
+  integrity sha512-llnc8vQgYcNqDrqRDXWwMr9i7rS5XFiCwvh6DTP7Jqa2mqpcCBBlpCbn+trkG0KNhPu/h8rzyBkriOtBstvWhw==
+  dependencies:
+    chalk "^4.0.0"
+    jest-diff "^26.6.2"
+    jest-get-type "^26.3.0"
+    pretty-format "^26.6.2"
+
+jest-message-util@^26.6.2:
+  version "26.6.2"
+  resolved "https://registry.yarnpkg.com/jest-message-util/-/jest-message-util-26.6.2.tgz#58173744ad6fc0506b5d21150b9be56ef001ca07"
+  integrity sha512-rGiLePzQ3AzwUshu2+Rn+UMFk0pHN58sOG+IaJbk5Jxuqo3NYO1U2/MIR4S1sKgsoYSXSzdtSa0TgrmtUwEbmA==
+  dependencies:
+    "@babel/code-frame" "^7.0.0"
+    "@jest/types" "^26.6.2"
+    "@types/stack-utils" "^2.0.0"
+    chalk "^4.0.0"
+    graceful-fs "^4.2.4"
+    micromatch "^4.0.2"
+    pretty-format "^26.6.2"
+    slash "^3.0.0"
+    stack-utils "^2.0.2"
+
+jest-mock@^26.6.2:
+  version "26.6.2"
+  resolved "https://registry.yarnpkg.com/jest-mock/-/jest-mock-26.6.2.tgz#d6cb712b041ed47fe0d9b6fc3474bc6543feb302"
+  integrity sha512-YyFjePHHp1LzpzYcmgqkJ0nm0gg/lJx2aZFzFy1S6eUqNjXsOqTK10zNRff2dNfssgokjkG65OlWNcIlgd3zew==
+  dependencies:
+    "@jest/types" "^26.6.2"
+    "@types/node" "*"
+
+jest-pnp-resolver@^1.2.2:
+  version "1.2.2"
+  resolved "https://registry.yarnpkg.com/jest-pnp-resolver/-/jest-pnp-resolver-1.2.2.tgz#b704ac0ae028a89108a4d040b3f919dfddc8e33c"
+  integrity sha512-olV41bKSMm8BdnuMsewT4jqlZ8+3TCARAXjZGT9jcoSnrfUnRCqnMoF9XEeoWjbzObpqF9dRhHQj0Xb9QdF6/w==
+
+jest-regex-util@^26.0.0:
+  version "26.0.0"
+  resolved "https://registry.yarnpkg.com/jest-regex-util/-/jest-regex-util-26.0.0.tgz#d25e7184b36e39fd466c3bc41be0971e821fee28"
+  integrity sha512-Gv3ZIs/nA48/Zvjrl34bf+oD76JHiGDUxNOVgUjh3j890sblXryjY4rss71fPtD/njchl6PSE2hIhvyWa1eT0A==
+
+jest-resolve-dependencies@^26.6.3:
+  version "26.6.3"
+  resolved "https://registry.yarnpkg.com/jest-resolve-dependencies/-/jest-resolve-dependencies-26.6.3.tgz#6680859ee5d22ee5dcd961fe4871f59f4c784fb6"
+  integrity sha512-pVwUjJkxbhe4RY8QEWzN3vns2kqyuldKpxlxJlzEYfKSvY6/bMvxoFrYYzUO1Gx28yKWN37qyV7rIoIp2h8fTg==
+  dependencies:
+    "@jest/types" "^26.6.2"
+    jest-regex-util "^26.0.0"
+    jest-snapshot "^26.6.2"
+
+jest-resolve@^26.6.2:
+  version "26.6.2"
+  resolved "https://registry.yarnpkg.com/jest-resolve/-/jest-resolve-26.6.2.tgz#a3ab1517217f469b504f1b56603c5bb541fbb507"
+  integrity sha512-sOxsZOq25mT1wRsfHcbtkInS+Ek7Q8jCHUB0ZUTP0tc/c41QHriU/NunqMfCUWsL4H3MHpvQD4QR9kSYhS7UvQ==
+  dependencies:
+    "@jest/types" "^26.6.2"
+    chalk "^4.0.0"
+    graceful-fs "^4.2.4"
+    jest-pnp-resolver "^1.2.2"
+    jest-util "^26.6.2"
+    read-pkg-up "^7.0.1"
+    resolve "^1.18.1"
+    slash "^3.0.0"
+
+jest-runner@^26.6.3:
+  version "26.6.3"
+  resolved "https://registry.yarnpkg.com/jest-runner/-/jest-runner-26.6.3.tgz#2d1fed3d46e10f233fd1dbd3bfaa3fe8924be159"
+  integrity sha512-atgKpRHnaA2OvByG/HpGA4g6CSPS/1LK0jK3gATJAoptC1ojltpmVlYC3TYgdmGp+GLuhzpH30Gvs36szSL2JQ==
+  dependencies:
+    "@jest/console" "^26.6.2"
+    "@jest/environment" "^26.6.2"
+    "@jest/test-result" "^26.6.2"
+    "@jest/types" "^26.6.2"
+    "@types/node" "*"
+    chalk "^4.0.0"
+    emittery "^0.7.1"
+    exit "^0.1.2"
+    graceful-fs "^4.2.4"
+    jest-config "^26.6.3"
+    jest-docblock "^26.0.0"
+    jest-haste-map "^26.6.2"
+    jest-leak-detector "^26.6.2"
+    jest-message-util "^26.6.2"
+    jest-resolve "^26.6.2"
+    jest-runtime "^26.6.3"
+    jest-util "^26.6.2"
+    jest-worker "^26.6.2"
+    source-map-support "^0.5.6"
+    throat "^5.0.0"
+
+jest-runtime@^26.6.3:
+  version "26.6.3"
+  resolved "https://registry.yarnpkg.com/jest-runtime/-/jest-runtime-26.6.3.tgz#4f64efbcfac398331b74b4b3c82d27d401b8fa2b"
+  integrity sha512-lrzyR3N8sacTAMeonbqpnSka1dHNux2uk0qqDXVkMv2c/A3wYnvQ4EXuI013Y6+gSKSCxdaczvf4HF0mVXHRdw==
+  dependencies:
+    "@jest/console" "^26.6.2"
+    "@jest/environment" "^26.6.2"
+    "@jest/fake-timers" "^26.6.2"
+    "@jest/globals" "^26.6.2"
+    "@jest/source-map" "^26.6.2"
+    "@jest/test-result" "^26.6.2"
+    "@jest/transform" "^26.6.2"
+    "@jest/types" "^26.6.2"
+    "@types/yargs" "^15.0.0"
+    chalk "^4.0.0"
+    cjs-module-lexer "^0.6.0"
+    collect-v8-coverage "^1.0.0"
+    exit "^0.1.2"
+    glob "^7.1.3"
+    graceful-fs "^4.2.4"
+    jest-config "^26.6.3"
+    jest-haste-map "^26.6.2"
+    jest-message-util "^26.6.2"
+    jest-mock "^26.6.2"
+    jest-regex-util "^26.0.0"
+    jest-resolve "^26.6.2"
+    jest-snapshot "^26.6.2"
+    jest-util "^26.6.2"
+    jest-validate "^26.6.2"
+    slash "^3.0.0"
+    strip-bom "^4.0.0"
+    yargs "^15.4.1"
+
+jest-serializer@^26.6.2:
+  version "26.6.2"
+  resolved "https://registry.yarnpkg.com/jest-serializer/-/jest-serializer-26.6.2.tgz#d139aafd46957d3a448f3a6cdabe2919ba0742d1"
+  integrity sha512-S5wqyz0DXnNJPd/xfIzZ5Xnp1HrJWBczg8mMfMpN78OJ5eDxXyf+Ygld9wX1DnUWbIbhM1YDY95NjR4CBXkb2g==
+  dependencies:
+    "@types/node" "*"
+    graceful-fs "^4.2.4"
+
+jest-snapshot@^26.6.2:
+  version "26.6.2"
+  resolved "https://registry.yarnpkg.com/jest-snapshot/-/jest-snapshot-26.6.2.tgz#f3b0af1acb223316850bd14e1beea9837fb39c84"
+  integrity sha512-OLhxz05EzUtsAmOMzuupt1lHYXCNib0ECyuZ/PZOx9TrZcC8vL0x+DUG3TL+GLX3yHG45e6YGjIm0XwDc3q3og==
+  dependencies:
+    "@babel/types" "^7.0.0"
+    "@jest/types" "^26.6.2"
+    "@types/babel__traverse" "^7.0.4"
+    "@types/prettier" "^2.0.0"
+    chalk "^4.0.0"
+    expect "^26.6.2"
+    graceful-fs "^4.2.4"
+    jest-diff "^26.6.2"
+    jest-get-type "^26.3.0"
+    jest-haste-map "^26.6.2"
+    jest-matcher-utils "^26.6.2"
+    jest-message-util "^26.6.2"
+    jest-resolve "^26.6.2"
+    natural-compare "^1.4.0"
+    pretty-format "^26.6.2"
+    semver "^7.3.2"
+
+jest-util@^26.6.2:
+  version "26.6.2"
+  resolved "https://registry.yarnpkg.com/jest-util/-/jest-util-26.6.2.tgz#907535dbe4d5a6cb4c47ac9b926f6af29576cbc1"
+  integrity sha512-MDW0fKfsn0OI7MS7Euz6h8HNDXVQ0gaM9uW6RjfDmd1DAFcaxX9OqIakHIqhbnmF08Cf2DLDG+ulq8YQQ0Lp0Q==
+  dependencies:
+    "@jest/types" "^26.6.2"
+    "@types/node" "*"
+    chalk "^4.0.0"
+    graceful-fs "^4.2.4"
+    is-ci "^2.0.0"
+    micromatch "^4.0.2"
+
+jest-validate@^26.6.2:
+  version "26.6.2"
+  resolved "https://registry.yarnpkg.com/jest-validate/-/jest-validate-26.6.2.tgz#23d380971587150467342911c3d7b4ac57ab20ec"
+  integrity sha512-NEYZ9Aeyj0i5rQqbq+tpIOom0YS1u2MVu6+euBsvpgIme+FOfRmoC4R5p0JiAUpaFvFy24xgrpMknarR/93XjQ==
+  dependencies:
+    "@jest/types" "^26.6.2"
+    camelcase "^6.0.0"
+    chalk "^4.0.0"
+    jest-get-type "^26.3.0"
+    leven "^3.1.0"
+    pretty-format "^26.6.2"
+
+jest-watcher@^26.6.2:
+  version "26.6.2"
+  resolved "https://registry.yarnpkg.com/jest-watcher/-/jest-watcher-26.6.2.tgz#a5b683b8f9d68dbcb1d7dae32172d2cca0592975"
+  integrity sha512-WKJob0P/Em2csiVthsI68p6aGKTIcsfjH9Gsx1f0A3Italz43e3ho0geSAVsmj09RWOELP1AZ/DXyJgOgDKxXQ==
+  dependencies:
+    "@jest/test-result" "^26.6.2"
+    "@jest/types" "^26.6.2"
+    "@types/node" "*"
+    ansi-escapes "^4.2.1"
+    chalk "^4.0.0"
+    jest-util "^26.6.2"
+    string-length "^4.0.1"
+
+jest-worker@^26.6.2:
+  version "26.6.2"
+  resolved "https://registry.yarnpkg.com/jest-worker/-/jest-worker-26.6.2.tgz#7f72cbc4d643c365e27b9fd775f9d0eaa9c7a8ed"
+  integrity sha512-KWYVV1c4i+jbMpaBC+U++4Va0cp8OisU185o73T1vo99hqi7w8tSJfUXYswwqqrjzwxa6KpRK54WhPvwf5w6PQ==
+  dependencies:
+    "@types/node" "*"
+    merge-stream "^2.0.0"
+    supports-color "^7.0.0"
+
+jest@26.5.3:
+  version "26.5.3"
+  resolved "https://registry.yarnpkg.com/jest/-/jest-26.5.3.tgz#5e7a322d16f558dc565ca97639e85993ef5affe6"
+  integrity sha512-uJi3FuVSLmkZrWvaDyaVTZGLL8WcfynbRnFXyAHuEtYiSZ+ijDDIMOw1ytmftK+y/+OdAtsG9QrtbF7WIBmOyA==
+  dependencies:
+    "@jest/core" "^26.5.3"
+    import-local "^3.0.2"
+    jest-cli "^26.5.3"
+
+"js-tokens@^3.0.0 || ^4.0.0", js-tokens@^4.0.0:
+  version "4.0.0"
+  resolved "https://registry.yarnpkg.com/js-tokens/-/js-tokens-4.0.0.tgz#19203fb59991df98e3a287050d4647cdeaf32499"
+  integrity sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==
+
+js-yaml@^3.13.1:
+  version "3.14.1"
+  resolved "https://registry.yarnpkg.com/js-yaml/-/js-yaml-3.14.1.tgz#dae812fdb3825fa306609a8717383c50c36a0537"
+  integrity sha512-okMH7OXXJ7YrN9Ok3/SXrnu4iX9yOk+25nqX4imS2npuvTYDmo/QEZoqwZkYaIDk3jVvBOTOIEgEhaLOynBS9g==
+  dependencies:
+    argparse "^1.0.7"
+    esprima "^4.0.0"
+
+jsbn@~0.1.0:
+  version "0.1.1"
+  resolved "https://registry.yarnpkg.com/jsbn/-/jsbn-0.1.1.tgz#a5e654c2e5a2deb5f201d96cefbca80c0ef2f513"
+  integrity sha1-peZUwuWi3rXyAdls77yoDA7y9RM=
+
+jsdom@^16.4.0:
+  version "16.4.0"
+  resolved "https://registry.yarnpkg.com/jsdom/-/jsdom-16.4.0.tgz#36005bde2d136f73eee1a830c6d45e55408edddb"
+  integrity sha512-lYMm3wYdgPhrl7pDcRmvzPhhrGVBeVhPIqeHjzeiHN3DFmD1RBpbExbi8vU7BJdH8VAZYovR8DMt0PNNDM7k8w==
+  dependencies:
+    abab "^2.0.3"
+    acorn "^7.1.1"
+    acorn-globals "^6.0.0"
+    cssom "^0.4.4"
+    cssstyle "^2.2.0"
+    data-urls "^2.0.0"
+    decimal.js "^10.2.0"
+    domexception "^2.0.1"
+    escodegen "^1.14.1"
+    html-encoding-sniffer "^2.0.1"
+    is-potential-custom-element-name "^1.0.0"
+    nwsapi "^2.2.0"
+    parse5 "5.1.1"
+    request "^2.88.2"
+    request-promise-native "^1.0.8"
+    saxes "^5.0.0"
+    symbol-tree "^3.2.4"
+    tough-cookie "^3.0.1"
+    w3c-hr-time "^1.0.2"
+    w3c-xmlserializer "^2.0.0"
+    webidl-conversions "^6.1.0"
+    whatwg-encoding "^1.0.5"
+    whatwg-mimetype "^2.3.0"
+    whatwg-url "^8.0.0"
+    ws "^7.2.3"
+    xml-name-validator "^3.0.0"
+
+jsesc@^2.5.1:
+  version "2.5.2"
+  resolved "https://registry.yarnpkg.com/jsesc/-/jsesc-2.5.2.tgz#80564d2e483dacf6e8ef209650a67df3f0c283a4"
+  integrity sha512-OYu7XEzjkCQ3C5Ps3QIZsQfNpqoJyZZA99wd9aWd05NCtC5pWOkShK2mkL6HXQR6/Cy2lbNdPlZBpuQHXE63gA==
+
+json-parse-even-better-errors@^2.3.0:
+  version "2.3.1"
+  resolved "https://registry.yarnpkg.com/json-parse-even-better-errors/-/json-parse-even-better-errors-2.3.1.tgz#7c47805a94319928e05777405dc12e1f7a4ee02d"
+  integrity sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==
+
+json-schema-traverse@^0.4.1:
+  version "0.4.1"
+  resolved "https://registry.yarnpkg.com/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz#69f6a87d9513ab8bb8fe63bdb0979c448e684660"
+  integrity sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==
+
+json-schema@0.2.3:
+  version "0.2.3"
+  resolved "https://registry.yarnpkg.com/json-schema/-/json-schema-0.2.3.tgz#b480c892e59a2f05954ce727bd3f2a4e882f9e13"
+  integrity sha1-tIDIkuWaLwWVTOcnvT8qTogvnhM=
+
+json-stringify-safe@~5.0.1:
+  version "5.0.1"
+  resolved "https://registry.yarnpkg.com/json-stringify-safe/-/json-stringify-safe-5.0.1.tgz#1296a2d58fd45f19a0f6ce01d65701e2c735b6eb"
+  integrity sha1-Epai1Y/UXxmg9s4B1lcB4sc1tus=
+
+json5@^2.1.2:
+  version "2.2.0"
+  resolved "https://registry.yarnpkg.com/json5/-/json5-2.2.0.tgz#2dfefe720c6ba525d9ebd909950f0515316c89a3"
+  integrity sha512-f+8cldu7X/y7RAJurMEJmdoKXGB/X550w2Nr3tTbezL6RwEE/iMcm+tZnXeoZtKuOq6ft8+CqzEkrIgx1fPoQA==
+  dependencies:
+    minimist "^1.2.5"
+
+jsprim@^1.2.2:
+  version "1.4.1"
+  resolved "https://registry.yarnpkg.com/jsprim/-/jsprim-1.4.1.tgz#313e66bc1e5cc06e438bc1b7499c2e5c56acb6a2"
+  integrity sha1-MT5mvB5cwG5Di8G3SZwuXFastqI=
+  dependencies:
+    assert-plus "1.0.0"
+    extsprintf "1.3.0"
+    json-schema "0.2.3"
+    verror "1.10.0"
+
+kind-of@^3.0.2, kind-of@^3.0.3, kind-of@^3.2.0:
+  version "3.2.2"
+  resolved "https://registry.yarnpkg.com/kind-of/-/kind-of-3.2.2.tgz#31ea21a734bab9bbb0f32466d893aea51e4a3c64"
+  integrity sha1-MeohpzS6ubuw8yRm2JOupR5KPGQ=
+  dependencies:
+    is-buffer "^1.1.5"
+
+kind-of@^4.0.0:
+  version "4.0.0"
+  resolved "https://registry.yarnpkg.com/kind-of/-/kind-of-4.0.0.tgz#20813df3d712928b207378691a45066fae72dd57"
+  integrity sha1-IIE989cSkosgc3hpGkUGb65y3Vc=
+  dependencies:
+    is-buffer "^1.1.5"
+
+kind-of@^5.0.0:
+  version "5.1.0"
+  resolved "https://registry.yarnpkg.com/kind-of/-/kind-of-5.1.0.tgz#729c91e2d857b7a419a1f9aa65685c4c33f5845d"
+  integrity sha512-NGEErnH6F2vUuXDh+OlbcKW7/wOcfdRHaZ7VWtqCztfHri/++YKmP51OdWeGPuqCOba6kk2OTe5d02VmTB80Pw==
+
+kind-of@^6.0.0, kind-of@^6.0.2:
+  version "6.0.3"
+  resolved "https://registry.yarnpkg.com/kind-of/-/kind-of-6.0.3.tgz#07c05034a6c349fa06e24fa35aa76db4580ce4dd"
+  integrity sha512-dcS1ul+9tmeD95T+x28/ehLgd9mENa3LsvDTtzm3vyBEO7RPptvAD+t44WVXaUjTBRcrpFeFlC8WCruUR456hw==
+
+kleur@^3.0.3:
+  version "3.0.3"
+  resolved "https://registry.yarnpkg.com/kleur/-/kleur-3.0.3.tgz#a79c9ecc86ee1ce3fa6206d1216c501f147fc07e"
+  integrity sha512-eTIzlVOSUR+JxdDFepEYcBMtZ9Qqdef+rnzWdRZuMbOywu5tO2w2N7rqjoANZ5k9vywhL6Br1VRjUIgTQx4E8w==
+
+leven@^3.1.0:
+  version "3.1.0"
+  resolved "https://registry.yarnpkg.com/leven/-/leven-3.1.0.tgz#77891de834064cccba82ae7842bb6b14a13ed7f2"
+  integrity sha512-qsda+H8jTaUaN/x5vzW2rzc+8Rw4TAQ/4KjB46IwK5VH+IlVeeeje/EoZRpiXvIqjFgK84QffqPztGI3VBLG1A==
+
+levn@~0.3.0:
+  version "0.3.0"
+  resolved "https://registry.yarnpkg.com/levn/-/levn-0.3.0.tgz#3b09924edf9f083c0490fdd4c0bc4421e04764ee"
+  integrity sha1-OwmSTt+fCDwEkP3UwLxEIeBHZO4=
+  dependencies:
+    prelude-ls "~1.1.2"
+    type-check "~0.3.2"
+
+lines-and-columns@^1.1.6:
+  version "1.1.6"
+  resolved "https://registry.yarnpkg.com/lines-and-columns/-/lines-and-columns-1.1.6.tgz#1c00c743b433cd0a4e80758f7b64a57440d9ff00"
+  integrity sha1-HADHQ7QzzQpOgHWPe2SldEDZ/wA=
+
+locate-path@^5.0.0:
+  version "5.0.0"
+  resolved "https://registry.yarnpkg.com/locate-path/-/locate-path-5.0.0.tgz#1afba396afd676a6d42504d0a67a3a7eb9f62aa0"
+  integrity sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==
+  dependencies:
+    p-locate "^4.1.0"
+
+lodash.sortby@^4.7.0:
+  version "4.7.0"
+  resolved "https://registry.yarnpkg.com/lodash.sortby/-/lodash.sortby-4.7.0.tgz#edd14c824e2cc9c1e0b0a1b42bb5210516a42438"
+  integrity sha1-7dFMgk4sycHgsKG0K7UhBRakJDg=
+
+lodash@^4.17.19:
+  version "4.17.20"
+  resolved "https://registry.yarnpkg.com/lodash/-/lodash-4.17.20.tgz#b44a9b6297bcb698f1c51a3545a2b3b368d59c52"
+  integrity sha512-PlhdFcillOINfeV7Ni6oF1TAEayyZBoZ8bcshTHqOYJYlrqzRK5hagpagky5o4HfCzzd1TRkXPMFq6cKk9rGmA==
+
+loose-envify@^1.1.0, loose-envify@^1.4.0:
+  version "1.4.0"
+  resolved "https://registry.yarnpkg.com/loose-envify/-/loose-envify-1.4.0.tgz#71ee51fa7be4caec1a63839f7e682d8132d30caf"
+  integrity sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==
+  dependencies:
+    js-tokens "^3.0.0 || ^4.0.0"
+
+lru-cache@^6.0.0:
+  version "6.0.0"
+  resolved "https://registry.yarnpkg.com/lru-cache/-/lru-cache-6.0.0.tgz#6d6fe6570ebd96aaf90fcad1dafa3b2566db3a94"
+  integrity sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==
+  dependencies:
+    yallist "^4.0.0"
+
+make-dir@^3.0.0:
+  version "3.1.0"
+  resolved "https://registry.yarnpkg.com/make-dir/-/make-dir-3.1.0.tgz#415e967046b3a7f1d185277d84aa58203726a13f"
+  integrity sha512-g3FeP20LNwhALb/6Cz6Dd4F2ngze0jz7tbzrD2wAV+o9FeNHe4rL+yK2md0J/fiSf1sa1ADhXqi5+oVwOM/eGw==
+  dependencies:
+    semver "^6.0.0"
+
+makeerror@1.0.x:
+  version "1.0.11"
+  resolved "https://registry.yarnpkg.com/makeerror/-/makeerror-1.0.11.tgz#e01a5c9109f2af79660e4e8b9587790184f5a96c"
+  integrity sha1-4BpckQnyr3lmDk6LlYd5AYT1qWw=
+  dependencies:
+    tmpl "1.0.x"
+
+map-cache@^0.2.2:
+  version "0.2.2"
+  resolved "https://registry.yarnpkg.com/map-cache/-/map-cache-0.2.2.tgz#c32abd0bd6525d9b051645bb4f26ac5dc98a0dbf"
+  integrity sha1-wyq9C9ZSXZsFFkW7TyasXcmKDb8=
+
+map-visit@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/map-visit/-/map-visit-1.0.0.tgz#ecdca8f13144e660f1b5bd41f12f3479d98dfb8f"
+  integrity sha1-7Nyo8TFE5mDxtb1B8S80edmN+48=
+  dependencies:
+    object-visit "^1.0.0"
+
+merge-stream@^2.0.0:
+  version "2.0.0"
+  resolved "https://registry.yarnpkg.com/merge-stream/-/merge-stream-2.0.0.tgz#52823629a14dd00c9770fb6ad47dc6310f2c1f60"
+  integrity sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w==
+
+micromatch@^3.1.4:
+  version "3.1.10"
+  resolved "https://registry.yarnpkg.com/micromatch/-/micromatch-3.1.10.tgz#70859bc95c9840952f359a068a3fc49f9ecfac23"
+  integrity sha512-MWikgl9n9M3w+bpsY3He8L+w9eF9338xRl8IAO5viDizwSzziFEyUzo2xrrloB64ADbTf8uA8vRqqttDTOmccg==
+  dependencies:
+    arr-diff "^4.0.0"
+    array-unique "^0.3.2"
+    braces "^2.3.1"
+    define-property "^2.0.2"
+    extend-shallow "^3.0.2"
+    extglob "^2.0.4"
+    fragment-cache "^0.2.1"
+    kind-of "^6.0.2"
+    nanomatch "^1.2.9"
+    object.pick "^1.3.0"
+    regex-not "^1.0.0"
+    snapdragon "^0.8.1"
+    to-regex "^3.0.2"
+
+micromatch@^4.0.2:
+  version "4.0.2"
+  resolved "https://registry.yarnpkg.com/micromatch/-/micromatch-4.0.2.tgz#4fcb0999bf9fbc2fcbdd212f6d629b9a56c39259"
+  integrity sha512-y7FpHSbMUMoyPbYUSzO6PaZ6FyRnQOpHuKwbo1G+Knck95XVU4QAiKdGEnj5wwoS7PlOgthX/09u5iFJ+aYf5Q==
+  dependencies:
+    braces "^3.0.1"
+    picomatch "^2.0.5"
+
+mime-db@1.45.0:
+  version "1.45.0"
+  resolved "https://registry.yarnpkg.com/mime-db/-/mime-db-1.45.0.tgz#cceeda21ccd7c3a745eba2decd55d4b73e7879ea"
+  integrity sha512-CkqLUxUk15hofLoLyljJSrukZi8mAtgd+yE5uO4tqRZsdsAJKv0O+rFMhVDRJgozy+yG6md5KwuXhD4ocIoP+w==
+
+mime-types@^2.1.12, mime-types@~2.1.19:
+  version "2.1.28"
+  resolved "https://registry.yarnpkg.com/mime-types/-/mime-types-2.1.28.tgz#1160c4757eab2c5363888e005273ecf79d2a0ecd"
+  integrity sha512-0TO2yJ5YHYr7M2zzT7gDU1tbwHxEUWBCLt0lscSNpcdAfFyJOVEpRYNS7EXVcTLNj/25QO8gulHC5JtTzSE2UQ==
+  dependencies:
+    mime-db "1.45.0"
+
+mimic-fn@^2.1.0:
+  version "2.1.0"
+  resolved "https://registry.yarnpkg.com/mimic-fn/-/mimic-fn-2.1.0.tgz#7ed2c2ccccaf84d3ffcb7a69b57711fc2083401b"
+  integrity sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg==
+
+minimatch@^3.0.4:
+  version "3.0.4"
+  resolved "https://registry.yarnpkg.com/minimatch/-/minimatch-3.0.4.tgz#5166e286457f03306064be5497e8dbb0c3d32083"
+  integrity sha512-yJHVQEhyqPLUTgt9B83PXu6W3rx4MvvHvSUvToogpwoGDOUQ+yDrR0HRot+yOCdCO7u4hX3pWft6kWBBcqh0UA==
+  dependencies:
+    brace-expansion "^1.1.7"
+
+minimist@^1.1.1, minimist@^1.2.0, minimist@^1.2.5:
+  version "1.2.5"
+  resolved "https://registry.yarnpkg.com/minimist/-/minimist-1.2.5.tgz#67d66014b66a6a8aaa0c083c5fd58df4e4e97602"
+  integrity sha512-FM9nNUYrRBAELZQT3xeZQ7fmMOBg6nWNmJKTcgsJeaLstP/UODVpGsr5OhXhhXg6f+qtJ8uiZ+PUxkDWcgIXLw==
+
+mixin-deep@^1.2.0:
+  version "1.3.2"
+  resolved "https://registry.yarnpkg.com/mixin-deep/-/mixin-deep-1.3.2.tgz#1120b43dc359a785dce65b55b82e257ccf479566"
+  integrity sha512-WRoDn//mXBiJ1H40rqa3vH0toePwSsGb45iInWlTySa+Uu4k3tYUSxa2v1KqAiLtvlrSzaExqS1gtk96A9zvEA==
+  dependencies:
+    for-in "^1.0.2"
+    is-extendable "^1.0.1"
+
+ms@2.0.0:
+  version "2.0.0"
+  resolved "https://registry.yarnpkg.com/ms/-/ms-2.0.0.tgz#5608aeadfc00be6c2901df5f9861788de0d597c8"
+  integrity sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g=
+
+ms@2.1.2:
+  version "2.1.2"
+  resolved "https://registry.yarnpkg.com/ms/-/ms-2.1.2.tgz#d09d1f357b443f493382a8eb3ccd183872ae6009"
+  integrity sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==
+
+nanomatch@^1.2.9:
+  version "1.2.13"
+  resolved "https://registry.yarnpkg.com/nanomatch/-/nanomatch-1.2.13.tgz#b87a8aa4fc0de8fe6be88895b38983ff265bd119"
+  integrity sha512-fpoe2T0RbHwBTBUOftAfBPaDEi06ufaUai0mE6Yn1kacc3SnTErfb/h+X94VXzI64rKFHYImXSvdwGGCmwOqCA==
+  dependencies:
+    arr-diff "^4.0.0"
+    array-unique "^0.3.2"
+    define-property "^2.0.2"
+    extend-shallow "^3.0.2"
+    fragment-cache "^0.2.1"
+    is-windows "^1.0.2"
+    kind-of "^6.0.2"
+    object.pick "^1.3.0"
+    regex-not "^1.0.0"
+    snapdragon "^0.8.1"
+    to-regex "^3.0.1"
+
+natural-compare@^1.4.0:
+  version "1.4.0"
+  resolved "https://registry.yarnpkg.com/natural-compare/-/natural-compare-1.4.0.tgz#4abebfeed7541f2c27acfb29bdbbd15c8d5ba4f7"
+  integrity sha1-Sr6/7tdUHywnrPspvbvRXI1bpPc=
+
+nice-try@^1.0.4:
+  version "1.0.5"
+  resolved "https://registry.yarnpkg.com/nice-try/-/nice-try-1.0.5.tgz#a3378a7696ce7d223e88fc9b764bd7ef1089e366"
+  integrity sha512-1nh45deeb5olNY7eX82BkPO7SSxR5SSYJiPTrTdFUVYwAl8CKMA5N9PjTYkHiRjisVcxcQ1HXdLhx2qxxJzLNQ==
+
+node-int64@^0.4.0:
+  version "0.4.0"
+  resolved "https://registry.yarnpkg.com/node-int64/-/node-int64-0.4.0.tgz#87a9065cdb355d3182d8f94ce11188b825c68a3b"
+  integrity sha1-h6kGXNs1XTGC2PlM4RGIuCXGijs=
+
+node-modules-regexp@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/node-modules-regexp/-/node-modules-regexp-1.0.0.tgz#8d9dbe28964a4ac5712e9131642107c71e90ec40"
+  integrity sha1-jZ2+KJZKSsVxLpExZCEHxx6Q7EA=
+
+node-notifier@^8.0.0:
+  version "8.0.1"
+  resolved "https://registry.yarnpkg.com/node-notifier/-/node-notifier-8.0.1.tgz#f86e89bbc925f2b068784b31f382afdc6ca56be1"
+  integrity sha512-BvEXF+UmsnAfYfoapKM9nGxnP+Wn7P91YfXmrKnfcYCx6VBeoN5Ez5Ogck6I8Bi5k4RlpqRYaw75pAwzX9OphA==
+  dependencies:
+    growly "^1.3.0"
+    is-wsl "^2.2.0"
+    semver "^7.3.2"
+    shellwords "^0.1.1"
+    uuid "^8.3.0"
+    which "^2.0.2"
+
+normalize-package-data@^2.5.0:
+  version "2.5.0"
+  resolved "https://registry.yarnpkg.com/normalize-package-data/-/normalize-package-data-2.5.0.tgz#e66db1838b200c1dfc233225d12cb36520e234a8"
+  integrity sha512-/5CMN3T0R4XTj4DcGaexo+roZSdSFW/0AOOTROrjxzCG1wrWXEsGbRKevjlIL+ZDE4sZlJr5ED4YW0yqmkK+eA==
+  dependencies:
+    hosted-git-info "^2.1.4"
+    resolve "^1.10.0"
+    semver "2 || 3 || 4 || 5"
+    validate-npm-package-license "^3.0.1"
+
+normalize-path@^2.1.1:
+  version "2.1.1"
+  resolved "https://registry.yarnpkg.com/normalize-path/-/normalize-path-2.1.1.tgz#1ab28b556e198363a8c1a6f7e6fa20137fe6aed9"
+  integrity sha1-GrKLVW4Zg2Oowab35vogE3/mrtk=
+  dependencies:
+    remove-trailing-separator "^1.0.1"
+
+normalize-path@^3.0.0:
+  version "3.0.0"
+  resolved "https://registry.yarnpkg.com/normalize-path/-/normalize-path-3.0.0.tgz#0dcd69ff23a1c9b11fd0978316644a0388216a65"
+  integrity sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==
+
+npm-run-path@^2.0.0:
+  version "2.0.2"
+  resolved "https://registry.yarnpkg.com/npm-run-path/-/npm-run-path-2.0.2.tgz#35a9232dfa35d7067b4cb2ddf2357b1871536c5f"
+  integrity sha1-NakjLfo11wZ7TLLd8jV7GHFTbF8=
+  dependencies:
+    path-key "^2.0.0"
+
+npm-run-path@^4.0.0:
+  version "4.0.1"
+  resolved "https://registry.yarnpkg.com/npm-run-path/-/npm-run-path-4.0.1.tgz#b7ecd1e5ed53da8e37a55e1c2269e0b97ed748ea"
+  integrity sha512-S48WzZW777zhNIrn7gxOlISNAqi9ZC/uQFnRdbeIHhZhCA6UqpkOT8T1G7BvfdgP4Er8gF4sUbaS0i7QvIfCWw==
+  dependencies:
+    path-key "^3.0.0"
+
+nwsapi@^2.2.0:
+  version "2.2.0"
+  resolved "https://registry.yarnpkg.com/nwsapi/-/nwsapi-2.2.0.tgz#204879a9e3d068ff2a55139c2c772780681a38b7"
+  integrity sha512-h2AatdwYH+JHiZpv7pt/gSX1XoRGb7L/qSIeuqA6GwYoF9w1vP1cw42TO0aI2pNyshRK5893hNSl+1//vHK7hQ==
+
+oauth-sign@~0.9.0:
+  version "0.9.0"
+  resolved "https://registry.yarnpkg.com/oauth-sign/-/oauth-sign-0.9.0.tgz#47a7b016baa68b5fa0ecf3dee08a85c679ac6455"
+  integrity sha512-fexhUFFPTGV8ybAtSIGbV6gOkSv8UtRbDBnAyLQw4QPKkgNlsH2ByPGtMUqdWkos6YCRmAqViwgZrJc/mRDzZQ==
+
+object-assign@^4.1.1:
+  version "4.1.1"
+  resolved "https://registry.yarnpkg.com/object-assign/-/object-assign-4.1.1.tgz#2109adc7965887cfc05cbbd442cac8bfbb360863"
+  integrity sha1-IQmtx5ZYh8/AXLvUQsrIv7s2CGM=
+
+object-copy@^0.1.0:
+  version "0.1.0"
+  resolved "https://registry.yarnpkg.com/object-copy/-/object-copy-0.1.0.tgz#7e7d858b781bd7c991a41ba975ed3812754e998c"
+  integrity sha1-fn2Fi3gb18mRpBupde04EnVOmYw=
+  dependencies:
+    copy-descriptor "^0.1.0"
+    define-property "^0.2.5"
+    kind-of "^3.0.3"
+
+object-visit@^1.0.0:
+  version "1.0.1"
+  resolved "https://registry.yarnpkg.com/object-visit/-/object-visit-1.0.1.tgz#f79c4493af0c5377b59fe39d395e41042dd045bb"
+  integrity sha1-95xEk68MU3e1n+OdOV5BBC3QRbs=
+  dependencies:
+    isobject "^3.0.0"
+
+object.pick@^1.3.0:
+  version "1.3.0"
+  resolved "https://registry.yarnpkg.com/object.pick/-/object.pick-1.3.0.tgz#87a10ac4c1694bd2e1cbf53591a66141fb5dd747"
+  integrity sha1-h6EKxMFpS9Lhy/U1kaZhQftd10c=
+  dependencies:
+    isobject "^3.0.1"
+
+once@^1.3.0, once@^1.3.1, once@^1.4.0:
+  version "1.4.0"
+  resolved "https://registry.yarnpkg.com/once/-/once-1.4.0.tgz#583b1aa775961d4b113ac17d9c50baef9dd76bd1"
+  integrity sha1-WDsap3WWHUsROsF9nFC6753Xa9E=
+  dependencies:
+    wrappy "1"
+
+onetime@^5.1.0:
+  version "5.1.2"
+  resolved "https://registry.yarnpkg.com/onetime/-/onetime-5.1.2.tgz#d0e96ebb56b07476df1dd9c4806e5237985ca45e"
+  integrity sha512-kbpaSSGJTWdAY5KPVeMOKXSrPtr8C8C7wodJbcsd51jRnmD+GZu8Y0VoU6Dm5Z4vWr0Ig/1NKuWRKf7j5aaYSg==
+  dependencies:
+    mimic-fn "^2.1.0"
+
+optimism@^0.14.0:
+  version "0.14.0"
+  resolved "https://registry.yarnpkg.com/optimism/-/optimism-0.14.0.tgz#256fb079a3428585b40a3a8462f907e0abd2fc49"
+  integrity sha512-ygbNt8n4DOCVpkwiLF+IrKKeNHOjtr9aXLWGP9HNJGoblSGsnVbJLstcH6/nE9Xy5ZQtlkSioFQNnthmENW6FQ==
+  dependencies:
+    "@wry/context" "^0.5.2"
+    "@wry/trie" "^0.2.1"
+
+optionator@^0.8.1:
+  version "0.8.3"
+  resolved "https://registry.yarnpkg.com/optionator/-/optionator-0.8.3.tgz#84fa1d036fe9d3c7e21d99884b601167ec8fb495"
+  integrity sha512-+IW9pACdk3XWmmTXG8m3upGUJst5XRGzxMRjXzAuJ1XnIFNvfhjjIuYkDvysnPQ7qzqVzLt78BCruntqRhWQbA==
+  dependencies:
+    deep-is "~0.1.3"
+    fast-levenshtein "~2.0.6"
+    levn "~0.3.0"
+    prelude-ls "~1.1.2"
+    type-check "~0.3.2"
+    word-wrap "~1.2.3"
+
+p-each-series@^2.1.0:
+  version "2.2.0"
+  resolved "https://registry.yarnpkg.com/p-each-series/-/p-each-series-2.2.0.tgz#105ab0357ce72b202a8a8b94933672657b5e2a9a"
+  integrity sha512-ycIL2+1V32th+8scbpTvyHNaHe02z0sjgh91XXjAk+ZeXoPN4Z46DVUnzdso0aX4KckKw0FNNFHdjZ2UsZvxiA==
+
+p-finally@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/p-finally/-/p-finally-1.0.0.tgz#3fbcfb15b899a44123b34b6dcc18b724336a2cae"
+  integrity sha1-P7z7FbiZpEEjs0ttzBi3JDNqLK4=
+
+p-limit@^2.2.0:
+  version "2.3.0"
+  resolved "https://registry.yarnpkg.com/p-limit/-/p-limit-2.3.0.tgz#3dd33c647a214fdfffd835933eb086da0dc21db1"
+  integrity sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==
+  dependencies:
+    p-try "^2.0.0"
+
+p-locate@^4.1.0:
+  version "4.1.0"
+  resolved "https://registry.yarnpkg.com/p-locate/-/p-locate-4.1.0.tgz#a3428bb7088b3a60292f66919278b7c297ad4f07"
+  integrity sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==
+  dependencies:
+    p-limit "^2.2.0"
+
+p-try@^2.0.0:
+  version "2.2.0"
+  resolved "https://registry.yarnpkg.com/p-try/-/p-try-2.2.0.tgz#cb2868540e313d61de58fafbe35ce9004d5540e6"
+  integrity sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ==
+
+parse-json@^5.0.0:
+  version "5.2.0"
+  resolved "https://registry.yarnpkg.com/parse-json/-/parse-json-5.2.0.tgz#c76fc66dee54231c962b22bcc8a72cf2f99753cd"
+  integrity sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==
+  dependencies:
+    "@babel/code-frame" "^7.0.0"
+    error-ex "^1.3.1"
+    json-parse-even-better-errors "^2.3.0"
+    lines-and-columns "^1.1.6"
+
+parse5@5.1.1:
+  version "5.1.1"
+  resolved "https://registry.yarnpkg.com/parse5/-/parse5-5.1.1.tgz#f68e4e5ba1852ac2cadc00f4555fff6c2abb6178"
+  integrity sha512-ugq4DFI0Ptb+WWjAdOK16+u/nHfiIrcE+sh8kZMaM0WllQKLI9rOUq6c2b7cwPkXdzfQESqvoqK6ug7U/Yyzug==
+
+pascalcase@^0.1.1:
+  version "0.1.1"
+  resolved "https://registry.yarnpkg.com/pascalcase/-/pascalcase-0.1.1.tgz#b363e55e8006ca6fe21784d2db22bd15d7917f14"
+  integrity sha1-s2PlXoAGym/iF4TS2yK9FdeRfxQ=
+
+path-exists@^4.0.0:
+  version "4.0.0"
+  resolved "https://registry.yarnpkg.com/path-exists/-/path-exists-4.0.0.tgz#513bdbe2d3b95d7762e8c1137efa195c6c61b5b3"
+  integrity sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==
+
+path-is-absolute@^1.0.0:
+  version "1.0.1"
+  resolved "https://registry.yarnpkg.com/path-is-absolute/-/path-is-absolute-1.0.1.tgz#174b9268735534ffbc7ace6bf53a5a9e1b5c5f5f"
+  integrity sha1-F0uSaHNVNP+8es5r9TpanhtcX18=
+
+path-key@^2.0.0, path-key@^2.0.1:
+  version "2.0.1"
+  resolved "https://registry.yarnpkg.com/path-key/-/path-key-2.0.1.tgz#411cadb574c5a140d3a4b1910d40d80cc9f40b40"
+  integrity sha1-QRyttXTFoUDTpLGRDUDYDMn0C0A=
+
+path-key@^3.0.0, path-key@^3.1.0:
+  version "3.1.1"
+  resolved "https://registry.yarnpkg.com/path-key/-/path-key-3.1.1.tgz#581f6ade658cbba65a0d3380de7753295054f375"
+  integrity sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==
+
+path-parse@^1.0.6:
+  version "1.0.6"
+  resolved "https://registry.yarnpkg.com/path-parse/-/path-parse-1.0.6.tgz#d62dbb5679405d72c4737ec58600e9ddcf06d24c"
+  integrity sha512-GSmOT2EbHrINBf9SR7CDELwlJ8AENk3Qn7OikK4nFYAu3Ote2+JYNVvkpAEQm3/TLNEJFD/xZJjzyxg3KBWOzw==
+
+performance-now@^2.1.0:
+  version "2.1.0"
+  resolved "https://registry.yarnpkg.com/performance-now/-/performance-now-2.1.0.tgz#6309f4e0e5fa913ec1c69307ae364b4b377c9e7b"
+  integrity sha1-Ywn04OX6kT7BxpMHrjZLSzd8nns=
+
+picomatch@^2.0.4, picomatch@^2.0.5:
+  version "2.2.2"
+  resolved "https://registry.yarnpkg.com/picomatch/-/picomatch-2.2.2.tgz#21f333e9b6b8eaff02468f5146ea406d345f4dad"
+  integrity sha512-q0M/9eZHzmr0AulXyPwNfZjtwZ/RBZlbN3K3CErVrk50T2ASYI7Bye0EvekFY3IP1Nt2DHu0re+V2ZHIpMkuWg==
+
+pirates@^4.0.1:
+  version "4.0.1"
+  resolved "https://registry.yarnpkg.com/pirates/-/pirates-4.0.1.tgz#643a92caf894566f91b2b986d2c66950a8e2fb87"
+  integrity sha512-WuNqLTbMI3tmfef2TKxlQmAiLHKtFhlsCZnPIpuv2Ow0RDVO8lfy1Opf4NUzlMXLjPl+Men7AuVdX6TA+s+uGA==
+  dependencies:
+    node-modules-regexp "^1.0.0"
+
+pkg-dir@^4.2.0:
+  version "4.2.0"
+  resolved "https://registry.yarnpkg.com/pkg-dir/-/pkg-dir-4.2.0.tgz#f099133df7ede422e81d1d8448270eeb3e4261f3"
+  integrity sha512-HRDzbaKjC+AOWVXxAU/x54COGeIv9eb+6CkDSQoNTt4XyWoIJvuPsXizxu/Fr23EiekbtZwmh1IcIG/l/a10GQ==
+  dependencies:
+    find-up "^4.0.0"
+
+posix-character-classes@^0.1.0:
+  version "0.1.1"
+  resolved "https://registry.yarnpkg.com/posix-character-classes/-/posix-character-classes-0.1.1.tgz#01eac0fe3b5af71a2a6c02feabb8c1fef7e00eab"
+  integrity sha1-AerA/jta9xoqbAL+q7jB/vfgDqs=
+
+prelude-ls@~1.1.2:
+  version "1.1.2"
+  resolved "https://registry.yarnpkg.com/prelude-ls/-/prelude-ls-1.1.2.tgz#21932a549f5e52ffd9a827f570e04be62a97da54"
+  integrity sha1-IZMqVJ9eUv/ZqCf1cOBL5iqX2lQ=
+
+pretty-format@^26.6.2:
+  version "26.6.2"
+  resolved "https://registry.yarnpkg.com/pretty-format/-/pretty-format-26.6.2.tgz#e35c2705f14cb7fe2fe94fa078345b444120fc93"
+  integrity sha512-7AeGuCYNGmycyQbCqd/3PWH4eOoX/OiCa0uphp57NVTeAGdJGaAliecxwBDHYQCIvrW7aDBZCYeNTP/WX69mkg==
+  dependencies:
+    "@jest/types" "^26.6.2"
+    ansi-regex "^5.0.0"
+    ansi-styles "^4.0.0"
+    react-is "^17.0.1"
+
+prompts@^2.0.1:
+  version "2.4.0"
+  resolved "https://registry.yarnpkg.com/prompts/-/prompts-2.4.0.tgz#4aa5de0723a231d1ee9121c40fdf663df73f61d7"
+  integrity sha512-awZAKrk3vN6CroQukBL+R9051a4R3zCZBlJm/HBfrSZ8iTpYix3VX1vU4mveiLpiwmOJT4wokTF9m6HUk4KqWQ==
+  dependencies:
+    kleur "^3.0.3"
+    sisteransi "^1.0.5"
+
+prop-types@^15.6.2, prop-types@^15.7.2:
+  version "15.7.2"
+  resolved "https://registry.yarnpkg.com/prop-types/-/prop-types-15.7.2.tgz#52c41e75b8c87e72b9d9360e0206b99dcbffa6c5"
+  integrity sha512-8QQikdH7//R2vurIJSutZ1smHYTcLpRWEOlHnzcWHmBYrOGUysKwSsrC89BCiFj3CbrfJ/nXFdJepOVrY1GCHQ==
+  dependencies:
+    loose-envify "^1.4.0"
+    object-assign "^4.1.1"
+    react-is "^16.8.1"
+
+psl@^1.1.28:
+  version "1.8.0"
+  resolved "https://registry.yarnpkg.com/psl/-/psl-1.8.0.tgz#9326f8bcfb013adcc005fdff056acce020e51c24"
+  integrity sha512-RIdOzyoavK+hA18OGGWDqUTsCLhtA7IcZ/6NCs4fFJaHBDab+pDDmDIByWFRQJq2Cd7r1OoQxBGKOaztq+hjIQ==
+
+pump@^3.0.0:
+  version "3.0.0"
+  resolved "https://registry.yarnpkg.com/pump/-/pump-3.0.0.tgz#b4a2116815bde2f4e1ea602354e8c75565107a64"
+  integrity sha512-LwZy+p3SFs1Pytd/jYct4wpv49HiYCqd9Rlc5ZVdk0V+8Yzv6jR5Blk3TRmPL1ft69TxP0IMZGJ+WPFU2BFhww==
+  dependencies:
+    end-of-stream "^1.1.0"
+    once "^1.3.1"
+
+punycode@^2.1.0, punycode@^2.1.1:
+  version "2.1.1"
+  resolved "https://registry.yarnpkg.com/punycode/-/punycode-2.1.1.tgz#b58b010ac40c22c5657616c8d2c2c02c7bf479ec"
+  integrity sha512-XRsRjdf+j5ml+y/6GKHPZbrF/8p2Yga0JPtdqTIY2Xe5ohJPD9saDJJLPvp9+NSBprVvevdXZybnj2cv8OEd0A==
+
+qs@~6.5.2:
+  version "6.5.2"
+  resolved "https://registry.yarnpkg.com/qs/-/qs-6.5.2.tgz#cb3ae806e8740444584ef154ce8ee98d403f3e36"
+  integrity sha512-N5ZAX4/LxJmF+7wN74pUD6qAh9/wnvdQcjq9TZjevvXzSUo7bfmw91saqMjzGS2xq91/odN2dW/WOl7qQHNDGA==
+
+react-dom@^16.13.1:
+  version "16.14.0"
+  resolved "https://registry.yarnpkg.com/react-dom/-/react-dom-16.14.0.tgz#7ad838ec29a777fb3c75c3a190f661cf92ab8b89"
+  integrity sha512-1gCeQXDLoIqMgqD3IO2Ah9bnf0w9kzhwN5q4FGnHZ67hBm9yePzB5JJAIQCc8x3pFnNlwFq4RidZggNAAkzWWw==
+  dependencies:
+    loose-envify "^1.1.0"
+    object-assign "^4.1.1"
+    prop-types "^15.6.2"
+    scheduler "^0.19.1"
+
+react-is@^16.7.0, react-is@^16.8.1:
+  version "16.13.1"
+  resolved "https://registry.yarnpkg.com/react-is/-/react-is-16.13.1.tgz#789729a4dc36de2999dc156dd6c1d9c18cea56a4"
+  integrity sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ==
+
+react-is@^17.0.1:
+  version "17.0.1"
+  resolved "https://registry.yarnpkg.com/react-is/-/react-is-17.0.1.tgz#5b3531bd76a645a4c9fb6e693ed36419e3301339"
+  integrity sha512-NAnt2iGDXohE5LI7uBnLnqvLQMtzhkiAOLXTmv+qnF9Ky7xAPcX8Up/xWIhxvLVGJvuLiNc4xQLtuqDRzb4fSA==
+
+react@^16.13.1:
+  version "16.14.0"
+  resolved "https://registry.yarnpkg.com/react/-/react-16.14.0.tgz#94d776ddd0aaa37da3eda8fc5b6b18a4c9a3114d"
+  integrity sha512-0X2CImDkJGApiAlcf0ODKIneSwBPhqJawOa5wCtKbu7ZECrmS26NvtSILynQ66cgkT/RJ4LidJOc3bUESwmU8g==
+  dependencies:
+    loose-envify "^1.1.0"
+    object-assign "^4.1.1"
+    prop-types "^15.6.2"
+
+read-pkg-up@^7.0.1:
+  version "7.0.1"
+  resolved "https://registry.yarnpkg.com/read-pkg-up/-/read-pkg-up-7.0.1.tgz#f3a6135758459733ae2b95638056e1854e7ef507"
+  integrity sha512-zK0TB7Xd6JpCLmlLmufqykGE+/TlOePD6qKClNW7hHDKFh/J7/7gCWGR7joEQEW1bKq3a3yUZSObOoWLFQ4ohg==
+  dependencies:
+    find-up "^4.1.0"
+    read-pkg "^5.2.0"
+    type-fest "^0.8.1"
+
+read-pkg@^5.2.0:
+  version "5.2.0"
+  resolved "https://registry.yarnpkg.com/read-pkg/-/read-pkg-5.2.0.tgz#7bf295438ca5a33e56cd30e053b34ee7250c93cc"
+  integrity sha512-Ug69mNOpfvKDAc2Q8DRpMjjzdtrnv9HcSMX+4VsZxD1aZ6ZzrIE7rlzXBtWTyhULSMKg076AW6WR5iZpD0JiOg==
+  dependencies:
+    "@types/normalize-package-data" "^2.4.0"
+    normalize-package-data "^2.5.0"
+    parse-json "^5.0.0"
+    type-fest "^0.6.0"
+
+regex-not@^1.0.0, regex-not@^1.0.2:
+  version "1.0.2"
+  resolved "https://registry.yarnpkg.com/regex-not/-/regex-not-1.0.2.tgz#1f4ece27e00b0b65e0247a6810e6a85d83a5752c"
+  integrity sha512-J6SDjUgDxQj5NusnOtdFxDwN/+HWykR8GELwctJ7mdqhcyy1xEc4SRFHUXvxTp661YaVKAjfRLZ9cCqS6tn32A==
+  dependencies:
+    extend-shallow "^3.0.2"
+    safe-regex "^1.1.0"
+
+remove-trailing-separator@^1.0.1:
+  version "1.1.0"
+  resolved "https://registry.yarnpkg.com/remove-trailing-separator/-/remove-trailing-separator-1.1.0.tgz#c24bce2a283adad5bc3f58e0d48249b92379d8ef"
+  integrity sha1-wkvOKig62tW8P1jg1IJJuSN52O8=
+
+repeat-element@^1.1.2:
+  version "1.1.3"
+  resolved "https://registry.yarnpkg.com/repeat-element/-/repeat-element-1.1.3.tgz#782e0d825c0c5a3bb39731f84efee6b742e6b1ce"
+  integrity sha512-ahGq0ZnV5m5XtZLMb+vP76kcAM5nkLqk0lpqAuojSKGgQtn4eRi4ZZGm2olo2zKFH+sMsWaqOCW1dqAnOru72g==
+
+repeat-string@^1.6.1:
+  version "1.6.1"
+  resolved "https://registry.yarnpkg.com/repeat-string/-/repeat-string-1.6.1.tgz#8dcae470e1c88abc2d600fff4a776286da75e637"
+  integrity sha1-jcrkcOHIirwtYA//Sndihtp15jc=
+
+request-promise-core@1.1.4:
+  version "1.1.4"
+  resolved "https://registry.yarnpkg.com/request-promise-core/-/request-promise-core-1.1.4.tgz#3eedd4223208d419867b78ce815167d10593a22f"
+  integrity sha512-TTbAfBBRdWD7aNNOoVOBH4pN/KigV6LyapYNNlAPA8JwbovRti1E88m3sYAwsLi5ryhPKsE9APwnjFTgdUjTpw==
+  dependencies:
+    lodash "^4.17.19"
+
+request-promise-native@^1.0.8:
+  version "1.0.9"
+  resolved "https://registry.yarnpkg.com/request-promise-native/-/request-promise-native-1.0.9.tgz#e407120526a5efdc9a39b28a5679bf47b9d9dc28"
+  integrity sha512-wcW+sIUiWnKgNY0dqCpOZkUbF/I+YPi+f09JZIDa39Ec+q82CpSYniDp+ISgTTbKmnpJWASeJBPZmoxH84wt3g==
+  dependencies:
+    request-promise-core "1.1.4"
+    stealthy-require "^1.1.1"
+    tough-cookie "^2.3.3"
+
+request@^2.88.2:
+  version "2.88.2"
+  resolved "https://registry.yarnpkg.com/request/-/request-2.88.2.tgz#d73c918731cb5a87da047e207234146f664d12b3"
+  integrity sha512-MsvtOrfG9ZcrOwAW+Qi+F6HbD0CWXEh9ou77uOb7FM2WPhwT7smM833PzanhJLsgXjN89Ir6V2PczXNnMpwKhw==
+  dependencies:
+    aws-sign2 "~0.7.0"
+    aws4 "^1.8.0"
+    caseless "~0.12.0"
+    combined-stream "~1.0.6"
+    extend "~3.0.2"
+    forever-agent "~0.6.1"
+    form-data "~2.3.2"
+    har-validator "~5.1.3"
+    http-signature "~1.2.0"
+    is-typedarray "~1.0.0"
+    isstream "~0.1.2"
+    json-stringify-safe "~5.0.1"
+    mime-types "~2.1.19"
+    oauth-sign "~0.9.0"
+    performance-now "^2.1.0"
+    qs "~6.5.2"
+    safe-buffer "^5.1.2"
+    tough-cookie "~2.5.0"
+    tunnel-agent "^0.6.0"
+    uuid "^3.3.2"
+
+require-directory@^2.1.1:
+  version "2.1.1"
+  resolved "https://registry.yarnpkg.com/require-directory/-/require-directory-2.1.1.tgz#8c64ad5fd30dab1c976e2344ffe7f792a6a6df42"
+  integrity sha1-jGStX9MNqxyXbiNE/+f3kqam30I=
+
+require-main-filename@^2.0.0:
+  version "2.0.0"
+  resolved "https://registry.yarnpkg.com/require-main-filename/-/require-main-filename-2.0.0.tgz#d0b329ecc7cc0f61649f62215be69af54aa8989b"
+  integrity sha512-NKN5kMDylKuldxYLSUfrbo5Tuzh4hd+2E8NPPX02mZtn1VuREQToYe/ZdlJy+J3uCpfaiGF05e7B8W0iXbQHmg==
+
+resolve-cwd@^3.0.0:
+  version "3.0.0"
+  resolved "https://registry.yarnpkg.com/resolve-cwd/-/resolve-cwd-3.0.0.tgz#0f0075f1bb2544766cf73ba6a6e2adfebcb13f2d"
+  integrity sha512-OrZaX2Mb+rJCpH/6CpSqt9xFVpN++x01XnN2ie9g6P5/3xelLAkXWVADpdz1IHD/KFfEXyE6V0U01OQ3UO2rEg==
+  dependencies:
+    resolve-from "^5.0.0"
+
+resolve-from@^5.0.0:
+  version "5.0.0"
+  resolved "https://registry.yarnpkg.com/resolve-from/-/resolve-from-5.0.0.tgz#c35225843df8f776df21c57557bc087e9dfdfc69"
+  integrity sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==
+
+resolve-url@^0.2.1:
+  version "0.2.1"
+  resolved "https://registry.yarnpkg.com/resolve-url/-/resolve-url-0.2.1.tgz#2c637fe77c893afd2a663fe21aa9080068e2052a"
+  integrity sha1-LGN/53yJOv0qZj/iGqkIAGjiBSo=
+
+resolve@^1.10.0, resolve@^1.18.1:
+  version "1.20.0"
+  resolved "https://registry.yarnpkg.com/resolve/-/resolve-1.20.0.tgz#629a013fb3f70755d6f0b7935cc1c2c5378b1975"
+  integrity sha512-wENBPt4ySzg4ybFQW2TT1zMQucPK95HSh/nq2CFTZVOGut2+pQvSsgtda4d26YrYcr067wjbmzOG8byDPBX63A==
+  dependencies:
+    is-core-module "^2.2.0"
+    path-parse "^1.0.6"
+
+ret@~0.1.10:
+  version "0.1.15"
+  resolved "https://registry.yarnpkg.com/ret/-/ret-0.1.15.tgz#b8a4825d5bdb1fc3f6f53c2bc33f81388681c7bc"
+  integrity sha512-TTlYpa+OL+vMMNG24xSlQGEJ3B/RzEfUlLct7b5G/ytav+wPrplCpVMFuwzXbkecJrb6IYo1iFb0S9v37754mg==
+
+rimraf@^3.0.0:
+  version "3.0.2"
+  resolved "https://registry.yarnpkg.com/rimraf/-/rimraf-3.0.2.tgz#f1a5402ba6220ad52cc1282bac1ae3aa49fd061a"
+  integrity sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==
+  dependencies:
+    glob "^7.1.3"
+
+rsvp@^4.8.4:
+  version "4.8.5"
+  resolved "https://registry.yarnpkg.com/rsvp/-/rsvp-4.8.5.tgz#c8f155311d167f68f21e168df71ec5b083113734"
+  integrity sha512-nfMOlASu9OnRJo1mbEk2cz0D56a1MBNrJ7orjRZQG10XDyuvwksKbuXNp6qa+kbn839HwjwhBzhFmdsaEAfauA==
+
+safe-buffer@^5.0.1, safe-buffer@^5.1.2:
+  version "5.2.1"
+  resolved "https://registry.yarnpkg.com/safe-buffer/-/safe-buffer-5.2.1.tgz#1eaf9fa9bdb1fdd4ec75f58f9cdb4e6b7827eec6"
+  integrity sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==
+
+safe-buffer@~5.1.1:
+  version "5.1.2"
+  resolved "https://registry.yarnpkg.com/safe-buffer/-/safe-buffer-5.1.2.tgz#991ec69d296e0313747d59bdfd2b745c35f8828d"
+  integrity sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==
+
+safe-regex@^1.1.0:
+  version "1.1.0"
+  resolved "https://registry.yarnpkg.com/safe-regex/-/safe-regex-1.1.0.tgz#40a3669f3b077d1e943d44629e157dd48023bf2e"
+  integrity sha1-QKNmnzsHfR6UPURinhV91IAjvy4=
+  dependencies:
+    ret "~0.1.10"
+
+"safer-buffer@>= 2.1.2 < 3", safer-buffer@^2.0.2, safer-buffer@^2.1.0, safer-buffer@~2.1.0:
+  version "2.1.2"
+  resolved "https://registry.yarnpkg.com/safer-buffer/-/safer-buffer-2.1.2.tgz#44fa161b0187b9549dd84bb91802f9bd8385cd6a"
+  integrity sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==
+
+sane@^4.0.3:
+  version "4.1.0"
+  resolved "https://registry.yarnpkg.com/sane/-/sane-4.1.0.tgz#ed881fd922733a6c461bc189dc2b6c006f3ffded"
+  integrity sha512-hhbzAgTIX8O7SHfp2c8/kREfEn4qO/9q8C9beyY6+tvZ87EpoZ3i1RIEvp27YBswnNbY9mWd6paKVmKbAgLfZA==
+  dependencies:
+    "@cnakazawa/watch" "^1.0.3"
+    anymatch "^2.0.0"
+    capture-exit "^2.0.0"
+    exec-sh "^0.3.2"
+    execa "^1.0.0"
+    fb-watchman "^2.0.0"
+    micromatch "^3.1.4"
+    minimist "^1.1.1"
+    walker "~1.0.5"
+
+saxes@^5.0.0:
+  version "5.0.1"
+  resolved "https://registry.yarnpkg.com/saxes/-/saxes-5.0.1.tgz#eebab953fa3b7608dbe94e5dadb15c888fa6696d"
+  integrity sha512-5LBh1Tls8c9xgGjw3QrMwETmTMVk0oFgvrFSvWx62llR2hcEInrKNZ2GZCCuuy2lvWrdl5jhbpeqc5hRYKFOcw==
+  dependencies:
+    xmlchars "^2.2.0"
+
+scheduler@^0.19.1:
+  version "0.19.1"
+  resolved "https://registry.yarnpkg.com/scheduler/-/scheduler-0.19.1.tgz#4f3e2ed2c1a7d65681f4c854fa8c5a1ccb40f196"
+  integrity sha512-n/zwRWRYSUj0/3g/otKDRPMh6qv2SYMWNq85IEa8iZyAv8od9zDYpGSnpBEjNgcMNq6Scbu5KfIPxNF72R/2EA==
+  dependencies:
+    loose-envify "^1.1.0"
+    object-assign "^4.1.1"
+
+"semver@2 || 3 || 4 || 5", semver@^5.4.1, semver@^5.5.0:
+  version "5.7.1"
+  resolved "https://registry.yarnpkg.com/semver/-/semver-5.7.1.tgz#a954f931aeba508d307bbf069eff0c01c96116f7"
+  integrity sha512-sauaDf/PZdVgrLTNYHRtpXa1iRiKcaebiKQ1BJdpQlWH2lCvexQdX55snPFyK7QzpudqbCI0qXFfOasHdyNDGQ==
+
+semver@^6.0.0, semver@^6.3.0:
+  version "6.3.0"
+  resolved "https://registry.yarnpkg.com/semver/-/semver-6.3.0.tgz#ee0a64c8af5e8ceea67687b133761e1becbd1d3d"
+  integrity sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw==
+
+semver@^7.3.2:
+  version "7.3.4"
+  resolved "https://registry.yarnpkg.com/semver/-/semver-7.3.4.tgz#27aaa7d2e4ca76452f98d3add093a72c943edc97"
+  integrity sha512-tCfb2WLjqFAtXn4KEdxIhalnRtoKFN7nAwj0B3ZXCbQloV2tq5eDbcTmT68JJD3nRJq24/XgxtQKFIpQdtvmVw==
+  dependencies:
+    lru-cache "^6.0.0"
+
+set-blocking@^2.0.0:
+  version "2.0.0"
+  resolved "https://registry.yarnpkg.com/set-blocking/-/set-blocking-2.0.0.tgz#045f9782d011ae9a6803ddd382b24392b3d890f7"
+  integrity sha1-BF+XgtARrppoA93TgrJDkrPYkPc=
+
+set-value@^2.0.0, set-value@^2.0.1:
+  version "2.0.1"
+  resolved "https://registry.yarnpkg.com/set-value/-/set-value-2.0.1.tgz#a18d40530e6f07de4228c7defe4227af8cad005b"
+  integrity sha512-JxHc1weCN68wRY0fhCoXpyK55m/XPHafOmK4UWD7m2CI14GMcFypt4w/0+NV5f/ZMby2F6S2wwA7fgynh9gWSw==
+  dependencies:
+    extend-shallow "^2.0.1"
+    is-extendable "^0.1.1"
+    is-plain-object "^2.0.3"
+    split-string "^3.0.1"
+
+shebang-command@^1.2.0:
+  version "1.2.0"
+  resolved "https://registry.yarnpkg.com/shebang-command/-/shebang-command-1.2.0.tgz#44aac65b695b03398968c39f363fee5deafdf1ea"
+  integrity sha1-RKrGW2lbAzmJaMOfNj/uXer98eo=
+  dependencies:
+    shebang-regex "^1.0.0"
+
+shebang-command@^2.0.0:
+  version "2.0.0"
+  resolved "https://registry.yarnpkg.com/shebang-command/-/shebang-command-2.0.0.tgz#ccd0af4f8835fbdc265b82461aaf0c36663f34ea"
+  integrity sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==
+  dependencies:
+    shebang-regex "^3.0.0"
+
+shebang-regex@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/shebang-regex/-/shebang-regex-1.0.0.tgz#da42f49740c0b42db2ca9728571cb190c98efea3"
+  integrity sha1-2kL0l0DAtC2yypcoVxyxkMmO/qM=
+
+shebang-regex@^3.0.0:
+  version "3.0.0"
+  resolved "https://registry.yarnpkg.com/shebang-regex/-/shebang-regex-3.0.0.tgz#ae16f1644d873ecad843b0307b143362d4c42172"
+  integrity sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==
+
+shellwords@^0.1.1:
+  version "0.1.1"
+  resolved "https://registry.yarnpkg.com/shellwords/-/shellwords-0.1.1.tgz#d6b9181c1a48d397324c84871efbcfc73fc0654b"
+  integrity sha512-vFwSUfQvqybiICwZY5+DAWIPLKsWO31Q91JSKl3UYv+K5c2QRPzn0qzec6QPu1Qc9eHYItiP3NdJqNVqetYAww==
+
+signal-exit@^3.0.0, signal-exit@^3.0.2:
+  version "3.0.3"
+  resolved "https://registry.yarnpkg.com/signal-exit/-/signal-exit-3.0.3.tgz#a1410c2edd8f077b08b4e253c8eacfcaf057461c"
+  integrity sha512-VUJ49FC8U1OxwZLxIbTTrDvLnf/6TDgxZcK8wxR8zs13xpx7xbG60ndBlhNrFi2EMuFRoeDoJO7wthSLq42EjA==
+
+sisteransi@^1.0.5:
+  version "1.0.5"
+  resolved "https://registry.yarnpkg.com/sisteransi/-/sisteransi-1.0.5.tgz#134d681297756437cc05ca01370d3a7a571075ed"
+  integrity sha512-bLGGlR1QxBcynn2d5YmDX4MGjlZvy2MRBDRNHLJ8VI6l6+9FUiyTFNJ0IveOSP0bcXgVDPRcfGqA0pjaqUpfVg==
+
+slash@^3.0.0:
+  version "3.0.0"
+  resolved "https://registry.yarnpkg.com/slash/-/slash-3.0.0.tgz#6539be870c165adbd5240220dbe361f1bc4d4634"
+  integrity sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==
+
+snapdragon-node@^2.0.1:
+  version "2.1.1"
+  resolved "https://registry.yarnpkg.com/snapdragon-node/-/snapdragon-node-2.1.1.tgz#6c175f86ff14bdb0724563e8f3c1b021a286853b"
+  integrity sha512-O27l4xaMYt/RSQ5TR3vpWCAB5Kb/czIcqUFOM/C4fYcLnbZUc1PkjTAMjof2pBWaSTwOUd6qUHcFGVGj7aIwnw==
+  dependencies:
+    define-property "^1.0.0"
+    isobject "^3.0.0"
+    snapdragon-util "^3.0.1"
+
+snapdragon-util@^3.0.1:
+  version "3.0.1"
+  resolved "https://registry.yarnpkg.com/snapdragon-util/-/snapdragon-util-3.0.1.tgz#f956479486f2acd79700693f6f7b805e45ab56e2"
+  integrity sha512-mbKkMdQKsjX4BAL4bRYTj21edOf8cN7XHdYUJEe+Zn99hVEYcMvKPct1IqNe7+AZPirn8BCDOQBHQZknqmKlZQ==
+  dependencies:
+    kind-of "^3.2.0"
+
+snapdragon@^0.8.1:
+  version "0.8.2"
+  resolved "https://registry.yarnpkg.com/snapdragon/-/snapdragon-0.8.2.tgz#64922e7c565b0e14204ba1aa7d6964278d25182d"
+  integrity sha512-FtyOnWN/wCHTVXOMwvSv26d+ko5vWlIDD6zoUJ7LW8vh+ZBC8QdljveRP+crNrtBwioEUWy/4dMtbBjA4ioNlg==
+  dependencies:
+    base "^0.11.1"
+    debug "^2.2.0"
+    define-property "^0.2.5"
+    extend-shallow "^2.0.1"
+    map-cache "^0.2.2"
+    source-map "^0.5.6"
+    source-map-resolve "^0.5.0"
+    use "^3.1.0"
+
+source-map-resolve@^0.5.0:
+  version "0.5.3"
+  resolved "https://registry.yarnpkg.com/source-map-resolve/-/source-map-resolve-0.5.3.tgz#190866bece7553e1f8f267a2ee82c606b5509a1a"
+  integrity sha512-Htz+RnsXWk5+P2slx5Jh3Q66vhQj1Cllm0zvnaY98+NFx+Dv2CF/f5O/t8x+KaNdrdIAsruNzoh/KpialbqAnw==
+  dependencies:
+    atob "^2.1.2"
+    decode-uri-component "^0.2.0"
+    resolve-url "^0.2.1"
+    source-map-url "^0.4.0"
+    urix "^0.1.0"
+
+source-map-support@^0.5.6:
+  version "0.5.19"
+  resolved "https://registry.yarnpkg.com/source-map-support/-/source-map-support-0.5.19.tgz#a98b62f86dcaf4f67399648c085291ab9e8fed61"
+  integrity sha512-Wonm7zOCIJzBGQdB+thsPar0kYuCIzYvxZwlBa87yi/Mdjv7Tip2cyVbLj5o0cFPN4EVkuTwb3GDDyUx2DGnGw==
+  dependencies:
+    buffer-from "^1.0.0"
+    source-map "^0.6.0"
+
+source-map-url@^0.4.0:
+  version "0.4.1"
+  resolved "https://registry.yarnpkg.com/source-map-url/-/source-map-url-0.4.1.tgz#0af66605a745a5a2f91cf1bbf8a7afbc283dec56"
+  integrity sha512-cPiFOTLUKvJFIg4SKVScy4ilPPW6rFgMgfuZJPNoDuMs3nC1HbMUycBoJw77xFIp6z1UJQJOfx6C9GMH80DiTw==
+
+source-map@^0.5.0, source-map@^0.5.6:
+  version "0.5.7"
+  resolved "https://registry.yarnpkg.com/source-map/-/source-map-0.5.7.tgz#8a039d2d1021d22d1ea14c80d8ea468ba2ef3fcc"
+  integrity sha1-igOdLRAh0i0eoUyA2OpGi6LvP8w=
+
+source-map@^0.6.0, source-map@^0.6.1, source-map@~0.6.1:
+  version "0.6.1"
+  resolved "https://registry.yarnpkg.com/source-map/-/source-map-0.6.1.tgz#74722af32e9614e9c287a8d0bbde48b5e2f1a263"
+  integrity sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==
+
+source-map@^0.7.3:
+  version "0.7.3"
+  resolved "https://registry.yarnpkg.com/source-map/-/source-map-0.7.3.tgz#5302f8169031735226544092e64981f751750383"
+  integrity sha512-CkCj6giN3S+n9qrYiBTX5gystlENnRW5jZeNLHpe6aue+SrHcG5VYwujhW9s4dY31mEGsxBDrHR6oI69fTXsaQ==
+
+spdx-correct@^3.0.0:
+  version "3.1.1"
+  resolved "https://registry.yarnpkg.com/spdx-correct/-/spdx-correct-3.1.1.tgz#dece81ac9c1e6713e5f7d1b6f17d468fa53d89a9"
+  integrity sha512-cOYcUWwhCuHCXi49RhFRCyJEK3iPj1Ziz9DpViV3tbZOwXD49QzIN3MpOLJNxh2qwq2lJJZaKMVw9qNi4jTC0w==
+  dependencies:
+    spdx-expression-parse "^3.0.0"
+    spdx-license-ids "^3.0.0"
+
+spdx-exceptions@^2.1.0:
+  version "2.3.0"
+  resolved "https://registry.yarnpkg.com/spdx-exceptions/-/spdx-exceptions-2.3.0.tgz#3f28ce1a77a00372683eade4a433183527a2163d"
+  integrity sha512-/tTrYOC7PPI1nUAgx34hUpqXuyJG+DTHJTnIULG4rDygi4xu/tfgmq1e1cIRwRzwZgo4NLySi+ricLkZkw4i5A==
+
+spdx-expression-parse@^3.0.0:
+  version "3.0.1"
+  resolved "https://registry.yarnpkg.com/spdx-expression-parse/-/spdx-expression-parse-3.0.1.tgz#cf70f50482eefdc98e3ce0a6833e4a53ceeba679"
+  integrity sha512-cbqHunsQWnJNE6KhVSMsMeH5H/L9EpymbzqTQ3uLwNCLZ1Q481oWaofqH7nO6V07xlXwY6PhQdQ2IedWx/ZK4Q==
+  dependencies:
+    spdx-exceptions "^2.1.0"
+    spdx-license-ids "^3.0.0"
+
+spdx-license-ids@^3.0.0:
+  version "3.0.7"
+  resolved "https://registry.yarnpkg.com/spdx-license-ids/-/spdx-license-ids-3.0.7.tgz#e9c18a410e5ed7e12442a549fbd8afa767038d65"
+  integrity sha512-U+MTEOO0AiDzxwFvoa4JVnMV6mZlJKk2sBLt90s7G0Gd0Mlknc7kxEn3nuDPNZRta7O2uy8oLcZLVT+4sqNZHQ==
+
+split-string@^3.0.1, split-string@^3.0.2:
+  version "3.1.0"
+  resolved "https://registry.yarnpkg.com/split-string/-/split-string-3.1.0.tgz#7cb09dda3a86585705c64b39a6466038682e8fe2"
+  integrity sha512-NzNVhJDYpwceVVii8/Hu6DKfD2G+NrQHlS/V/qgv763EYudVwEcMQNxd2lh+0VrUByXN/oJkl5grOhYWvQUYiw==
+  dependencies:
+    extend-shallow "^3.0.0"
+
+sprintf-js@~1.0.2:
+  version "1.0.3"
+  resolved "https://registry.yarnpkg.com/sprintf-js/-/sprintf-js-1.0.3.tgz#04e6926f662895354f3dd015203633b857297e2c"
+  integrity sha1-BOaSb2YolTVPPdAVIDYzuFcpfiw=
+
+sshpk@^1.7.0:
+  version "1.16.1"
+  resolved "https://registry.yarnpkg.com/sshpk/-/sshpk-1.16.1.tgz#fb661c0bef29b39db40769ee39fa70093d6f6877"
+  integrity sha512-HXXqVUq7+pcKeLqqZj6mHFUMvXtOJt1uoUx09pFW6011inTMxqI8BA8PM95myrIyyKwdnzjdFjLiE6KBPVtJIg==
+  dependencies:
+    asn1 "~0.2.3"
+    assert-plus "^1.0.0"
+    bcrypt-pbkdf "^1.0.0"
+    dashdash "^1.12.0"
+    ecc-jsbn "~0.1.1"
+    getpass "^0.1.1"
+    jsbn "~0.1.0"
+    safer-buffer "^2.0.2"
+    tweetnacl "~0.14.0"
+
+stack-utils@^2.0.2:
+  version "2.0.3"
+  resolved "https://registry.yarnpkg.com/stack-utils/-/stack-utils-2.0.3.tgz#cd5f030126ff116b78ccb3c027fe302713b61277"
+  integrity sha512-gL//fkxfWUsIlFL2Tl42Cl6+HFALEaB1FU76I/Fy+oZjRreP7OPMXFlGbxM7NQsI0ZpUfw76sHnv0WNYuTb7Iw==
+  dependencies:
+    escape-string-regexp "^2.0.0"
+
+static-extend@^0.1.1:
+  version "0.1.2"
+  resolved "https://registry.yarnpkg.com/static-extend/-/static-extend-0.1.2.tgz#60809c39cbff55337226fd5e0b520f341f1fb5c6"
+  integrity sha1-YICcOcv/VTNyJv1eC1IPNB8ftcY=
+  dependencies:
+    define-property "^0.2.5"
+    object-copy "^0.1.0"
+
+stealthy-require@^1.1.1:
+  version "1.1.1"
+  resolved "https://registry.yarnpkg.com/stealthy-require/-/stealthy-require-1.1.1.tgz#35b09875b4ff49f26a777e509b3090a3226bf24b"
+  integrity sha1-NbCYdbT/SfJqd35QmzCQoyJr8ks=
+
+string-length@^4.0.1:
+  version "4.0.1"
+  resolved "https://registry.yarnpkg.com/string-length/-/string-length-4.0.1.tgz#4a973bf31ef77c4edbceadd6af2611996985f8a1"
+  integrity sha512-PKyXUd0LK0ePjSOnWn34V2uD6acUWev9uy0Ft05k0E8xRW+SKcA0F7eMr7h5xlzfn+4O3N+55rduYyet3Jk+jw==
+  dependencies:
+    char-regex "^1.0.2"
+    strip-ansi "^6.0.0"
+
+string-width@^4.1.0, string-width@^4.2.0:
+  version "4.2.0"
+  resolved "https://registry.yarnpkg.com/string-width/-/string-width-4.2.0.tgz#952182c46cc7b2c313d1596e623992bd163b72b5"
+  integrity sha512-zUz5JD+tgqtuDjMhwIg5uFVV3dtqZ9yQJlZVfq4I01/K5Paj5UHj7VyrQOJvzawSVlKpObApbfD0Ed6yJc+1eg==
+  dependencies:
+    emoji-regex "^8.0.0"
+    is-fullwidth-code-point "^3.0.0"
+    strip-ansi "^6.0.0"
+
+strip-ansi@^6.0.0:
+  version "6.0.0"
+  resolved "https://registry.yarnpkg.com/strip-ansi/-/strip-ansi-6.0.0.tgz#0b1571dd7669ccd4f3e06e14ef1eed26225ae532"
+  integrity sha512-AuvKTrTfQNYNIctbR1K/YGTR1756GycPsg7b9bdV9Duqur4gv6aKqHXah67Z8ImS7WEz5QVcOtlfW2rZEugt6w==
+  dependencies:
+    ansi-regex "^5.0.0"
+
+strip-bom@^4.0.0:
+  version "4.0.0"
+  resolved "https://registry.yarnpkg.com/strip-bom/-/strip-bom-4.0.0.tgz#9c3505c1db45bcedca3d9cf7a16f5c5aa3901878"
+  integrity sha512-3xurFv5tEgii33Zi8Jtp55wEIILR9eh34FAW00PZf+JnSsTmV/ioewSgQl97JHvgjoRGwPShsWm+IdrxB35d0w==
+
+strip-eof@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/strip-eof/-/strip-eof-1.0.0.tgz#bb43ff5598a6eb05d89b59fcd129c983313606bf"
+  integrity sha1-u0P/VZim6wXYm1n80SnJgzE2Br8=
+
+strip-final-newline@^2.0.0:
+  version "2.0.0"
+  resolved "https://registry.yarnpkg.com/strip-final-newline/-/strip-final-newline-2.0.0.tgz#89b852fb2fcbe936f6f4b3187afb0a12c1ab58ad"
+  integrity sha512-BrpvfNAE3dcvq7ll3xVumzjKjZQ5tI1sEUIKr3Uoks0XUl45St3FlatVqef9prk4jRDzhW6WZg+3bk93y6pLjA==
+
+subscriptions-transport-ws@^0.9.17:
+  version "0.9.18"
+  resolved "https://registry.yarnpkg.com/subscriptions-transport-ws/-/subscriptions-transport-ws-0.9.18.tgz#bcf02320c911fbadb054f7f928e51c6041a37b97"
+  integrity sha512-tztzcBTNoEbuErsVQpTN2xUNN/efAZXyCyL5m3x4t6SKrEiTL2N8SaKWBFWM4u56pL79ULif3zjyeq+oV+nOaA==
+  dependencies:
+    backo2 "^1.0.2"
+    eventemitter3 "^3.1.0"
+    iterall "^1.2.1"
+    symbol-observable "^1.0.4"
+    ws "^5.2.0"
+
+supports-color@^5.3.0:
+  version "5.5.0"
+  resolved "https://registry.yarnpkg.com/supports-color/-/supports-color-5.5.0.tgz#e2e69a44ac8772f78a1ec0b35b689df6530efc8f"
+  integrity sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==
+  dependencies:
+    has-flag "^3.0.0"
+
+supports-color@^7.0.0, supports-color@^7.1.0:
+  version "7.2.0"
+  resolved "https://registry.yarnpkg.com/supports-color/-/supports-color-7.2.0.tgz#1b7dcdcb32b8138801b3e478ba6a51caa89648da"
+  integrity sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==
+  dependencies:
+    has-flag "^4.0.0"
+
+supports-hyperlinks@^2.0.0:
+  version "2.1.0"
+  resolved "https://registry.yarnpkg.com/supports-hyperlinks/-/supports-hyperlinks-2.1.0.tgz#f663df252af5f37c5d49bbd7eeefa9e0b9e59e47"
+  integrity sha512-zoE5/e+dnEijk6ASB6/qrK+oYdm2do1hjoLWrqUC/8WEIW1gbxFcKuBof7sW8ArN6e+AYvsE8HBGiVRWL/F5CA==
+  dependencies:
+    has-flag "^4.0.0"
+    supports-color "^7.0.0"
+
+symbol-observable@^1.0.4:
+  version "1.2.0"
+  resolved "https://registry.yarnpkg.com/symbol-observable/-/symbol-observable-1.2.0.tgz#c22688aed4eab3cdc2dfeacbb561660560a00804"
+  integrity sha512-e900nM8RRtGhlV36KGEU9k65K3mPb1WV70OdjfxlG2EAuM1noi/E/BaW/uMhL7bPEssK8QV57vN3esixjUvcXQ==
+
+symbol-observable@^2.0.0:
+  version "2.0.3"
+  resolved "https://registry.yarnpkg.com/symbol-observable/-/symbol-observable-2.0.3.tgz#5b521d3d07a43c351055fa43b8355b62d33fd16a"
+  integrity sha512-sQV7phh2WCYAn81oAkakC5qjq2Ml0g8ozqz03wOGnx9dDlG1de6yrF+0RAzSJD8fPUow3PTSMf2SAbOGxb93BA==
+
+symbol-tree@^3.2.4:
+  version "3.2.4"
+  resolved "https://registry.yarnpkg.com/symbol-tree/-/symbol-tree-3.2.4.tgz#430637d248ba77e078883951fb9aa0eed7c63fa2"
+  integrity sha512-9QNk5KwDF+Bvz+PyObkmSYjI5ksVUYtjW7AU22r2NKcfLJcXp96hkDWU3+XndOsUb+AQ9QhfzfCT2O+CNWT5Tw==
+
+terminal-link@^2.0.0:
+  version "2.1.1"
+  resolved "https://registry.yarnpkg.com/terminal-link/-/terminal-link-2.1.1.tgz#14a64a27ab3c0df933ea546fba55f2d078edc994"
+  integrity sha512-un0FmiRUQNr5PJqy9kP7c40F5BOfpGlYTrxonDChEZB7pzZxRNp/bt+ymiy9/npwXya9KH99nJ/GXFIiUkYGFQ==
+  dependencies:
+    ansi-escapes "^4.2.1"
+    supports-hyperlinks "^2.0.0"
+
+test-exclude@^6.0.0:
+  version "6.0.0"
+  resolved "https://registry.yarnpkg.com/test-exclude/-/test-exclude-6.0.0.tgz#04a8698661d805ea6fa293b6cb9e63ac044ef15e"
+  integrity sha512-cAGWPIyOHU6zlmg88jwm7VRyXnMN7iV68OGAbYDk/Mh/xC/pzVPlQtY6ngoIH/5/tciuhGfvESU8GrHrcxD56w==
+  dependencies:
+    "@istanbuljs/schema" "^0.1.2"
+    glob "^7.1.4"
+    minimatch "^3.0.4"
+
+throat@^5.0.0:
+  version "5.0.0"
+  resolved "https://registry.yarnpkg.com/throat/-/throat-5.0.0.tgz#c5199235803aad18754a667d659b5e72ce16764b"
+  integrity sha512-fcwX4mndzpLQKBS1DVYhGAcYaYt7vsHNIvQV+WXMvnow5cgjPphq5CaayLaGsjRdSCKZFNGt7/GYAuXaNOiYCA==
+
+tmpl@1.0.x:
+  version "1.0.4"
+  resolved "https://registry.yarnpkg.com/tmpl/-/tmpl-1.0.4.tgz#23640dd7b42d00433911140820e5cf440e521dd1"
+  integrity sha1-I2QN17QtAEM5ERQIIOXPRA5SHdE=
+
+to-fast-properties@^2.0.0:
+  version "2.0.0"
+  resolved "https://registry.yarnpkg.com/to-fast-properties/-/to-fast-properties-2.0.0.tgz#dc5e698cbd079265bc73e0377681a4e4e83f616e"
+  integrity sha1-3F5pjL0HkmW8c+A3doGk5Og/YW4=
+
+to-object-path@^0.3.0:
+  version "0.3.0"
+  resolved "https://registry.yarnpkg.com/to-object-path/-/to-object-path-0.3.0.tgz#297588b7b0e7e0ac08e04e672f85c1f4999e17af"
+  integrity sha1-KXWIt7Dn4KwI4E5nL4XB9JmeF68=
+  dependencies:
+    kind-of "^3.0.2"
+
+to-regex-range@^2.1.0:
+  version "2.1.1"
+  resolved "https://registry.yarnpkg.com/to-regex-range/-/to-regex-range-2.1.1.tgz#7c80c17b9dfebe599e27367e0d4dd5590141db38"
+  integrity sha1-fIDBe53+vlmeJzZ+DU3VWQFB2zg=
+  dependencies:
+    is-number "^3.0.0"
+    repeat-string "^1.6.1"
+
+to-regex-range@^5.0.1:
+  version "5.0.1"
+  resolved "https://registry.yarnpkg.com/to-regex-range/-/to-regex-range-5.0.1.tgz#1648c44aae7c8d988a326018ed72f5b4dd0392e4"
+  integrity sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==
+  dependencies:
+    is-number "^7.0.0"
+
+to-regex@^3.0.1, to-regex@^3.0.2:
+  version "3.0.2"
+  resolved "https://registry.yarnpkg.com/to-regex/-/to-regex-3.0.2.tgz#13cfdd9b336552f30b51f33a8ae1b42a7a7599ce"
+  integrity sha512-FWtleNAtZ/Ki2qtqej2CXTOayOH9bHDQF+Q48VpWyDXjbYxA4Yz8iDB31zXOBUlOHHKidDbqGVrTUvQMPmBGBw==
+  dependencies:
+    define-property "^2.0.2"
+    extend-shallow "^3.0.2"
+    regex-not "^1.0.2"
+    safe-regex "^1.1.0"
+
+tough-cookie@^2.3.3, tough-cookie@~2.5.0:
+  version "2.5.0"
+  resolved "https://registry.yarnpkg.com/tough-cookie/-/tough-cookie-2.5.0.tgz#cd9fb2a0aa1d5a12b473bd9fb96fa3dcff65ade2"
+  integrity sha512-nlLsUzgm1kfLXSXfRZMc1KLAugd4hqJHDTvc2hDIwS3mZAfMEuMbc03SujMF+GEcpaX/qboeycw6iO8JwVv2+g==
+  dependencies:
+    psl "^1.1.28"
+    punycode "^2.1.1"
+
+tough-cookie@^3.0.1:
+  version "3.0.1"
+  resolved "https://registry.yarnpkg.com/tough-cookie/-/tough-cookie-3.0.1.tgz#9df4f57e739c26930a018184887f4adb7dca73b2"
+  integrity sha512-yQyJ0u4pZsv9D4clxO69OEjLWYw+jbgspjTue4lTQZLfV0c5l1VmK2y1JK8E9ahdpltPOaAThPcp5nKPUgSnsg==
+  dependencies:
+    ip-regex "^2.1.0"
+    psl "^1.1.28"
+    punycode "^2.1.1"
+
+tr46@^2.0.2:
+  version "2.0.2"
+  resolved "https://registry.yarnpkg.com/tr46/-/tr46-2.0.2.tgz#03273586def1595ae08fedb38d7733cee91d2479"
+  integrity sha512-3n1qG+/5kg+jrbTzwAykB5yRYtQCTqOGKq5U5PE3b0a1/mzo6snDhjGS0zJVJunO0NrT3Dg1MLy5TjWP/UJppg==
+  dependencies:
+    punycode "^2.1.1"
+
+ts-invariant@^0.6.0:
+  version "0.6.0"
+  resolved "https://registry.yarnpkg.com/ts-invariant/-/ts-invariant-0.6.0.tgz#44066ecfeb7a806ff1c3b0b283408a337a885412"
+  integrity sha512-caoafsfgb8QxdrKzFfjKt627m4i8KTtfAiji0DYJfWI4A/S9ORNNpzYuD9br64kyKFgxn9UNaLLbSupam84mCA==
+  dependencies:
+    "@types/ungap__global-this" "^0.3.1"
+    "@ungap/global-this" "^0.4.2"
+    tslib "^1.9.3"
+
+tslib@^1.10.0, tslib@^1.14.1, tslib@^1.9.3:
+  version "1.14.1"
+  resolved "https://registry.yarnpkg.com/tslib/-/tslib-1.14.1.tgz#cf2d38bdc34a134bcaf1091c41f6619e2f672d00"
+  integrity sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg==
+
+tunnel-agent@^0.6.0:
+  version "0.6.0"
+  resolved "https://registry.yarnpkg.com/tunnel-agent/-/tunnel-agent-0.6.0.tgz#27a5dea06b36b04a0a9966774b290868f0fc40fd"
+  integrity sha1-J6XeoGs2sEoKmWZ3SykIaPD8QP0=
+  dependencies:
+    safe-buffer "^5.0.1"
+
+tweetnacl@^0.14.3, tweetnacl@~0.14.0:
+  version "0.14.5"
+  resolved "https://registry.yarnpkg.com/tweetnacl/-/tweetnacl-0.14.5.tgz#5ae68177f192d4456269d108afa93ff8743f4f64"
+  integrity sha1-WuaBd/GS1EViadEIr6k/+HQ/T2Q=
+
+type-check@~0.3.2:
+  version "0.3.2"
+  resolved "https://registry.yarnpkg.com/type-check/-/type-check-0.3.2.tgz#5884cab512cf1d355e3fb784f30804b2b520db72"
+  integrity sha1-WITKtRLPHTVeP7eE8wgEsrUg23I=
+  dependencies:
+    prelude-ls "~1.1.2"
+
+type-detect@4.0.8:
+  version "4.0.8"
+  resolved "https://registry.yarnpkg.com/type-detect/-/type-detect-4.0.8.tgz#7646fb5f18871cfbb7749e69bd39a6388eb7450c"
+  integrity sha512-0fr/mIH1dlO+x7TlcMy+bIDqKPsw/70tVyeHW787goQjhmqaZe10uwLujubK9q9Lg6Fiho1KUKDYz0Z7k7g5/g==
+
+type-fest@^0.11.0:
+  version "0.11.0"
+  resolved "https://registry.yarnpkg.com/type-fest/-/type-fest-0.11.0.tgz#97abf0872310fed88a5c466b25681576145e33f1"
+  integrity sha512-OdjXJxnCN1AvyLSzeKIgXTXxV+99ZuXl3Hpo9XpJAv9MBcHrrJOQ5kV7ypXOuQie+AmWG25hLbiKdwYTifzcfQ==
+
+type-fest@^0.6.0:
+  version "0.6.0"
+  resolved "https://registry.yarnpkg.com/type-fest/-/type-fest-0.6.0.tgz#8d2a2370d3df886eb5c90ada1c5bf6188acf838b"
+  integrity sha512-q+MB8nYR1KDLrgr4G5yemftpMC7/QLqVndBmEEdqzmNj5dcFOO4Oo8qlwZE3ULT3+Zim1F8Kq4cBnikNhlCMlg==
+
+type-fest@^0.8.1:
+  version "0.8.1"
+  resolved "https://registry.yarnpkg.com/type-fest/-/type-fest-0.8.1.tgz#09e249ebde851d3b1e48d27c105444667f17b83d"
+  integrity sha512-4dbzIzqvjtgiM5rw1k5rEHtBANKmdudhGyBEajN01fEyhaAIhsoKNy6y7+IN93IfpFtwY9iqi7kD+xwKhQsNJA==
+
+typedarray-to-buffer@^3.1.5:
+  version "3.1.5"
+  resolved "https://registry.yarnpkg.com/typedarray-to-buffer/-/typedarray-to-buffer-3.1.5.tgz#a97ee7a9ff42691b9f783ff1bc5112fe3fca9080"
+  integrity sha512-zdu8XMNEDepKKR+XYOXAVPtWui0ly0NtohUscw+UmaHiAWT8hrV1rr//H6V+0DvJ3OQ19S979M0laLfX8rm82Q==
+  dependencies:
+    is-typedarray "^1.0.0"
+
+union-value@^1.0.0:
+  version "1.0.1"
+  resolved "https://registry.yarnpkg.com/union-value/-/union-value-1.0.1.tgz#0b6fe7b835aecda61c6ea4d4f02c14221e109847"
+  integrity sha512-tJfXmxMeWYnczCVs7XAEvIV7ieppALdyepWMkHkwciRpZraG/xwT+s2JN8+pr1+8jCRf80FFzvr+MpQeeoF4Xg==
+  dependencies:
+    arr-union "^3.1.0"
+    get-value "^2.0.6"
+    is-extendable "^0.1.1"
+    set-value "^2.0.1"
+
+unset-value@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/unset-value/-/unset-value-1.0.0.tgz#8376873f7d2335179ffb1e6fc3a8ed0dfc8ab559"
+  integrity sha1-g3aHP30jNRef+x5vw6jtDfyKtVk=
+  dependencies:
+    has-value "^0.3.1"
+    isobject "^3.0.0"
+
+uri-js@^4.2.2:
+  version "4.4.1"
+  resolved "https://registry.yarnpkg.com/uri-js/-/uri-js-4.4.1.tgz#9b1a52595225859e55f669d928f88c6c57f2a77e"
+  integrity sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==
+  dependencies:
+    punycode "^2.1.0"
+
+urix@^0.1.0:
+  version "0.1.0"
+  resolved "https://registry.yarnpkg.com/urix/-/urix-0.1.0.tgz#da937f7a62e21fec1fd18d49b35c2935067a6c72"
+  integrity sha1-2pN/emLiH+wf0Y1Js1wpNQZ6bHI=
+
+use@^3.1.0:
+  version "3.1.1"
+  resolved "https://registry.yarnpkg.com/use/-/use-3.1.1.tgz#d50c8cac79a19fbc20f2911f56eb973f4e10070f"
+  integrity sha512-cwESVXlO3url9YWlFW/TA9cshCEhtu7IKJ/p5soJ/gGpj7vbvFrAY/eIioQ6Dw23KjZhYgiIo8HOs1nQ2vr/oQ==
+
+uuid@^3.3.2:
+  version "3.4.0"
+  resolved "https://registry.yarnpkg.com/uuid/-/uuid-3.4.0.tgz#b23e4358afa8a202fe7a100af1f5f883f02007ee"
+  integrity sha512-HjSDRw6gZE5JMggctHBcjVak08+KEVhSIiDzFnT9S9aegmp85S/bReBVTb4QTFaRNptJ9kuYaNhnbNEOkbKb/A==
+
+uuid@^8.3.0:
+  version "8.3.2"
+  resolved "https://registry.yarnpkg.com/uuid/-/uuid-8.3.2.tgz#80d5b5ced271bb9af6c445f21a1a04c606cefbe2"
+  integrity sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==
+
+v8-to-istanbul@^7.0.0:
+  version "7.1.0"
+  resolved "https://registry.yarnpkg.com/v8-to-istanbul/-/v8-to-istanbul-7.1.0.tgz#5b95cef45c0f83217ec79f8fc7ee1c8b486aee07"
+  integrity sha512-uXUVqNUCLa0AH1vuVxzi+MI4RfxEOKt9pBgKwHbgH7st8Kv2P1m+jvWNnektzBh5QShF3ODgKmUFCf38LnVz1g==
+  dependencies:
+    "@types/istanbul-lib-coverage" "^2.0.1"
+    convert-source-map "^1.6.0"
+    source-map "^0.7.3"
+
+validate-npm-package-license@^3.0.1:
+  version "3.0.4"
+  resolved "https://registry.yarnpkg.com/validate-npm-package-license/-/validate-npm-package-license-3.0.4.tgz#fc91f6b9c7ba15c857f4cb2c5defeec39d4f410a"
+  integrity sha512-DpKm2Ui/xN7/HQKCtpZxoRWBhZ9Z0kqtygG8XCgNQ8ZlDnxuQmWhj566j8fN4Cu3/JmbhsDo7fcAJq4s9h27Ew==
+  dependencies:
+    spdx-correct "^3.0.0"
+    spdx-expression-parse "^3.0.0"
+
+verror@1.10.0:
+  version "1.10.0"
+  resolved "https://registry.yarnpkg.com/verror/-/verror-1.10.0.tgz#3a105ca17053af55d6e270c1f8288682e18da400"
+  integrity sha1-OhBcoXBTr1XW4nDB+CiGguGNpAA=
+  dependencies:
+    assert-plus "^1.0.0"
+    core-util-is "1.0.2"
+    extsprintf "^1.2.0"
+
+w3c-hr-time@^1.0.2:
+  version "1.0.2"
+  resolved "https://registry.yarnpkg.com/w3c-hr-time/-/w3c-hr-time-1.0.2.tgz#0a89cdf5cc15822df9c360543676963e0cc308cd"
+  integrity sha512-z8P5DvDNjKDoFIHK7q8r8lackT6l+jo/Ye3HOle7l9nICP9lf1Ci25fy9vHd0JOWewkIFzXIEig3TdKT7JQ5fQ==
+  dependencies:
+    browser-process-hrtime "^1.0.0"
+
+w3c-xmlserializer@^2.0.0:
+  version "2.0.0"
+  resolved "https://registry.yarnpkg.com/w3c-xmlserializer/-/w3c-xmlserializer-2.0.0.tgz#3e7104a05b75146cc60f564380b7f683acf1020a"
+  integrity sha512-4tzD0mF8iSiMiNs30BiLO3EpfGLZUT2MSX/G+o7ZywDzliWQ3OPtTZ0PTC3B3ca1UAf4cJMHB+2Bf56EriJuRA==
+  dependencies:
+    xml-name-validator "^3.0.0"
+
+walker@^1.0.7, walker@~1.0.5:
+  version "1.0.7"
+  resolved "https://registry.yarnpkg.com/walker/-/walker-1.0.7.tgz#2f7f9b8fd10d677262b18a884e28d19618e028fb"
+  integrity sha1-L3+bj9ENZ3JisYqITijRlhjgKPs=
+  dependencies:
+    makeerror "1.0.x"
+
+webidl-conversions@^5.0.0:
+  version "5.0.0"
+  resolved "https://registry.yarnpkg.com/webidl-conversions/-/webidl-conversions-5.0.0.tgz#ae59c8a00b121543a2acc65c0434f57b0fc11aff"
+  integrity sha512-VlZwKPCkYKxQgeSbH5EyngOmRp7Ww7I9rQLERETtf5ofd9pGeswWiOtogpEO850jziPRarreGxn5QIiTqpb2wA==
+
+webidl-conversions@^6.1.0:
+  version "6.1.0"
+  resolved "https://registry.yarnpkg.com/webidl-conversions/-/webidl-conversions-6.1.0.tgz#9111b4d7ea80acd40f5270d666621afa78b69514"
+  integrity sha512-qBIvFLGiBpLjfwmYAaHPXsn+ho5xZnGvyGvsarywGNc8VyQJUMHJ8OBKGGrPER0okBeMDaan4mNBlgBROxuI8w==
+
+whatwg-encoding@^1.0.5:
+  version "1.0.5"
+  resolved "https://registry.yarnpkg.com/whatwg-encoding/-/whatwg-encoding-1.0.5.tgz#5abacf777c32166a51d085d6b4f3e7d27113ddb0"
+  integrity sha512-b5lim54JOPN9HtzvK9HFXvBma/rnfFeqsic0hSpjtDbVxR3dJKLc+KB4V6GgiGOvl7CY/KNh8rxSo9DKQrnUEw==
+  dependencies:
+    iconv-lite "0.4.24"
+
+whatwg-mimetype@^2.3.0:
+  version "2.3.0"
+  resolved "https://registry.yarnpkg.com/whatwg-mimetype/-/whatwg-mimetype-2.3.0.tgz#3d4b1e0312d2079879f826aff18dbeeca5960fbf"
+  integrity sha512-M4yMwr6mAnQz76TbJm914+gPpB/nCwvZbJU28cUD6dR004SAxDLOOSUaB1JDRqLtaOV/vi0IC5lEAGFgrjGv/g==
+
+whatwg-url@^8.0.0:
+  version "8.4.0"
+  resolved "https://registry.yarnpkg.com/whatwg-url/-/whatwg-url-8.4.0.tgz#50fb9615b05469591d2b2bd6dfaed2942ed72837"
+  integrity sha512-vwTUFf6V4zhcPkWp/4CQPr1TW9Ml6SF4lVyaIMBdJw5i6qUUJ1QWM4Z6YYVkfka0OUIzVo/0aNtGVGk256IKWw==
+  dependencies:
+    lodash.sortby "^4.7.0"
+    tr46 "^2.0.2"
+    webidl-conversions "^6.1.0"
+
+which-module@^2.0.0:
+  version "2.0.0"
+  resolved "https://registry.yarnpkg.com/which-module/-/which-module-2.0.0.tgz#d9ef07dce77b9902b8a3a8fa4b31c3e3f7e6e87a"
+  integrity sha1-2e8H3Od7mQK4o6j6SzHD4/fm6Ho=
+
+which@^1.2.9:
+  version "1.3.1"
+  resolved "https://registry.yarnpkg.com/which/-/which-1.3.1.tgz#a45043d54f5805316da8d62f9f50918d3da70b0a"
+  integrity sha512-HxJdYWq1MTIQbJ3nw0cqssHoTNU267KlrDuGZ1WYlxDStUtKUhOaJmh112/TZmHxxUfuJqPXSOm7tDyas0OSIQ==
+  dependencies:
+    isexe "^2.0.0"
+
+which@^2.0.1, which@^2.0.2:
+  version "2.0.2"
+  resolved "https://registry.yarnpkg.com/which/-/which-2.0.2.tgz#7c6a8dd0a636a0327e10b59c9286eee93f3f51b1"
+  integrity sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==
+  dependencies:
+    isexe "^2.0.0"
+
+word-wrap@~1.2.3:
+  version "1.2.3"
+  resolved "https://registry.yarnpkg.com/word-wrap/-/word-wrap-1.2.3.tgz#610636f6b1f703891bd34771ccb17fb93b47079c"
+  integrity sha512-Hz/mrNwitNRh/HUAtM/VT/5VH+ygD6DV7mYKZAtHOrbs8U7lvPS6xf7EJKMF0uW1KJCl0H701g3ZGus+muE5vQ==
+
+wrap-ansi@^6.2.0:
+  version "6.2.0"
+  resolved "https://registry.yarnpkg.com/wrap-ansi/-/wrap-ansi-6.2.0.tgz#e9393ba07102e6c91a3b221478f0257cd2856e53"
+  integrity sha512-r6lPcBGxZXlIcymEu7InxDMhdW0KDxpLgoFLcguasxCaJ/SOIZwINatK9KY/tf+ZrlywOKU0UDj3ATXUBfxJXA==
+  dependencies:
+    ansi-styles "^4.0.0"
+    string-width "^4.1.0"
+    strip-ansi "^6.0.0"
+
+wrappy@1:
+  version "1.0.2"
+  resolved "https://registry.yarnpkg.com/wrappy/-/wrappy-1.0.2.tgz#b5243d8f3ec1aa35f1364605bc0d1036e30ab69f"
+  integrity sha1-tSQ9jz7BqjXxNkYFvA0QNuMKtp8=
+
+write-file-atomic@^3.0.0:
+  version "3.0.3"
+  resolved "https://registry.yarnpkg.com/write-file-atomic/-/write-file-atomic-3.0.3.tgz#56bd5c5a5c70481cd19c571bd39ab965a5de56e8"
+  integrity sha512-AvHcyZ5JnSfq3ioSyjrBkH9yW4m7Ayk8/9My/DD9onKeu/94fwrMocemO2QAJFAlnnDN+ZDS+ZjAR5ua1/PV/Q==
+  dependencies:
+    imurmurhash "^0.1.4"
+    is-typedarray "^1.0.0"
+    signal-exit "^3.0.2"
+    typedarray-to-buffer "^3.1.5"
+
+ws@^5.2.0:
+  version "5.2.2"
+  resolved "https://registry.yarnpkg.com/ws/-/ws-5.2.2.tgz#dffef14866b8e8dc9133582514d1befaf96e980f"
+  integrity sha512-jaHFD6PFv6UgoIVda6qZllptQsMlDEJkTQcybzzXDYM1XO9Y8em691FGMPmM46WGyLU4z9KMgQN+qrux/nhlHA==
+  dependencies:
+    async-limiter "~1.0.0"
+
+ws@^7.2.3:
+  version "7.4.3"
+  resolved "https://registry.yarnpkg.com/ws/-/ws-7.4.3.tgz#1f9643de34a543b8edb124bdcbc457ae55a6e5cd"
+  integrity sha512-hr6vCR76GsossIRsr8OLR9acVVm1jyfEWvhbNjtgPOrfvAlKzvyeg/P6r8RuDjRyrcQoPQT7K0DGEPc7Ae6jzA==
+
+xml-name-validator@^3.0.0:
+  version "3.0.0"
+  resolved "https://registry.yarnpkg.com/xml-name-validator/-/xml-name-validator-3.0.0.tgz#6ae73e06de4d8c6e47f9fb181f78d648ad457c6a"
+  integrity sha512-A5CUptxDsvxKJEU3yO6DuWBSJz/qizqzJKOMIfUJHETbBw/sFaDxgd6fxm1ewUaM0jZ444Fc5vC5ROYurg/4Pw==
+
+xmlchars@^2.2.0:
+  version "2.2.0"
+  resolved "https://registry.yarnpkg.com/xmlchars/-/xmlchars-2.2.0.tgz#060fe1bcb7f9c76fe2a17db86a9bc3ab894210cb"
+  integrity sha512-JZnDKK8B0RCDw84FNdDAIpZK+JuJw+s7Lz8nksI7SIuU3UXJJslUthsi+uWBUYOwPFwW7W7PRLRfUKpxjtjFCw==
+
+y18n@^4.0.0:
+  version "4.0.1"
+  resolved "https://registry.yarnpkg.com/y18n/-/y18n-4.0.1.tgz#8db2b83c31c5d75099bb890b23f3094891e247d4"
+  integrity sha512-wNcy4NvjMYL8gogWWYAO7ZFWFfHcbdbE57tZO8e4cbpj8tfUcwrwqSl3ad8HxpYWCdXcJUCeKKZS62Av1affwQ==
+
+yallist@^4.0.0:
+  version "4.0.0"
+  resolved "https://registry.yarnpkg.com/yallist/-/yallist-4.0.0.tgz#9bb92790d9c0effec63be73519e11a35019a3a72"
+  integrity sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==
+
+yargs-parser@^18.1.2:
+  version "18.1.3"
+  resolved "https://registry.yarnpkg.com/yargs-parser/-/yargs-parser-18.1.3.tgz#be68c4975c6b2abf469236b0c870362fab09a7b0"
+  integrity sha512-o50j0JeToy/4K6OZcaQmW6lyXXKhq7csREXcDwk2omFPJEwUNOVtJKvmDr9EI1fAJZUyZcRF7kxGBWmRXudrCQ==
+  dependencies:
+    camelcase "^5.0.0"
+    decamelize "^1.2.0"
+
+yargs@^15.4.1:
+  version "15.4.1"
+  resolved "https://registry.yarnpkg.com/yargs/-/yargs-15.4.1.tgz#0d87a16de01aee9d8bec2bfbf74f67851730f4f8"
+  integrity sha512-aePbxDmcYW++PaqBsJ+HYUFwCdv4LVvdnhBy78E57PIor8/OVvhMrADFFEDh8DHDFRv/O9i3lPhsENjO7QX0+A==
+  dependencies:
+    cliui "^6.0.0"
+    decamelize "^1.2.0"
+    find-up "^4.1.0"
+    get-caller-file "^2.0.1"
+    require-directory "^2.1.1"
+    require-main-filename "^2.0.0"
+    set-blocking "^2.0.0"
+    string-width "^4.2.0"
+    which-module "^2.0.0"
+    y18n "^4.0.0"
+    yargs-parser "^18.1.2"
+
+zen-observable@^0.8.14:
+  version "0.8.15"
+  resolved "https://registry.yarnpkg.com/zen-observable/-/zen-observable-0.8.15.tgz#96415c512d8e3ffd920afd3889604e30b9eaac15"
+  integrity sha512-PQ2PC7R9rslx84ndNBZB/Dkv8V8fZEpk83RLgXtYd0fwUgEjseMn1Dgajh2x6S8QbZAFa9p2qVCEuYZNgve0dQ==
